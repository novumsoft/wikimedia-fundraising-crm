<?php
// FIXME: some functions begin with the incorrect prefix "exchange_rate_"
use exchange_rates\OandaRetriever;
use exchange_rates\EcbRetriever;
use exchange_rates\ExchangeRateUpdateException;

function exchange_rates_menu() {
  $items = array();
  
  $items['admin/config/exchange_rates'] = array(
    'title' => 'Exchange rates',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/exchange_rates/key'] = array(
    'title' => t('Configure Credentials'),
    'description' => t('Set API key values for exchange rate providers that require authentication'),
	'page callback' => 'drupal_get_form',
    'page arguments' => array('exchange_rates_credentials_form'),
    'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/exchange_rates/show'] = array(
    'title' => 'Display exchange rates',
    'description' => 'List the current exchange rates for every country, and date retrieved.',
    'page callback' => 'exchange_rates_listing',
    'access arguments' => array('access content'),
  );
  $items['admin/config/exchange_rates/update'] = array(
    'title' => t('Update exchange rates'),
    'description' => 'Force an update of the cached exchange rates.  This should only be necessary during development.',
    'page callback' => 'exchange_rates_manual_update',
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

function exchange_rates_credentials_form() {
	$form = array();

	$form['exchange_rates_quote_oanda'] = array(
		'#type' => 'select',
		'#title' => 'OANDA data request',
		'#required' => TRUE,
		'#options' => array(
			'bid' => 'Average bid',
			'low_bid' => 'Low bid',
			'high_bid' => 'High bid',
			'midpoint' => 'Midpoint between average bid and average ask'
		),
		'#default_value' => variable_get('exchange_rates_quote_oanda', 'bid'),
		'#description' => 'Which data point to request from OANDA for each currency',
	);

	$form['exchange_rates_key_oanda'] = array(
		'#type' => 'password',
		'#title' => 'OANDA API Key',
		'#required' => TRUE,
		'#default_value' => variable_get('exchange_rates_key_oanda', ''),
		'#description' => 'Key for OANDA API calls (found on OANDA account settings page)',
	);

	return system_settings_form($form);
}

function exchange_rates_get_currencies() {
  static $currencies = array();
  if (empty($currencies)) {
    $currencies = array();
    $res = db_query('SELECT currency FROM {exchange_rates} GROUP BY currency ORDER BY currency');
    foreach ( $res as $row ) {
      $currencies[$row->currency] = $row->currency;
    }
  }
  return $currencies;
}

function exchange_rates_manual_update() {
  exchange_rates_update_all();
  drupal_set_message(t('Exchange rates updated'));
  drupal_goto('admin/config/exchange_rates');
}

function exchange_rates_listing() {
  $cols = array(
    t('Currency'),
    t('Value in USD'),
  );

  $rates = exchange_rates_get_conversions();

  $content[] = t('Last updated: %updated', array('%updated' => format_date(variable_get('exchange_rates_bank_update', 0))));
  $content[] = t('Remaining quotes: %remaining', array('%remaining' => variable_get('exchange_rates_remaining_quotes', 'unknown')));
  $content[] = theme( 'table', array( 'header' => $cols, 'rows' => $rates ) );
  
  return implode("<br />\n", $content);
}

/**
 * Return a map from (currency, rate), where the rate is given as USD equivalent.
 */
function exchange_rates_get_conversions() {
  $sql = <<<EOS
SELECT
    currency,
    (
        SELECT value_in_usd
        FROM {exchange_rates} unter
        WHERE unter.currency = oder.currency
        ORDER BY bank_update DESC
        LIMIT 1
    ) AS latest_value

FROM {exchange_rates} oder
GROUP BY currency
ORDER BY currency ASC
EOS;

  $rates = db_query($sql);
  $rows = array();
  foreach ( $rates as $conversion ) {
    $rows[] = array(
      $conversion->currency,
      $conversion->latest_value,
    );
  }
  return $rows;
}

function exchange_rate_convert($from_currency, $amount = 1, $timestamp = NULL) {
  if (!$timestamp) {
    $timestamp = time();
  }

  $amount = str_replace(',', '', $amount);

  $rate = exchange_rate_cache_get($from_currency, $timestamp);
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency AND bank_update <= :date ORDER BY bank_update DESC', 0, 1, array( ':currency' => $from_currency, ':date' => $timestamp ))->fetchField();
    exchange_rate_cache_set($from_currency, $timestamp, $rate);
  }

  // If a rate can't be found, use the oldest one on file.
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency ORDER BY bank_update', 0, 1, array( ':currency' => $from_currency ))->fetchField();
  }
  
  if (!$rate) {
    throw new ExchangeRatesException(t("No conversion available for currency !cur", array("!cur" => $from_currency)));
  }

  return $amount * $rate;  
}

function exchange_rate_cache_key($currency, $timestamp) {
    return "$currency-$timestamp";
}

function exchange_rate_cache_get($currency, $timestamp) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    if (!empty($_exchange_rate_cache) && array_key_exists($key, $_exchange_rate_cache)) {
        return $_exchange_rate_cache[$key];
    }
}

function exchange_rate_cache_set($currency, $timestamp, $rate) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    $_exchange_rate_cache[$key] = $rate;
}

function exchange_rates_update_all() {

	// If you update this list, also update the list in the DonationInterface extension
	$currencies = array(
		'ADF', // Andorran Franc
		'ADP', // Andorran Peseta
		'AED', // Utd. Arab Emir. Dirham
		'AFA', // Afghanistan Afghani
		'AFN', // Afghanistan Afghani
		'ALL', // Albanian Lek
		'AMD', // Armenian Dram
		'ANG', // NL Antillian Guilder
		'AOA', // Angolan Kwanza
		'AON', // Angolan Old Kwanza
		'ARS', // Argentinian peso
		'ATS', // Austrian Schilling
		'AUD', // Australian Dollar
		'AWG', // Aruban Florin
		'AZM', // Azerbaijan Old Manat
		'AZN', // Azerbaijan New Manat
		'BAM', // Bosnian Mark
		'BBD', // Barbadian dollar
		'BDT', // Bangladeshi Taka
		'BEF', // Belgian Franc
		'BGL', // Bulgarian Old Lev
		'BGN', // Bulgarian Lev
		'BHD', // Bahraini Dinar
		'BIF', // Burundi Franc
		'BMD', // Bermudian Dollar
		'BND', // Brunei Dollar
		'BOB', // Bolivian Boliviano
		'BRL', // Brazilian Real
		'BSD', // Bahamian Dollar
		'BTN', // Bhutan Ngultrum
		'BWP', // Botswana Pula
		'BYR', // Belarusian Ruble
		'BZD', // Belize Dollar
		'CAD', // Canadian Dollar
		'CDF', // Congolese Franc
		'CHF', // Swiss Franc
		'CLP', // Chilean Peso
		'CNY', // Chinese Yuan Renminbi
		'COP', // Colombian Peso
		'CRC', // Costa Rican Colon
		'CUC', // Cuban Convertible Peso
		'CUP', // Cuban Peso
		'CVE', // Cape Verde Escudo
		'CYP', // Cyprus Pound
		'CZK', // Czech Koruna
		'DEM', // German Mark
		'DJF', // Djibouti Franc
		'DKK', // Danish Krone
		'DOP', // Dominican R. Peso
		'DZD', // Algerian Dinar
		'ECS', // Ecuador Sucre
		'EEK', // Estonian Kroon
		'EGP', // Egyptian Pound
		'ESP', // Spanish Peseta
		'ETB', // Ethiopian Birr
		'EUR', // Euro
		'FIM', // Finnish Markka
		'FJD', // Fiji Dollar
		'FKP', // Falkland Islands Pound
		'FRF', // French Franc
		'GBP', // British Pound
		'GEL', // Georgian Lari
		'GHC', // Ghanaian Cedi
		'GHS', // Ghanaian New Cedi
		'GIP', // Gibraltar Pound
		'GMD', // Gambian Dalasi
		'GNF', // Guinea Franc
		'GRD', // Greek Drachma
		'GTQ', // Guatemalan Quetzal
		'GYD', // Guyanese Dollar
		'HKD', // Hong Kong Dollar
		'HNL', // Honduran Lempira
		'HRK', // Croatian Kuna
		'HTG', // Haitian Gourde
		'HUF', // Hungarian Forint
		'IDR', // Indonesian Rupiah
		'IEP', // Irish Punt
		'ILS', // Israeli New Shekel
		'INR', // Indian Rupee
		'IQD', // Iraqi Dinar
		'IRR', // Iranian Rial
		'ISK', // Iceland Krona
		'ITL', // Italian Lira
		'JMD', // Jamaican Dollar
		'JOD', // Jordanian Dinar
		'JPY', // Japanese Yen
		'KES', // Kenyan Shilling
		'KGS', // Kyrgyzstanian Som
		'KHR', // Cambodian Riel
		'KMF', // Comoros Franc
		'KPW', // North Korean Won
		'KRW', // South Korean won
		'KWD', // Kuwaiti Dinar
		'KYD', // Cayman Islands Dollar
		'KZT', // Kazakhstani Tenge
		'LAK', // Lao Kip
		'LBP', // Lebanese Pound
		'LKR', // Sri Lankan Rupee
		'LRD', // Liberian Dollar
		'LSL', // Lesotho Loti
		'LTL', // Lithuanian Litas
		'LUF', // Luxembourg Franc
		'LVL', // Latvian Lats
		'LYD', // Libyan Dinar
		'MAD', // Moroccan Dirham
		'MDL', // Moldovan Leu
		'MGA', // Malagasy Ariary
		'MGF', // Malagasy Franc
		'MKD', // Macedonian Denar
		'MMK', // Myanmar Kyat
		'MNT', // Mongolian Tugrik
		'MOP', // Macau Pataca
		'MRO', // Mauritanian Ouguiya
		'MTL', // Maltese Lira
		'MUR', // Mauritius Rupee
		'MVR', // Maldive Rufiyaa
		'MWK', // Malawi Kwacha
		'MXN', // Mexican Peso
		'MYR', // Malaysian Ringgit
		'MZM', // Mozambique Metical
		'MZN', // Mozambique New Metical
		'NAD', // Namibia Dollar
		'NGN', // Nigerian Naira
		'NIO', // Nicaraguan Cordoba Oro
		'NLG', // Dutch Guilder
		'NOK', // Norwegian Kroner
		'NPR', // Nepalese Rupee
		'NZD', // New Zealand Dollar
		'OMR', // Omani Rial
		'PAB', // Panamanian Balboa
		'PEN', // Peruvian Nuevo Sol
		'PGK', // Papua New Guinea Kina
		'PHP', // Philippine Peso
		'PKR', // Pakistani Rupee
		'PLN', // Polish ZÅ‚oty
		'PTE', // Portuguese Escudo
		'PYG', // Paraguay Guarani
		'QAR', // Qatari Rial
		'ROL', // Romanian Lei
		'RON', // Romanian New Lei
		'RSD', // Serbian Dinar
		'RUB', // Russian Rouble
		'RWF', // Rwandan Franc
		'SAR', // Saudi Riyal
		'SBD', // Solomon Islands Dollar
		'SCR', // Seychelles Rupee
		'SDD', // Sudanese Dinar
		'SDG', // Sudanese Pound
		'SDP', // Sudanese Old Pound
		'SEK', // Swedish Krona
		'SGD', // Singapore Dollar
		'SHP', // St. Helena Pound
		'SIT', // Slovenian Tolar
		'SKK', // Slovak Koruna
		'SLL', // Sierra Leone Leone
		'SOS', // Somali Shilling
		'SRD', // Suriname Dollar
		'SRG', // Suriname Guilder
		'STD', // Sao Tome/Principe Dobra
		'SVC', // El Salvador Colon
		'SYP', // Syrian Pound
		'SZL', // Swaziland Lilangeni
		'THB', // Thai Baht
		'TJS', // Tajikistani Somoni
		'TMM', // Turkmenistan Manat
		'TMT', // Turkmenistan New Manat
		'TND', // Tunisian Dinar
		'TOP', // Tonga Pa'anga
		'TRL', // Turkish Old Lira
		'TRY', // Turkish Lira
		'TTD', // Trinidad/Tobago Dollar
		'TWD', // New Taiwan dollar
		'TZS', // Tanzanian Shilling
		'UAH', // Ukrainian hryvnia
		'UGX', // Uganda Shilling
		'USD', // U.S. dollar
		'UYU', // Uruguayan Peso
		'UZS', // Uzbekistan Som
		'VEB', // Venezuelan Bolivar
		'VEF', // Venezuelan Bolivar Fuerte
		'VND', // Vietnamese Dong
		'VUV', // Vanuatu Vatu
		'WST', // Samoan Tala
		'XAF', // Central African CFA franc
		'XAG', // Silver (oz.)
		'XAU', // Gold (oz.)
		'XCD', // East Caribbean Dollar
		'XEU', // ECU
		'XOF', // West African CFA franc
		'XPD', // Palladium (oz.)
		'XPF', // CFP Franc
		'XPT', // Platinum (oz.)
		'YER', // Yemeni Rial
		'YUN', // Yugoslav Dinar
		'ZAR', // South African Rand
		'ZMK', // Zambian Kwacha
		'ZWD', // Zimbabwe Dollar
	);

	$retrievers = array();
	$oanda_key = variable_get( 'exchange_rates_key_oanda', '' );
	$oanda_quote = variable_get( 'exchange_rates_quote_oanda', 'bid' );
	if ( $oanda_key === '' ) {
		watchdog( 'exchange_rates', 'OANDA API key not set!  Will fall back to ECB', array(), WATCHDOG_ERROR );
	} else {
		$retrievers[] = new OandaRetriever( 'drupal_http_request', $oanda_key, $oanda_quote );
	}

	$retrievers[] = new EcbRetriever( 'drupal_http_request' );
	$result = null;

	foreach ( $retrievers as $retriever ) {
		try {
			$result = $retriever->updateRates( $currencies );
			break;
		} catch ( ExchangeRateUpdateException $ex) {
			watchdog( 'exchange_rates', $ex );
		}
	}
	if ( $result === null ) {
		watchdog( 'exchange_rates', 'Could not update exchange rates from any provider!' );
		return;
	}

	$date_set = false;
	foreach( $result->rates as $code => $rate ) {
		exchange_rates_update_rate( $code, $rate['value'], $rate['date'] );
		if ( !$date_set ) {
			variable_set( 'exchange_rates_bank_update',  $rate['date'] );
			$date_set = true;
		}
	}

	if ( $result->quotesRemaining > -1 ) {
		variable_set( 'exchange_rates_remaining_quotes', $result->quotesRemaining );
	}
}

function exchange_rates_update_rate($currency, $value_in_usd, $bank_update) {
  db_merge( 'exchange_rates' )->key( array(
      'currency' => $currency,
      'bank_update' => $bank_update,
  ) )->fields( array(
      'value_in_usd' => $value_in_usd,
      'local_update' => time(),
  ) )->execute();
}

class ExchangeRatesException extends Exception {
}
