<?php
// FIXME: some functions begin with the incorrect prefix "exchange_rate_"
use exchange_rates\OandaRetriever;
use exchange_rates\EcbRetriever;
use exchange_rates\ExchangeRateUpdateException;
use exchange_rates\GoogleSheetsRatesPublisher;
use SmashPig\PaymentData\ReferenceData\CurrencyRates;

function exchange_rates_menu() {
  $items = array();

  $items['admin/config/exchange_rates'] = array(
    'title' => 'Exchange rates',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/exchange_rates/key'] = array(
    'title' => t('Configure Credentials'),
    'description' => t('Set API key values for exchange rate providers that require authentication'),
	'page callback' => 'drupal_get_form',
    'page arguments' => array('exchange_rates_credentials_form'),
    'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/exchange_rates/show'] = array(
    'title' => 'Display exchange rates',
    'description' => 'List the current exchange rates for every country, and date retrieved.',
    'page callback' => 'exchange_rates_listing',
    'access arguments' => array('access content'),
  );
  $items['admin/config/exchange_rates/update'] = array(
    'title' => t('Update exchange rates'),
    'description' => 'Force an update of the cached exchange rates.  This should only be necessary during development.',
    'page callback' => 'exchange_rates_manual_update',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function exchange_rates_credentials_form() {
	$form = array();

	$form['exchange_rates_quote_oanda'] = array(
		'#type' => 'select',
		'#title' => 'OANDA data request',
		'#required' => TRUE,
		'#options' => array(
			'bid' => 'Average bid',
			'low_bid' => 'Low bid',
			'high_bid' => 'High bid',
			'midpoint' => 'Midpoint between average bid and average ask'
		),
		'#default_value' => variable_get('exchange_rates_quote_oanda', 'bid'),
		'#description' => 'Which data point to request from OANDA for each currency',
	);

	$form['exchange_rates_key_oanda'] = array(
		'#type' => 'password',
		'#title' => 'OANDA API Key',
		'#required' => TRUE,
		'#default_value' => variable_get('exchange_rates_key_oanda', ''),
		'#description' => 'Key for OANDA API calls (found on OANDA account settings page)',
	);

	$form['exchange_rates_google_account_file_path'] = array(
		'#type' => 'textfield',
		'#title' => '(Finance Dept) Google Sheets Service Account File Path',
		'#required' => TRUE,
		'#default_value' => variable_get('exchange_rates_google_account_file_path', ''),
		'#description' => 'File Path of Google Service Account file. File Should contain service account data in JSON format, which was downloaded within https://console.developers.google.com project credentials area',
	);

	$form['exchange_rates_google_sheet_id'] = array(
		'#type' => 'textfield',
		'#title' => '(Finance Dept) Google Sheets Document ID ',
		'#required' => TRUE,
		'#default_value' => variable_get('exchange_rates_google_sheet_id', ''),
		'#description' => 'Google Sheets ID of the target document containing sheet to be written to, available in URL of sheet (e.g. 1vB5bwroKDYhtMZL83gT2DNDsqOTnqNLkNGYJmYg06S4)',
	);

	$form['exchange_rates_google_sheet_name'] = array(
		'#type' => 'textfield',
		'#title' => '(Finance Dept) Google Sheets tab/sheet name ',
		'#required' => TRUE,
		'#default_value' => variable_get('exchange_rates_google_sheet_name', ''),
		'#description' => 'Google Sheets tab/sheet name to be updated with latest exchange rates',
	);

	return system_settings_form($form);
}

function exchange_rates_get_currencies() {
  static $currencies = array();
  if (empty($currencies)) {
    $currencies = array();
    $res = db_query('SELECT currency FROM {exchange_rates} GROUP BY currency ORDER BY currency');
    foreach ( $res as $row ) {
      $currencies[$row->currency] = $row->currency;
    }
  }
  return $currencies;
}

function exchange_rates_manual_update() {
  exchange_rates_update_all();
  drupal_set_message(t('Exchange rates updated'));
  drupal_goto('admin/config/exchange_rates');
}

function exchange_rates_listing() {
  $cols = array(
    t('Currency'),
    t('Value in USD'),
  );

  $rates = exchange_rates_get_conversions();

  $content[] = t('Last updated: %updated', array('%updated' => format_date(variable_get('exchange_rates_bank_update', 0))));
  $content[] = t('Remaining quotes: %remaining', array('%remaining' => variable_get('exchange_rates_remaining_quotes', 'unknown')));
  $content[] = theme( 'table', array( 'header' => $cols, 'rows' => $rates ) );

  return implode("<br />\n", $content);
}

/**
 * Return a map from (currency, rate), where the rate is given as USD equivalent.
 */
function exchange_rates_get_conversions() {
  $sql = <<<EOS
SELECT
    currency,
    (
        SELECT value_in_usd
        FROM {exchange_rates} unter
        WHERE unter.currency = oder.currency
        ORDER BY bank_update DESC
        LIMIT 1
    ) AS latest_value

FROM {exchange_rates} oder
GROUP BY currency
ORDER BY currency ASC
EOS;

  $rates = db_query($sql);
  $rows = array();
  foreach ( $rates as $conversion ) {
    $rows[] = array(
      $conversion->currency,
      $conversion->latest_value,
    );
  }
  return $rows;
}

function exchange_rate_convert($from_currency, $amount = 1, $timestamp = NULL) {
  if (!$timestamp) {
    $timestamp = time();
  }

  $amount = str_replace(',', '', $amount);

  $rate = exchange_rate_cache_get($from_currency, $timestamp);
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency AND bank_update <= :date ORDER BY bank_update DESC', 0, 1, array( ':currency' => $from_currency, ':date' => $timestamp ))->fetchField();
    exchange_rate_cache_set($from_currency, $timestamp, $rate);
  }

  // If a rate can't be found, use the oldest one on file.
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency ORDER BY bank_update', 0, 1, array( ':currency' => $from_currency ))->fetchField();
  }

  if (!$rate) {
    throw new ExchangeRatesException(t("No conversion available for currency !cur", array("!cur" => $from_currency)));
  }

  return $amount * $rate;
}

function exchange_rate_cache_key($currency, $timestamp) {
	// Only need one entry per currency per day
	$rounded = floor( $timestamp / ( 24 * 60 * 60 ) );
    return "$currency-$rounded";
}

function exchange_rate_cache_get($currency, $timestamp) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    if (!empty($_exchange_rate_cache) && array_key_exists($key, $_exchange_rate_cache)) {
        return $_exchange_rate_cache[$key];
    }
}

function exchange_rate_cache_set($currency, $timestamp, $rate) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    $_exchange_rate_cache[$key] = $rate;
}

function exchange_rates_update_all( $date = null ) {

	// Ouroboros
	$currencies = array_keys( CurrencyRates::getCurrencyRates() );

	$retrievers = array();
	$oanda_key = variable_get( 'exchange_rates_key_oanda', '' );
	$oanda_quote = variable_get( 'exchange_rates_quote_oanda', 'bid' );
	if ( $oanda_key === '' ) {
		wmf_common_failmail( 'exchange_rates', 'OANDA API key not set!  Will fall back to ECB' );
	} else {
		$retrievers[] = new OandaRetriever( 'oanda_temp_http_request', $oanda_key, $oanda_quote );
	}

	$retrievers[] = new EcbRetriever( 'drupal_http_request' );
	$result = null;

	foreach ( $retrievers as $retriever ) {
		try {
			$result = $retriever->updateRates( $currencies, $date );
			break;
		} catch ( ExchangeRateUpdateException $ex) {
			wmf_common_failmail( 'exchange_rates', '', $ex );
		}
	}
	if ( $result === null ) {
		wmf_common_failmail( 'exchange_rates', 'Could not update exchange rates from any provider!' );
		return;
	}

	$date_set = false;
	$last_update = variable_get( 'exchange_rates_bank_update' );
	foreach( $result->rates as $code => $rate ) {
		exchange_rates_update_rate( $code, $rate['value'], $rate['date'] );
		if ( !$date_set &&
				( !$last_update || $rate['date'] > $last_update )
		) {
			variable_set( 'exchange_rates_bank_update',  $rate['date'] );
			$date_set = true;
		}
	}

	if ( $result->quotesRemaining > -1 ) {
		variable_set( 'exchange_rates_remaining_quotes', $result->quotesRemaining );
	}
}

function exchange_rates_update_rate($currency, $value_in_usd, $bank_update) {
  db_merge( 'exchange_rates' )->key( array(
      'currency' => $currency,
      'bank_update' => $bank_update,
  ) )->fields( array(
      'value_in_usd' => $value_in_usd,
      'local_update' => time(),
  ) )->execute();
}

function exchange_rates_backfill( $start, $end, $recalculate ) {
	if ( $start == null ) {
		$start_timestamp = db_query_range( 'SELECT MAX(bank_update) FROM {exchange_rates}', 0, 1 )->fetchField();
		if ( !start_timestamp ) {
			throw new ExchangeRatesException( 'Backfill start date not specified and no records in database' );
		}
		$start = new DateTime( "@$start_timestamp" ); // No TZ param
		watchdog( 'exchange_rates', "Backfill start date not specified - using last bank update from db ({$start->format( 'Y-m-d' )})" );
	}
	if ( $end == null ) {
		$end = new DateTime( 'now', new DateTimeZone( 'UTC' ) );
		watchdog( 'exchange_rates', "Backfill end date not specified - using today ({$end->format( 'Y-m-d' )})" );
	}
	for ( $date = $start; $date <= $end; $date->add( new DateInterval( 'P1D' ) ) ) {
		exchange_rates_update_all( $date );
	}

	if ( $recalculate ) {
		wmf_civicrm_recalculate_contributions( $start, $end );
	}
}

function exchange_rates_publish_to_google_sheets() {

  $google_account_file_path = variable_get( 'exchange_rates_google_account_file_path', '' );
  if ( $google_account_file_path === '' ) {
    wmf_common_failmail( 'exchange_rates', '(Finance Dept) Google Sheets Service API Account file path not set!' );
  }

  $spreadsheet_id = variable_get( 'exchange_rates_google_sheet_id', '' );
  if ( $spreadsheet_id === '' ) {
    wmf_common_failmail( 'exchange_rates', '(Finance Dept) Google Sheets document ID not set!');
  }

  $sheet_name = variable_get( 'exchange_rates_google_sheet_name', '' );
  if ( $sheet_name === '' ) {
    wmf_common_failmail( 'exchange_rates', '(Finance Dept) Google Sheets sheet/tab not set!');
  }

  try {
    $publisher = new GoogleSheetsRatesPublisher($google_account_file_path, $spreadsheet_id, $sheet_name);
    $result = $publisher->publish();
  } catch (\Exception $ex) {
    wmf_common_failmail('exchange_rates', $ex->getMessage(), $ex);
  }
  if ($result !== true) {
    wmf_common_failmail('exchange_rates', 'Could not publish exchange rates to Google Sheets API!');
    return;
  }
}

/**
 * Custom OANDA http request method. This is temporary...¯\_(ツ)_/¯
 *
 * This is a curl-specific implementation of the 'drupal_http_request'
 * We switched over to curl so we could pass in the the custom '--cipher' param
 * See https://phabricator.wikimedia.org/T260092 for details.
 *
 * Note: we're maintaining the same $result obj that the calling code expects
 *
 * @param string $url
 * @param array $header_options
 *
 * @return stdClass $result
 * @see drupal_http_request
 */
function oanda_temp_http_request($url, array $header_options = []) {
  $result = new stdClass();

  // parse the URL and make sure it's well formed
  $uri = @parse_url($url);
  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;
    return $result;
  }

  // start building up the request
  $curl = curl_init();

  // set the request headers
  $headers = [];
  $headers[] = 'Content-Type: application/json';
  $headers[] = 'cache-control: no-cache';
  // map any headers in $header_options. CURL expects the headers to be strings
  // the current calling code sends in the 'Authorization' header
  if (count($header_options) > 0) {
    if (isset($header_options['headers'])) {
      if (is_array($header_options['headers'])) {
        foreach ($header_options['headers'] as $header_key => $header_value) {
          $headers[] = $header_key . ": " . $header_value;
        }
      }
    }
  }
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);

  // set the request options
  $options = [
    CURLOPT_URL => $url,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HEADER => 1, //return response headers
    CURLOPT_CUSTOMREQUEST => 'GET',
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_USERAGENT => 'Drupal Custom(+http://drupal.org/)', // added 'Custom'
    CURLOPT_SSL_CIPHER_LIST => 'DEFAULT:!DH' //'DEFAULT@SECLEVEL=2' is new preferred
  ];
  curl_setopt_array($curl, $options);

  $curl_response = curl_exec($curl);
  $curl_response_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  $curl_error = curl_error($curl);
  curl_close($curl);

  if ($curl_error) {
    // something went wrong so we bow out here.
    $result->error = $curl_response_code . ":" . $curl_error;
    $result->code = -1001;
    return $result;
  }
  else {

    // we got back a response now let's process through it.
    // split out response headers from body and map headers to an array
    $split_response = preg_split('/(\r?\n){2}/', $curl_response, 2);
    $response_headers = $split_response[0];
    $response_body = $split_response[1];
    $response_headers_array = preg_split('/\r?\n/', $response_headers);

    // headers can be either a single value e.g. 'HTTP/1.1 200 OK' or they
    // can be key:value e.g. 'X-Rate-Limit-Remaining: 100' so for the
    // key:value strings we explode those into associative array items as the
    // calling code expects.
    foreach ( $response_headers_array as $key => $response_header ) {
      if ( strstr( $response_header, ':' ) ) {
        $header = explode( ':', $response_header );
        $response_headers_array[strtolower( $header[0] )] = ltrim( $header[1] );
        unset( $response_headers_array[$key] );
      }
    }

    $result->headers = $response_headers_array;

    // handle response code. the below is largely copied from
    // org.wikimedia.civicrm/drupal/includes/common.inc:drupal_http_request()
    $response_codes = [
      100 => 'Continue',
      101 => 'Switching Protocols',
      200 => 'OK',
      201 => 'Created',
      202 => 'Accepted',
      203 => 'Non-Authoritative Information',
      204 => 'No Content',
      205 => 'Reset Content',
      206 => 'Partial Content',
      300 => 'Multiple Choices',
      301 => 'Moved Permanently',
      302 => 'Found',
      303 => 'See Other',
      304 => 'Not Modified',
      305 => 'Use Proxy',
      307 => 'Temporary Redirect',
      400 => 'Bad Request',
      401 => 'Unauthorized',
      402 => 'Payment Required',
      403 => 'Forbidden',
      404 => 'Not Found',
      405 => 'Method Not Allowed',
      406 => 'Not Acceptable',
      407 => 'Proxy Authentication Required',
      408 => 'Request Time-out',
      409 => 'Conflict',
      410 => 'Gone',
      411 => 'Length Required',
      412 => 'Precondition Failed',
      413 => 'Request Entity Too Large',
      414 => 'Request-URI Too Large',
      415 => 'Unsupported Media Type',
      416 => 'Requested range not satisfiable',
      417 => 'Expectation Failed',
      500 => 'Internal Server Error',
      501 => 'Not Implemented',
      502 => 'Bad Gateway',
      503 => 'Service Unavailable',
      504 => 'Gateway Time-out',
      505 => 'HTTP Version not supported',
    ];

    // RFC 2616 states that all unknown HTTP codes must be treated the same as the
    // base code in their class.
    if (!isset($response_codes[$curl_response_code])) {
      $curl_response_code = floor($curl_response_code / 100) * 100;
    }
    $result->code = $curl_response_code;

    switch ($curl_response_code) {
      case 200: // OK
      case 201: // Created
      case 202: // Accepted
      case 203: // Non-Authoritative Information
      case 204: // No Content
      case 205: // Reset Content
      case 206: // Partial Content
      case 304: // Not modified
      case 301: // Moved permanently
      case 301: // Moved permanently
      case 302: // Moved temporarily
      case 307: // Moved temporarily
        break;
      default:
        $result->error = $response_codes[$curl_response_code];
    }

    $result->data = $response_body;
    return $result;
  }

}

class ExchangeRatesException extends Exception {
}
