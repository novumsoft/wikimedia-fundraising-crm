<?php
// FIXME: some functions begin with the incorrect prefix "exchange_rate_"

function exchange_rates_menu() {
  $items = array();
  
  $items['admin/config/exchange_rates'] = array(
    'title' => 'Exchange rates',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/exchange_rates/show'] = array(
    'title' => 'Display exchange rates',
    'description' => 'List the current exchange rates for every country, and date retrieved.',
    'page callback' => 'exchange_rates_listing',
    'access callback' => TRUE,
  );
  $items['admin/config/exchange_rates/update'] = array(
    'title' => t('Update exchange rates'),
    'description' => 'Force an update of the cached exchange rates.  This should only be necessary during development.',
    'page callback' => 'exchange_rates_manual_update',
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

function exchange_rates_get_currencies() {
  static $currencies = array();
  if (empty($currencies)) {
    $currencies = array();
    $res = db_query('SELECT currency FROM {exchange_rates} GROUP BY currency ORDER BY currency');
    foreach ( $res as $row ) {
      $currencies[$row->currency] = $row->currency;
    }
  }
  return $currencies;
}

function exchange_rates_manual_update() {
  exchange_rates_cron();
  drupal_set_message(t('Exchange rates updated'));
  drupal_goto('admin/config/exchange_rates');
}

function exchange_rates_listing() {
  $cols = array(
    t('Currency'),
    t('Value in USD'),
  );

  $rates = exchange_rates_get_conversions();
  
  $content[] = t('Last updated: %updated', array('%updated' => format_date(variable_get('exchange_rates_bank_update', 0))));
  $content[] = theme( 'table', array( 'header' => $cols, 'rows' => $rates ) );
  
  return implode("\n", $content);
}

/**
 * Return a map from (currency, rate), where the rate is given as USD equivalent.
 */
function exchange_rates_get_conversions() {
  $sql = <<<EOS
SELECT
    currency,
    (
        SELECT value_in_usd
        FROM {exchange_rates} unter
        WHERE unter.currency = oder.currency
        ORDER BY bank_update DESC
        LIMIT 1
    ) AS latest_value

FROM {exchange_rates} oder
GROUP BY currency
ORDER BY currency ASC
EOS;

  $rates = db_query($sql);
  $rows = array();
  foreach ( $rates as $conversion ) {
    $rows[] = array(
      $conversion->currency,
      $conversion->latest_value,
    );
  }
  return $rows;
}

function exchange_rate_convert($from_currency, $amount = 1, $timestamp = NULL) {
  if (!$timestamp) {
    $timestamp = time();
  }

  $amount = str_replace(',', '', $amount);

  $rate = exchange_rate_cache_get($from_currency, $timestamp);
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency AND bank_update <= :date ORDER BY bank_update DESC', 0, 1, array( ':currency' => $from_currency, ':date' => $timestamp ))->fetchField();
    exchange_rate_cache_set($from_currency, $timestamp, $rate);
  }

  // If a rate can't be found, use the oldest one on file.
  if (!$rate) {
    $rate = db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = :currency ORDER BY bank_update', 0, 1, array( ':currency' => $from_currency ))->fetchField();
  }
  
  if (!$rate) {
    throw new ExchangeRatesException(t("No conversion available for currency !cur", array("!cur" => $from_currency)));
  }

  return $amount * $rate;  
}

function exchange_rate_cache_key($currency, $timestamp) {
    return "$currency-$timestamp";
}

function exchange_rate_cache_get($currency, $timestamp) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    if (!empty($_exchange_rate_cache) && array_key_exists($key, $_exchange_rate_cache)) {
        return $_exchange_rate_cache[$key];
    }
}

function exchange_rate_cache_set($currency, $timestamp, $rate) {
    global $_exchange_rate_cache;

    $key = exchange_rate_cache_key($currency, $timestamp);
    $_exchange_rate_cache[$key] = $rate;
}

function exchange_rates_cron() {

	// If you update this list, also update the list in the DonationInterface extension
	$currencies = array(
		'ADF', // Andorran Franc
		'ADP', // Andorran Peseta
		'AED', // Utd. Arab Emir. Dirham
		'AFA', // Afghanistan Afghani
		'AFN', // Afghanistan Afghani
		'ALL', // Albanian Lek
		'AMD', // Armenian Dram
		'ANG', // NL Antillian Guilder
		'AOA', // Angolan Kwanza
		'AON', // Angolan Old Kwanza
		'ARS', // Argentinian peso
		'ATS', // Austrian Schilling
		'AUD', // Australian Dollar
		'AWG', // Aruban Florin
		'AZM', // Azerbaijan Old Manat
		'AZN', // Azerbaijan New Manat
		'BAM', // Bosnian Mark
		'BBD', // Barbadian dollar
		'BDT', // Bangladeshi Taka
		'BEF', // Belgian Franc
		'BGL', // Bulgarian Old Lev
		'BGN', // Bulgarian Lev
		'BHD', // Bahraini Dinar
		'BIF', // Burundi Franc
		'BMD', // Bermudian Dollar
		'BND', // Brunei Dollar
		'BOB', // Bolivian Boliviano
		'BRL', // Brazilian Real
		'BSD', // Bahamian Dollar
		'BTN', // Bhutan Ngultrum
		'BWP', // Botswana Pula
		'BYR', // Belarusian Ruble
		'BZD', // Belize Dollar
		'CAD', // Canadian Dollar
		'CDF', // Congolese Franc
		'CHF', // Swiss Franc
		'CLP', // Chilean Peso
		'CNY', // Chinese Yuan Renminbi
		'COP', // Colombian Peso
		'CRC', // Costa Rican Colon
		'CUC', // Cuban Convertible Peso
		'CUP', // Cuban Peso
		'CVE', // Cape Verde Escudo
		'CYP', // Cyprus Pound
		'CZK', // Czech Koruna
		'DEM', // German Mark
		'DJF', // Djibouti Franc
		'DKK', // Danish Krone
		'DOP', // Dominican R. Peso
		'DZD', // Algerian Dinar
		'ECS', // Ecuador Sucre
		'EEK', // Estonian Kroon
		'EGP', // Egyptian Pound
		'ESP', // Spanish Peseta
		'ETB', // Ethiopian Birr
		'EUR', // Euro
		'FIM', // Finnish Markka
		'FJD', // Fiji Dollar
		'FKP', // Falkland Islands Pound
		'FRF', // French Franc
		'GBP', // British Pound
		'GEL', // Georgian Lari
		'GHC', // Ghanaian Cedi
		'GHS', // Ghanaian New Cedi
		'GIP', // Gibraltar Pound
		'GMD', // Gambian Dalasi
		'GNF', // Guinea Franc
		'GRD', // Greek Drachma
		'GTQ', // Guatemalan Quetzal
		'GYD', // Guyanese Dollar
		'HKD', // Hong Kong Dollar
		'HNL', // Honduran Lempira
		'HRK', // Croatian Kuna
		'HTG', // Haitian Gourde
		'HUF', // Hungarian Forint
		'IDR', // Indonesian Rupiah
		'IEP', // Irish Punt
		'ILS', // Israeli New Shekel
		'INR', // Indian Rupee
		'IQD', // Iraqi Dinar
		'IRR', // Iranian Rial
		'ISK', // Iceland Krona
		'ITL', // Italian Lira
		'JMD', // Jamaican Dollar
		'JOD', // Jordanian Dinar
		'JPY', // Japanese Yen
		'KES', // Kenyan Shilling
		'KGS', // Kyrgyzstanian Som
		'KHR', // Cambodian Riel
		'KMF', // Comoros Franc
		'KPW', // North Korean Won
		'KRW', // South Korean won
		'KWD', // Kuwaiti Dinar
		'KYD', // Cayman Islands Dollar
		'KZT', // Kazakhstani Tenge
		'LAK', // Lao Kip
		'LBP', // Lebanese Pound
		'LKR', // Sri Lankan Rupee
		'LRD', // Liberian Dollar
		'LSL', // Lesotho Loti
		'LTL', // Lithuanian Litas
		'LUF', // Luxembourg Franc
		'LVL', // Latvian Lats
		'LYD', // Libyan Dinar
		'MAD', // Moroccan Dirham
		'MDL', // Moldovan Leu
		'MGA', // Malagasy Ariary
		'MGF', // Malagasy Franc
		'MKD', // Macedonian Denar
		'MMK', // Myanmar Kyat
		'MNT', // Mongolian Tugrik
		'MOP', // Macau Pataca
		'MRO', // Mauritanian Ouguiya
		'MTL', // Maltese Lira
		'MUR', // Mauritius Rupee
		'MVR', // Maldive Rufiyaa
		'MWK', // Malawi Kwacha
		'MXN', // Mexican Peso
		'MYR', // Malaysian Ringgit
		'MZM', // Mozambique Metical
		'MZN', // Mozambique New Metical
		'NAD', // Namibia Dollar
		'NGN', // Nigerian Naira
		'NIO', // Nicaraguan Cordoba Oro
		'NLG', // Dutch Guilder
		'NOK', // Norwegian Kroner
		'NPR', // Nepalese Rupee
		'NZD', // New Zealand Dollar
		'OMR', // Omani Rial
		'PAB', // Panamanian Balboa
		'PEN', // Peruvian Nuevo Sol
		'PGK', // Papua New Guinea Kina
		'PHP', // Philippine Peso
		'PKR', // Pakistani Rupee
		'PLN', // Polish ZÅ‚oty
		'PTE', // Portuguese Escudo
		'PYG', // Paraguay Guarani
		'QAR', // Qatari Rial
		'ROL', // Romanian Lei
		'RON', // Romanian New Lei
		'RSD', // Serbian Dinar
		'RUB', // Russian Rouble
		'RWF', // Rwandan Franc
		'SAR', // Saudi Riyal
		'SBD', // Solomon Islands Dollar
		'SCR', // Seychelles Rupee
		'SDD', // Sudanese Dinar
		'SDG', // Sudanese Pound
		'SDP', // Sudanese Old Pound
		'SEK', // Swedish Krona
		'SGD', // Singapore Dollar
		'SHP', // St. Helena Pound
		'SIT', // Slovenian Tolar
		'SKK', // Slovak Koruna
		'SLL', // Sierra Leone Leone
		'SOS', // Somali Shilling
		'SRD', // Suriname Dollar
		'SRG', // Suriname Guilder
		'STD', // Sao Tome/Principe Dobra
		'SVC', // El Salvador Colon
		'SYP', // Syrian Pound
		'SZL', // Swaziland Lilangeni
		'THB', // Thai Baht
		'TJS', // Tajikistani Somoni
		'TMM', // Turkmenistan Manat
		'TMT', // Turkmenistan New Manat
		'TND', // Tunisian Dinar
		'TOP', // Tonga Pa'anga
		'TRL', // Turkish Old Lira
		'TRY', // Turkish Lira
		'TTD', // Trinidad/Tobago Dollar
		'TWD', // New Taiwan dollar
		'TZS', // Tanzanian Shilling
		'UAH', // Ukrainian hryvnia
		'UGX', // Uganda Shilling
		'USD', // U.S. dollar
		'UYU', // Uruguayan Peso
		'UZS', // Uzbekistan Som
		'VEB', // Venezuelan Bolivar
		'VEF', // Venezuelan Bolivar Fuerte
		'VND', // Vietnamese Dong
		'VUV', // Vanuatu Vatu
		'WST', // Samoan Tala
		'XAF', // Central African CFA franc
		'XAG', // Silver (oz.)
		'XAU', // Gold (oz.)
		'XCD', // East Caribbean Dollar
		'XEU', // ECU
		'XOF', // West African CFA franc
		'XPD', // Palladium (oz.)
		'XPF', // CFP Franc
		'XPT', // Platinum (oz.)
		'YER', // Yemeni Rial
		'YUN', // Yugoslav Dinar
		'ZAR', // South African Rand
		'ZMK', // Zambian Kwacha
		'ZWD', // Zimbabwe Dollar
	);
	
	// Construct the URL for the API call
	$currencyList = implode( '_', $currencies );
	$url = 'https://web-services.oanda.com/cgi-bin/fxml/fxml?fxmlrequest=%3Cconvert%3E%3Cclient_id%3E';
	$url .= 'WikimediaFoundation';
	$url .= '%3C/client_id%3E%3Cexpr%3EUSD%3C/expr%3E%3Cexch%3E';
	$url .= $currencyList;
	$url .= '%3C/exch%3E%3C/convert%3E';
	
	// Retrieve and parse the XML results
	$request = drupal_http_request( $url );
	$xml = $request->data;
	$p = xml_parser_create();
	$parseSuccess = xml_parse_into_struct( $p, $xml, $results, $index );
	xml_parser_free( $p );
	
	if ( $parseSuccess ) { // make sure parsing the XML was successful before proceeding
		//date_default_timezone_set( 'America/Los_Angeles' );
		$datetime = '';
		if ( isset( $results[$index['DATE'][0]]['value'] ) ) {
			$datetime = $results[$index['DATE'][0]]['value']; // get datatime from XML
		}
		$bankUpdateTimestamp = strtotime( $datetime ); // the bank's timestamp for the rate
		variable_set( 'exchange_rates_bank_update', $bankUpdateTimestamp ); // set as persistent drupal var
		
		// For each currency, get the values from the XML and update the table
		$currencyCount = count( $index['EXCH'] );
		for ( $x = 0; $x < $currencyCount; $x++ ) {
			$currency = $results[$index['EXCH'][$x]]['value']; // the currency code
			$valueInUsd = $results[$index['BID'][$x]]['value']; // the value of 1 $currency in US dollars
			exchange_rates_update_rate( $currency, $valueInUsd, $bankUpdateTimestamp ); // update the table
		}
	} else {
		// Use our back-up XML source. This will only set the rate for the most common currencies.
        watchdog( WATCHDOG_WARNING, 'Using backup exchange rates source from the ECB' );
		$url = 'http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml';
		
		// Retrieve and parse the XML results
		$request = drupal_http_request( $url );
		$xml = $request->data;
		$p = xml_parser_create();
		xml_parse_into_struct( $p, $xml, $results, $index );
		xml_parser_free( $p );
		
		// Get date and base USD rate
		$usdBase = 0;
		$date = '';
		foreach ( $index['CUBE'] as $valIndex ) {
			$current = $results[$valIndex];
			if ( $current['attributes']['CURRENCY'] == 'USD' && isset( $current['attributes']['RATE'] ) ) {
				$usdBase = $current['attributes']['RATE'];
			}
			if ( isset( $current['attributes']['TIME'] ) ) {
				$date = $current['attributes']['TIME'];
			}
		}
		$bankUpdateTimestamp = strtotime( $date . ' 00:00:00 GMT' );
		variable_set( 'exchange_rates_bank_update', $bankUpdateTimestamp );
	  
		// Table is based on EUR, so must insert manually if we actually got anything
        if ( $usdBase !== 0 ) {
            exchange_rates_update_rate( 'EUR', $usdBase, $bankUpdateTimestamp );

            // Calculate and insert remaining rates
            foreach ( $index['CUBE'] as $valIndex ) {
                $current = $results[$valIndex];
                if ( isset( $current['attributes']['CURRENCY'] ) && isset( $current['attributes']['RATE'] ) ) {
                    exchange_rates_update_rate(
                        $current['attributes']['CURRENCY'],
                        $usdBase / $current['attributes']['RATE'],
                        $bankUpdateTimestamp
                    );
                }
            }
        }
	}
	
}

function exchange_rates_update_rate($currency, $value_in_usd, $bank_update) {
  db_merge( 'exchange_rates' )->key( array(
      'currency' => $currency,
      'bank_update' => $bank_update,
  ) )->fields( array(
      'value_in_usd' => $value_in_usd,
      'local_update' => time(),
  ) )->execute();
}

class ExchangeRatesException extends Exception {
}
