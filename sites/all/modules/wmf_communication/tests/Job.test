<?php

use wmf_communication\Job;
use wmf_communication\Mailer;
use wmf_communication\Recipient;

require_once 'TestThankyouTemplate.php';

class JobTest extends DrupalWebTestCase {
    protected $profile = 'minimal';

    public static function getInfo() {
        return array(
            'name' => 'Mailing Job',
            'group' => 'Wikimedia',
            'description' => 'Create and run a mailing job',
        );
    }

    public function setUp() {
        // FIXME: cheat by taking some variables from the live db
        $phpmailerDir = variable_get( 'wmf_common_phpmailer_location', '' );
        $twigDir = variable_get( 'wmf_common_twig_location', '' );
        $diDir = variable_get( 'wmf_common_di_location', '' );

        parent::setUp( 'wmf_communication', 'wmf_common' );

        variable_set( 'wmf_common_phpmailer_location', $phpmailerDir );
        variable_set( 'wmf_common_twig_location', $twigDir );
        variable_set( 'wmf_common_di_location', $diDir );

        variable_set( 'thank_you_from_address', 'test@localhost.net' );
        variable_set( 'thank_you_from_name', 'Testus' );

        Mailer::$defaultSystem = 'drupal';

        $api = civicrm_api_classapi();
        $success = $api->Contact->create( array(
            'contact_type' => 'Individual',
            'email' => 'test@example.com',
            'first_name' => 'Foo',
            'last_name' => 'Beer',
            'preferred_language' => 'it',
            'version' => 3,
        ) );
        if ( !$success ) {
            $this->fail( $api->errorMsg() );
        }
        $result = $api->values();
        $contact = array_pop( $result );
        $this->contactId = $contact->id;

        $this->job = Job::create( 'TestThankyouTemplate' );

        Recipient::create(
            $this->job->getId(),
            $this->contactId,
            array(
                'amount' => 'EUR 22.11',
                'receive_date' => '1999-12-31T23:59:59+0000',
            )
        );
    }

    public function testRun() {
        $this->job->run();

        $mails = $this->drupalGetMails();
        $this->assertEqual( count( $mails ), 1,
            "One and only one message was sent." );

        $expected = '[{
            "id":"wmf_communication_generic",
            "to":"Foo Beer <test@example.com>",
            "subject":"Grazie dalla Wikimedia Foundation",
            "body":"\nThis is a MIME-encoded message.\n--BOUNDARY\nContent-type: text\/plain;charset=utf-8\n\n\tCaro Foo Beer, \n\n\tGrazie per la tua donazione alla Wikimedia Foundation. \u00c8 stata\ndavvero apprezzata di cuore! \n\n\tPer le tue registrazioni: La tua donazione il\n1999-12-31T23:59:59+0000 \u00e8 stata \u20ac 22.11.\n\n\n--BOUNDARY\nContent-type: text\/html;charset=utf-8\n\n<p>Caro Foo Beer,<\/p>\n\n<p>Grazie per la tua donazione alla Wikimedia Foundation. \u00c8 stata davvero apprezzata di\ncuore!<\/p>\n\n<p>Per le tue registrazioni: La tua donazione il 1999-12-31T23:59:59+0000 \u00e8 stata\n\u20ac 22.11.<\/p>\n\n\n--BOUNDARY--",
            "headers": {
                "From":"Testus <test@localhost.net>",
                "Sender":"test@localhost.net",
                "Return-Path":"Testus <test@localhost.net>",
                "MIME-Version":"1.0",
                "Content-Type":"multipart\/alternative;boundary=BOUNDARY"
            }
        }]';
        if ( preg_match( '/boundary=(.*)$/', $mails[0]['headers']['Content-Type'], $matches ) ) {
            $boundary = $matches[1];
            $expected = str_replace( 'BOUNDARY', $boundary, $expected );
        } else {
            $this->fail( "Could not parse multi-part email" );
        }
        $expected = json_decode( $expected, true );
        $this->assertEqual( $mails, $expected,
            "Email headers and content are correct" );
    }

    public function tearDown() {
        parent::tearDown();
    }
}
