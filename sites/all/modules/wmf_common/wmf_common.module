<?php

use SmashPig\Core\Configuration;
use SmashPig\Core\Context;
use SmashPig\Core\DataStores\DamagedDatabase;
use SmashPig\Core\QueueConsumers\BaseQueueConsumer;
use wmf_common\WmfQueueConsumer;

require_once 'failmail.php';
require_once 'wmf_dates.php';

/**
 * Drupal hook function setting up the configuration page.
 *
 * @return array Menu entries
 */
function wmf_common_menu() {
  $items = array();

  $items['admin/config/wmf_common'] = array(
    'title'            => 'WMF Common',
    'access arguments' => array( 'administer wmf_common' ),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items[ 'admin/config/wmf_common/configure' ] = array(
    'title'            => 'Common Settings',
    'access arguments' => array( 'administer wmf_common' ),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array( 'wmf_common_settings' ),
  );
  $items['queue/damaged'] = array(
    'title' => 'Browse all damaged messages',
    'access arguments' => array( 'manipulate queues' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'wmf_common_queue_browser_form' ),
  );
  $items['queue/%/%'] = array(
    'access arguments' => array( 'manipulate queues' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'wmf_common_queue_item_form', 1, 2 ),
  );
  $items['queue/%/%/download'] = array(
    'access arguments' => array( 'manipulate queues' ),
    'page callback' => 'wmf_common_queue_item_download',
    'page arguments' => array( 1, 2 ),
  );
	$items['damaged/%'] = array(
		'title' => 'Examine damaged message',
		'access arguments' => array( 'manipulate queues' ),
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'wmf_common_damaged_item_form', 1 ),
	);
	$items['damaged'] = array(
		'title' => 'Search damaged messages',
		'access arguments' => array( 'manipulate queues' ),
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'wmf_common_damaged_search_form' ),
	);

  return $items;
}

/**
 * Implements hook_permission.
 *
 * Exported permissions are:
 *    administer wmf_common
 *    manipulate queues
 *
 * @return array of exported permissions.
 */
function wmf_common_permission() {
  return array(
    'administer wmf_common' => array(
        'title' => 'Configure the wmf_common module',
    ),
    'manipulate queues' => array(
        'title' => 'Edit and resend queue items',
    ),
  );
}

function wmf_common_settings() {
  $form = array();

  $form[ 'wmf_common_failmail' ] = array(
    '#type'          => 'textfield',
    '#title'         => t('Failmail Recipient Address'),
    '#required'      => TRUE,
    '#default_value' => variable_get('wmf_common_failmail', 'fr-tech@wikimedia.org'),
    '#description'   => t('Enter the failmail contact address.'),
  );
  
  $form[ 'wmf_common_no_failmail' ] = array(
    '#type'          => 'textfield',
    '#title'         => t('Failmail Message Exceptions for Email'),
    '#required'      => FALSE,
    '#default_value' => variable_get('wmf_common_no_failmail', ''),
    '#description'   => t('Comma-delimited (no spaces) list of donor email addresses that will never trigger failmail'),
  );

  $form['wmf_common_requeue_delay'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Requeue Delay Time'),
    '#default_value' => variable_get( 'wmf_common_requeue_delay', 20 * 60 ),
    '#required'      => TRUE,
    '#description'   => t('Seconds to wait before retrying a failed queue message.'),
  );

  $form['wmf_common_requeue_max'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Maximum Requeue Attempts'),
    '#default_value' => variable_get( 'wmf_common_requeue_max', 10 ),
    '#required'      => TRUE,
    '#description'   => t('Number of allowed message requeue attempts before the message is moved to the "badmsg" queue.'),
  );

  return system_settings_form($form);
}

function wmf_common_queue_browser_form( $form, &$form_state ) {
  $q = queue2civicrm_stomp();

  # TODO: collect these using a hook
  $queues = array(
    variable_get( 'queue2civicrm_subscription' ),
    variable_get( 'recurring_subscription' ),
    variable_get( 'refund_queue' ),
    variable_get( 'unsubscribe_queue' ),
    variable_get( 'job_queue', '/queue/job-requests' ),
  );

  # semi-FIXME: not actually paging
  $allMsgs = array();
  $pageSize = 100;
  foreach ( $queues as $queue ) {
    $msgs = $q->peekMultiple( "{$queue}-damaged", $pageSize );
    $pageSize -= count( $msgs );
    $allMsgs = array_merge( $allMsgs, $msgs );
  }

  $rows = array();
  foreach ( $allMsgs as $msg ) {
    $damaged_queue = str_replace( '/queue/', '', $msg->headers['destination'] );
    $queue = str_replace( '-damaged', '', $damaged_queue );
    if ( !empty( $msg->headers['correlation-id'] ) ) {
      $id = $msg->headers['correlation-id'];
    } else {
      $id = $msg->headers['message-id'];
    }

    $rows[] = array(
      $msg->headers['error'],
      $queue,
      l( $id, $q->item_url( $msg ) ),
    );
  }


  $table_html = theme_table( array(
    'header' => array(
      'Error',
      'Queue',
      'ID',
    ),
    'rows' => $rows,
    'empty' => 'Nothing in the damaged queues!  Be very suspicious...',
    'attributes' => array(),
    'caption' => t( 'Damaged messages' ),
    'colgroups' => array(),
    'sticky' => true,
  ) ).theme( 'pager' );

  $form['table'] = array(
    '#markup' => $table_html,
  );

  return $form;
}

function wmf_common_queue_item_form( $form, &$form_state, $queue, $correlationId ) {
  $q = queue2civicrm_stomp();

  $queue = preg_replace( '/[^-_a-z]/', '', $queue );
  $correlationId = preg_replace( '/[^-a-zA-Z0-9\.:]/', '', $correlationId );

  $msg = $q->getByCorrelationId( $queue, $correlationId );

  if ( !$msg ) {
	$msg = $q->getByAnyId( $queue, $correlationId );
  }

  if ( !$msg ) {
    drupal_set_message( t( 'Message %id not found.', array( '%id' => $correlationId ) ) );
    return $form;
  }

  $msg = json_decode( $msg->body, TRUE );

  if ( !empty( $msg['error'] ) ) {
    $form['error'] = array(
      '#title' => 'Error',
      '#markup' => "<div>Failure reason:<br>" . check_plain( $msg['error'] ) . "</div>",
    );
  }
  if ( !empty( $msg['original'] ) ) {
    $body = $msg['original'];
  } else {
    $body = $msg;
  }
  $form['msg_fields'] = array(
    '#type' => 'fieldset',
    '#title' => 'Message',
  );
  foreach ( $body as $key => $value ) {
    $form['msg_fields']['field-' . $key] = array(
        '#type' => 'textfield',
        '#title' => $key,
        '#default_value' => $value,
        '#maxlength' => 1024,
    );
  }

  if ( preg_match( '/-damaged$/', $queue ) ) {
    $form['resend'] = array(
      '#type' => 'submit',
      '#value' => t( 'Resend' ),
      '#disabled' => 'true',
    );
    $form['download'] = array(
      '#type' => 'submit',
      '#value' => t( 'Download' ),
    );
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t( 'Delete' ),
    );
    $form['#submit'] = array( 'wmf_common_queue_item_submit' );
  }

  return $form;
}

function wmf_common_queue_item_submit( $form, &$form_state ) {
  $queue = preg_replace( '/[^-_a-z]|-damaged$/', '', $form_state['build_info']['args'][0] );
  $correlationId = preg_replace( '/[^-a-zA-Z0-9\.:]/', '', $form_state['build_info']['args'][1] );

  $headers = array(
    'correlation-id' => $correlationId,
  );
  $body = array();
  foreach ( $form_state['values'] as $key => $value ) {
    if ( preg_match( '/field-(.*)/', $key, $matches ) ) {
      $body[$matches[1]] = $value;
    }
  }

  $q = queue2civicrm_stomp();

  switch ( $form_state['values']['op'] ) {
  case $form_state['values']['resend']:
    $msg = $q->getByAnyId( "{$queue}-damaged", $correlationId );
    $q->enqueue( json_encode( $body ), $headers + $msg->headers, $queue );

    $q->ack( $msg );

    drupal_set_message( t( 'Message %id resent for processing.', array( '%id' => $correlationId ) ) );
    $form_state['redirect'] = "queue/{$queue}/{$correlationId}";
    break;
  case $form_state['values']['delete']:
    $msg = $q->getByAnyId( "{$queue}-damaged", $correlationId );
    $q->ack( $msg );
    drupal_set_message( t( 'Successfully removed message %id.', array( '%id' => $correlationId ) ) );
    $form_state['redirect'] = "queue/damaged";
    break;
  case $form_state['values']['download']:
    $form_state['redirect'] = "queue/{$queue}-damaged/{$correlationId}/download";
    break;
  }
}

function wmf_common_queue_item_download( $queue, $correlationId ) {
  $queue = preg_replace( '/[^-_a-z]/', '', $queue );
  $correlationId = preg_replace( '/[^-a-zA-Z0-9\.:]/', '', $correlationId );

  $q = queue2civicrm_stomp();
  $msg = $q->getByAnyId( $queue, $correlationId );

  $name = mime_header_encode( "{$correlationId}.json" );
  drupal_add_http_header( 'Content-Type', 'application/json' );
  drupal_add_http_header( 'Content-Disposition', "attachment; filename=\"{$name}\"" );
  $data = json_encode( array(
    'headers' => $msg->headers,
    'body' => json_decode( $msg->body, true ),
  ) );
  echo( $data );
}

/**
 * Return the deployed source revision of this subsystem
 *
 * @return string
 *
 * TODO: This is a site-specific kludge.  Move to deployment configuration,
 * set a variable in settings_local.php
 */
function wmf_common_get_my_revision() {
    static $sourceRevision;

    if ( defined( 'WMF_SOURCE_REVISION' ) ) {
        return WMF_SOURCE_REVISION;
    } else if ( !$sourceRevision ) {
        $versionStampPath = DRUPAL_ROOT . "/.version-stamp";
        if ( file_exists( $versionStampPath ) ) {
            $versionId = file_get_contents( $versionStampPath );
            $sourceRevision = trim( $versionId );
        } else {
            $sourceRevision = 'unknown';
        }
    }
    return $sourceRevision;
}

function wmf_common_locale_civi_to_mediawiki( $locale ) {
    // LOL
    return strtolower( str_replace( '_', '-', $locale ) );
}

function wmf_common_set_message_source( &$msg, $type, $name ) {
    $msg['source_type'] = $type;
    $msg['source_name'] = $name;
    $msg['source_host'] = gethostname();
    $msg['source_version'] = wmf_common_get_my_revision();
    $msg['source_run_id'] = getmypid();
    $msg['source_enqueued_time'] = time();
}

function wmf_common_damaged_search_form( $form, &$form_state ) {
	if (
		isset( $form_state['confirm_delete'] ) &&
		isset( $form_state['values']['table'] )
	) {
		return wmf_common_damaged_confirm_delete(
			$form, $form_state['values']['table']
		);
	}

	$form['gateway'] = array(
		'#type' => 'textfield',
		'#title' => 'Gateway',
		'#maxlength' => 256,
	);

	$form['queue'] = array(
		'#type' => 'textfield',
		'#title' => 'Queue',
		'#maxlength' => 256,
	);

	$form['search'] = array(
		'#type' => 'submit',
		'#value' => t( 'Search' ),
	);

	$form['#submit'] = array( 'wmf_common_damaged_search_submit' );

	if (
		isset( $form_state['perform_query'] ) ||
		empty( $form_state['input']['op'] ) // Run query on first load
	) {
		return wmf_common_damaged_perform_query( $form, $form_state );
	}

	return $form;
}

function wmf_common_damaged_search_submit( $form, &$form_state ) {
	switch( $form_state['values']['op'] ) {
		case $form_state['values']['search']:
			$form_state['rebuild'] = true;
			$form_state['perform_query'] = true;
			break;
		case $form_state['values']['delete']:
			// Rebuild the form to confirm message deletion.
			$form_state['rebuild'] = true;
			$form_state['confirm_delete'] = true;
			break;
	}
}

function wmf_common_damaged_perform_query( $form, &$form_state ) {
	$query = Database::getConnection( 'default', 'smashpig' )
		->select( 'damaged', 'd' )
		->fields( 'd', array(
			'id', 'original_date', 'damaged_date', 'original_queue',
			'gateway', 'order_id', 'gateway_txn_id', 'error'
		) )
		->orderBy( 'damaged_date', 'DESC' )
		->condition( 'retry_date', null );

	if ( !empty( $form_state['input']['gateway'] ) ) {
		$query->condition( 'gateway', $form_state['input']['gateway'] );
	}

	if ( !empty( $form_state['input']['queue'] ) ) {
		$query->condition( 'original_queue', $form_state['input']['queue'] );
	}

	$rows = $query
		->extend( 'PagerDefault' )
		->execute()
		->fetchAllAssoc( 'id', PDO::FETCH_ASSOC );

	foreach ( $rows as $id => &$row ) {
		$err = empty( $row['error'] ) ? 'View details' : $row['error'];
		$row['error'] = l( $err, WmfQueueConsumer::itemUrl( $id ) );
	}

	$form['table'] = array(
		'#type' => 'tableselect',
		'#header' => array(
			'id' => t( 'ID' ),
			'original_date' => t( 'Original Date' ),
			'damaged_date' => t( 'Damaged Date' ),
			'original_queue' => t( 'Original Queue' ),
			'gateway' => t( 'Gateway' ),
			'order_id' => t( 'Order ID' ),
			'gateway_txn_id' => t( 'Gateway txn ID' ),
			'error' => t( 'Error' )
		),
		'#options' => $rows,
		'#empty' => 'Nothing in the damaged message table!  Be very suspicious...',
	);

	$form['resend'] = array(
		'#type' => 'submit',
		'#value' => t( 'Resend' ),
        '#disabled' => 'disabled',
	);
	$form['delete'] = array(
		'#type' => 'submit',
		'#value' => t( 'Delete' ),
	);
	return $form;
}

/**
 * Takes a list of selected and unselected ids provided by tableselect
 * and returns just those which are selected.
 * @param array $ids
 * @return array
 */
function wmf_common_get_selected( $ids ) {
	$selected = array_filter( $ids, function( $n ) { return $n; } );
	return array_keys( $selected );
}

function wmf_common_damaged_confirm_delete( $form, $ids ) {
	$ids = wmf_common_get_selected( $ids );
	$form['#submit'] = array( 'wmf_common_damaged_confirm_delete_submit' );
	$form['#ids'] = implode( ',', $ids );
	return confirm_form(
		$form,
		t( 'Really delete %n damaged messages?', array( '%n' => count( $ids ) ) ),
		'damaged'
	);
}

function wmf_common_damaged_confirm_delete_submit( $form, &$form_state ) {
	wmf_common_create_smashpig_context();
	$ids = explode( ',', $form['#ids'] );
	$ddb = DamagedDatabase::get();
	foreach( $ids as $id ) {
		$ddb->deleteMessage( array(
			'damaged_id' => $id
		) );
	}
	drupal_set_message( t(
		'Deleted %n messages', array( '%n' => count( $ids ) )
	) );
}

function wmf_common_damaged_item_form( $form, &$form_state, $id ) {
	$dbEntry = Database::getConnection( 'default', 'smashpig' )
		->select( 'damaged', 'd' )
		->fields( 'd', array(
			'original_date', 'damaged_date', 'original_queue',
			'error', 'trace', 'message'
		) )
		->condition( 'id', $id )
		->execute()
		->fetchAssoc();

	if ( !$dbEntry ) {
		drupal_set_message( t( 'Message %id not found.', array( '%id' => $id ) ) );
		return $form;
	}

	if ( !empty( $dbEntry['error'] ) ) {
		$form['error'] = array(
			'#title' => 'Error',
			'#markup' => "<div>Failure reason:<br>" . check_plain( $dbEntry['error'] ) . "</div>",
		);
	}

	if ( !empty( $dbEntry['trace'] ) ) {
		$form['trace'] = array(
			'#type' => 'fieldset',
			'#title' => t('Stack trace'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		$form['trace']['details'] = array(
			'#markup' => str_replace(
				"\n", '<br/>', check_plain( $dbEntry['trace'] )
			)
		);
	}

	$form['original_queue'] = array(
		'#type' => 'hidden',
		'#value' => $dbEntry['original_queue']
	);

	$form['damaged_id'] = array(
		'#type' => 'hidden',
		'#value' => $id
	);

	$message = json_decode( $dbEntry['message'], true );

	$form['msg_fields'] = array(
		'#type' => 'fieldset',
		'#title' => 'Message',
	);
	foreach ( $message as $key => $value ) {
		$form['msg_fields']['field-' . $key] = array(
			'#type' => 'textfield',
			'#title' => $key,
			'#default_value' => $value,
			'#maxlength' => 1024,
		);
	}
	$form['resend'] = array(
		'#type' => 'submit',
		'#value' => t( 'Resend' ),
	);
	$form['download'] = array(
		'#type' => 'submit',
		'#value' => t( 'Download' ),
	);
	$form['delete'] = array(
		'#type' => 'submit',
		'#value' => t( 'Delete' ),
	);
	$form['#submit'] = array( 'wmf_common_damaged_item_submit' );
	return $form;
}

function wmf_common_damaged_item_submit( $form, &$form_state ) {
	$delete = false;
	$id = $form_state['values']['damaged_id'];
	wmf_common_create_smashpig_context();

	switch ( $form_state['values']['op'] ) {
		case $form_state['values']['resend']:
			// TODO: resend by id only for shortcut
			$message = array();
			foreach ( $form_state['values'] as $key => $value ) {
				if ( preg_match( '/field-(.*)/', $key, $matches ) ) {
					$message[$matches[1]] = $value;
				}
			}
			$queueName = $form_state['values']['original_queue'];
			$queue = BaseQueueConsumer::getQueue( $queueName );
			$queue->push( $message );
			drupal_set_message(
				t( 'Message %id resent for processing.', array( '%id' => $id ) )
			);
			$delete = true;
			break;
		case $form_state['values']['delete']:
			$delete = true;
			drupal_set_message(
				t( 'Message %id deleted.', array( '%id' => $id ) )
			);
			break;
		default:
			drupal_set_message( t( 'Not implemented!' ) );
			break;
	}
	if ( $delete ) {
		DamagedDatabase::get()->deleteMessage( array(
			'damaged_id' => $id
		) );
		$form_state['redirect'] = 'damaged';
	}
}

function wmf_common_create_smashpig_context() {
	// Initialize SmashPig
	$config = Configuration::createForView();
	Context::initWithLogger( $config, 'wmf_common' );
}
