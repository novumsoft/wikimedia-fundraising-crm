<?php

module_load_include( 'php', 'queue2civicrm', 'tests/simpletest/BaseTestCase' );

class RefundTest extends BaseTestCase {
    public static function getInfo() {
        return array(
            'name' => 'Refund',
            'group' => 'Wikimedia',
            'description' => 'Mark a contribution as refunded',
        );
    }

    public function setUp() {
        parent::setUp();

        $api = civicrm_api_classapi();
        $api->Contact->Create( array(
            'contact_type' => 'Individual',
            'email' => 'foo@example.com',
            'version' => 3,
        ) );
        $this->contact_id = $api->id;

        $this->gateway_txn_id = "NaN-" . mt_rand();
        $this->transaction = WmfTransaction::from_unique_id( "GLOBALCOLLECT {$this->gateway_txn_id}" );

        $api->Contribution->Create( array(
            'contact_id' => $this->contact_id,
            'trxn_id' => $this->transaction->get_unique_id(),
            'contribution_type' => 'Cash',
            'total_amount' => '20.01',
            'receive_date' => wmf_common_date_unix_to_sql( time() ),
            'version' => 3,
        ) );
        $this->contribution_id = $api->id;

        wmf_civicrm_set_custom_field_values( $this->contribution_id, array(
            'original_amount' => '20.01',
            'original_currency' => 'USD',
        ) );
    }

    public function tearDown() {
        $api = civicrm_api_classapi();

        $api->Contribution->Delete( array(
            'id' => $this->contribution_id,
            'version' => 3,
        ) );

        $api->Contact->Delete( array(
            'id' => $this->contact_id,
            'version' => 3,
        ) );

        parent::tearDown();
    }

    public function testMarkRefunded() {
        $refund_id = wmf_civicrm_mark_refund( $this->contribution_id );

        $this->assertTrue( $refund_id > 0,
            "Refund created" );
        
        $api = civicrm_api_classapi();
        $api->Contribution->Get( array(
            'id' => $this->contribution_id,

            'version' => 3,
        ) );
        $contribution = array_pop( $api->values );

        $this->assertEquals( $contribution->contribution_status, 'Refunded' );
    }
}
