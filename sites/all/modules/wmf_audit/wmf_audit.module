<?php

use SmashPig\Core\Configuration;
use SmashPig\Core\ConfigurationKeyException;
use SmashPig\Core\Context;

define('WMF_AUDIT_PAYMENTS_LOGS_DIR', '/usr/local/src/logs/');

/**
 * Implementation of hook_menu()
 */
function wmf_audit_menu() {
  $items = array();

  $items['admin/config/wmf_audit'] = array(
    'title' => 'WMF Audit',
    'access arguments' => array('administer wmf_audit'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/wmf_audit/configure'] = array(
    'title' => 'WMF Audit',
    'description' => t('Configure WMF audit settings.'),
    'access arguments' => array('administer wmf_audit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmf_audit_settings'),
  );

  return $items;
}

/**
 * Dispatches to the correct processor.
 *
 * @param string $gateway name
 * @param array $options Runtime parameters
 */
function wmf_audit_main( $gateway, $options ) {
    Context::initWithLogger(
        Configuration::createForView( $gateway ),
        "{$gateway}_audit"
    );

    $audit = module_invoke( "{$gateway}_audit", 'create_processor', $options );
    if ( !$audit ) {
        throw new Exception( "Gateway [$gateway] not found" );
    }
    $audit->run();
}

/**
 * Implements hook_permission.
 *
 * Exported permissions are:
 *    administer wmf_audit
 *
 * @return array of exported permissions.
 */
function wmf_audit_permission() {
  return array(
    'administer wmf_audit' => array(
        'title' => 'Configure the wmf_audit module',
    ),
  );
}

/**
 * Callback for menu
 */
function wmf_audit_settings() {
  $form['wmf_audit_log_archive_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to directory containing WMF payments logs'),
    '#required' => TRUE,
    '#default_value' => variable_get('wmf_audit_log_archive_dir', WMF_AUDIT_PAYMENTS_LOGS_DIR),
  );
  return system_settings_form($form);
}

/**
 * Get the payments log archive directory. Same across all gateways.
 * @return string
 */
function wmf_audit_get_log_archive_dir() {
  return variable_get('wmf_audit_log_archive_dir', WMF_AUDIT_PAYMENTS_LOGS_DIR);
}

/**
 * Counts the missing transactions in the main array of missing transactions.
 * This is annoying and needed its own function, because the $missing array goes
 * $missing[$type]=> array of transactions.
 * Naturally, we're not checking to see that $type is one of the big three that
 * we expect, so it's possible to use this badly. So, don't.
 * @param array $missing An array of missing transactions by type.
 * @return int The total missing transactions in a missing transaction array
 */
function wmf_audit_count_missing($missing) {
  $count = 0;
  if (!is_array($missing) || empty($missing)) {
    return 0;
  }
  foreach ($missing as $type => $data) {
    $count += count($missing[$type]);
  }
  return $count;
}

/**
 * Remove all distilled logs older than the oldest date ($date)
 * Not even a big deal if we overshoot and remove too many, because we'll just
 * remake them next time if they're missing.
 * @param string $date The date string for the oldest log we want to keep
 * @param string $working_logs path to working logs directory
 */
function wmf_audit_remove_old_logs($date, $working_logs) {
  if (!empty($working_logs)) {
    foreach ($working_logs as $logdate => $file) {
      if ((int) $logdate < (int) $date) {
        unlink($file);
      }
    }
  }
}

/**
 * Wrapper for echo
 * Lets us switch on things we only want to see in verbose mode.
 * Also allows us to impose a char limit per line for the benefit of jenkins
 * output logs.
 * Without this, the viz blocks would just ride merrily off the right end of the
 * screen and cause stupid amounts of side scrolling.
 * @staticvar int $chars The number of single chars we've already added to this
 * line.
 * @staticvar int $limit The char limit, set at the command line
 * @param string $echo The thing you want to echo. Single chars will be added to
 * the current line, while longer strings will get their own new line.
 * @param boolean $verbose If true, this message will only appear when we are
 * running in verbose mode. The verbose option is set at the command line.
 * @return null
 */
function wmf_audit_echo($echo, $verbose = false) {
  if (($verbose && wmf_audit_runtime_options('verbose') === false)
    || wmf_audit_runtime_options('quiet') )
  {
    return;
  }
  static $chars = 0;
  static $limit = null;
  if (is_null($limit)) {
    $limit = wmf_audit_runtime_options('charlimit');
  }

  if (strlen($echo) === 1) {
    echo $echo;
    ++$chars;
    if ($limit > 0 && $chars > $limit) {
      echo "\n";
      $chars = 0;
    }
  } else {
    //echo a whole line. Gets a little tricky.
    if ($chars != 0) {
      echo "\n";
    }
    echo "$echo\n";
    $chars = 0;
  }
}

/**
 * A confusing function for holding local runtime vars without having to goof
 * around with globals. Works as both get and set, depending on what you pass in
 * with $confusing_thing
 * TODO: Stop that.  Some vars should be global, most should be private to the audit class.
 * @staticvar array $args The arguments set at runtime via drush command
 * @param array|string|null $confusing_thing A confusing thing.
 * * When it is an array, sets the internal static $args variable to that array
 * * When it is a string, it interprets the string to be the key for which there
 *   should be a value in $args, and returns that value (or false if not
 *   present).
 * * When it is null, it returns the whole $args array.
 * @return mixed Either a boolean, or a specific runtime setting (if
 * $confusing_thing is neither an array nor null)
 */
function wmf_audit_runtime_options($confusing_thing = null) {
  static $args = array();
  if (is_array($confusing_thing)) { //we're setting up the function for later use, and $confusing_thing is the array of current settings.
    $args = $confusing_thing;
    return true;
  } elseif (is_null($confusing_thing)) { //we want all the settings
    return $args;
  } elseif (array_key_exists($confusing_thing, $args)) { //we are after a specific setting
    return $args[$confusing_thing];
  }
  return false;
}

/**
 * Logs the errors we get in a consistent way
 * @param string $watchdog_message The message we want to log. Should be
 * descriptive enough that we can bug hunt without having to go all cowboy in
 * prod.
 * @param string $drush_code If this code is fatal (According to
 * wmf_audit_error_isfatal), this will result in the whole script dying.
 */
function wmf_audit_log_error($watchdog_message, $drush_code) {

  watchdog(wmf_audit_runtime_options('submod_prefix') . '_audit', $watchdog_message, NULL, WATCHDOG_ERROR);

  //Maybe explode
  if (wmf_audit_error_isfatal($drush_code)) {
    die("\n*** Fatal Error $drush_code: $watchdog_message");
  }
}

/**
 * Returns an array of errors that should not cause the script to blow up, but
 * which will probably still cause messages to get thrown out.
 * TODO: Use WmfException instead.
 * @return boolean true if the error code is fatal, otherwise false.
 */
function wmf_audit_error_isfatal($error) {
  //All of these "nonfatal" things are meant to be nonfatal to the *job*, and
  //not nonfatal to the contribution itself. We hit one of these,
  //the contribution will be skipped, and we move to the next one.
  //ALL OTHER CODES will cause the process to come to a screeching halt.
  $nonfatal = array(
    'DATA_INCONSISTENT',
    'DATA_INCOMPLETE',
    'DATA_WEIRD',
    'MISSING_PAYMENTS_LOG',
    'MISSING_MANDATORY_DATA',
    'UTM_DATA_MISMATCH',
    'NORMALIZE_DATA',
  );

  if (in_array($error, $nonfatal)) {
    return false;
  } else {
    return true;
  }
}

/**
 * Sometimes, syslog is a jerk and truncates lines in the middle of some XML. If
 * that happens, this will salvage whatever it didn't cut off.
 * @param string $node The node we want to see if we have a complete value for
 * in what's left of the xml string.
 * @param string $xml The truncated sad XML string. Or, what's left of it.
 * @return string|null If we have the entire node, the value of that node.
 * Otherwise, null.
 */
function wmf_audit_get_partial_xml_node_value($node, $xml) {
  $node1 = "<$node>";
  $node2 = "</$node>";

  $valstart = strpos($xml, $node1) + strlen($node1);
  if (!$valstart) {
    return null;
  }

  $valend = strpos($xml, $node2);
  if (!$valend) { //it cut off in that node. This next thing is therefore safe(ish).
    $valend = strpos($xml, '</');
  }

  if (!$valend) {
    return null;
  }

  $value = substr($xml, $valstart, $valend - $valstart);
  return $value;
}

/**
 * Returns the contribution tracking data for $record, if we can find it.
 * Sometimes even if we can't find it: If we're running in fakedb mode, it'll
 * stuff in placeholders.
 * @param array $record The re-fused and normal transaction that doesn't yet
 * exist in civicrm.
 * @return array|false An array of relevant contribution tracking fields for
 * this transaction, or false if we couldn't find any.
 */
function wmf_audit_get_contribution_tracking_data($record) {

  if (wmf_audit_runtime_options('fakedb')) {
    return wmf_audit_make_contribution_tracking_data($record);
  }

  $contribution_tracking_id = $record['contribution_tracking_id'];
  $dbs = wmf_civicrm_get_dbs();
  $dbs->push('donations');

  $query = "SELECT * FROM contribution_tracking WHERE id = :id";
  $result = db_query($query, array(':id' => $contribution_tracking_id));
  if (!$result->rowCount()) {
    wmf_audit_log_error("Missing Contribution Tracking data. Supposed ID='$contribution_tracking_id'", 'DATA_INCOMPLETE');
  } else {
    wmf_audit_echo("Found Contribution Tracking data. ID='$contribution_tracking_id'", true);
  }

  $result = $result->fetchAssoc();
  //unfortunately, the queue consumer doesn't do anything like... look up utm data if it's not there, but we have a ctid. So...

  if ($result) {
    if (!is_null($result['utm_source'])) {
      $utm_payment_method = explode('.', $result['utm_source']);
      $utm_payment_method = $utm_payment_method[2]; //...sure.
    } else {
      //probably one of us silly people doing things in testing...
      $utm_payment_method = NULL;
    }

    $idiotic_date_format = $result['ts'];
    $real_timestamp = date_parse($idiotic_date_format);

    $result['date'] = mktime(
      $real_timestamp['hour'], $real_timestamp['minute'], $real_timestamp['second'], $real_timestamp['month'], $real_timestamp['day'], $real_timestamp['year']
    );

    $keep = array(
      'optout',
      'anonymous',
      'utm_source',
      'utm_medium',
      'utm_campaign',
      'language',
      'date',
    );

    $ret = array();
    foreach ($keep as $thing) {
      $ret[$thing] = $result[$thing];
    }

    //and then, so we can double-check ourselves on the outside...
    $ret['utm_payment_method'] = $utm_payment_method;
    return $ret;
  }

  return false;
}

/**
 * Makes everything we need to fake contribution tracking data.
 * So: Mostly the timestamp.
 * @param array $record Transaction parsed into an array
 * @return array utm and date data appropriate for $record
 */
function wmf_audit_make_contribution_tracking_data($record) {
  $utm_stuffer = wmf_audit_runtime_options('submod_prefix') . '_audit';
  //anything we don't put in here should be handled by the universal defaults on
  //import. And that's good.
  $return = array(
    'utm_source' => $utm_stuffer,
    'utm_medium' => $utm_stuffer,
    'utm_campaign' => $utm_stuffer,
  );

  if (!array_key_exists('date', $record)) {
    wmf_audit_log_error(__FUNCTION__ . ": Record has no date field. Weirdness probably ensues", 'DATA_WEIRD');
  } else {
    $return['date'] = $record['date'];
  }

  return $return;
}

/**
 * Sends a completed transaction to... somewhere.
 * The default is to send this thing to an appropriate queue for its type.
 * Other possibilities are to echo the complete message (test mode).
 *
 * @param array $record An array representing the complete data we want to save
 * @param string $type The type of transaction we are. 'main', 'negative',
 * 'recurring'... like that.
 * @return boolean true on success, otherwise false
 */
function wmf_audit_send_transaction($record, $type) {
  if (wmf_audit_runtime_options('test')) {
    wmf_audit_echo("Test mode: Would send the following message: " . print_r($record, true), true);
    if (wmf_audit_runtime_options('test_callback')) {
	$func = wmf_audit_runtime_options('test_callback');
	$func($record, $type);
    }
    return true;
  }

  return wmf_audit_send_queue_message($record, $type);
}

/**
 * Send the message in $body to appropriate message queues.
 * @param array $body An array representing the transaction we're trying to
 * send.
 * @param string $type The type of transaction. 'main'|'negative'|'recurring'.
 * @return boolean I think this one is always true, whether or not it worked.
 * @throws Exception
 */
function wmf_audit_send_queue_message( $body, $type ) {
  $configKeys = array(
    'main' => 'data-store/donations',
    'negative' => 'data-store/refund-new', // FIXME: almost ready to do away with -new
    'recurring' => 'data-store/recurring-new',
  );

  if (!array_key_exists($type, $configKeys)) {
    throw new Exception(__FUNCTION__ . ": Unhandled message type '$type'");
  }

  wmf_common_set_message_source($body, 'audit', wmf_audit_runtime_options('submod_prefix') . ' Recon Auditor');
  $newQueue = Configuration::getDefaultConfig()->object(
    $configKeys[$type]
  );
  $newQueue->push( $body );
}
