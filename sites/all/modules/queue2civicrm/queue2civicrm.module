<?php
// include common functions
require_once( drupal_get_path( 'module', 'queue2civicrm' ) . '/queue2civicrm_common.inc' );

/**
 * Implementation of hook_menu().
 */
function queue2civicrm_menu() {
  $items = array();
  
  $items['admin/config/queue2civicrm'] = array(
    'title' => 'Queue to CiviCRM',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/queue2civicrm/configure'] = array(
    'title' => 'Configure',
    'description' => 'Configure message queue interface.',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue2civicrm_settings'),
  );

  $items['admin/config/queue2civicrm/test'] = array(
    'title' => 'Test',
    'description' => 'Run a test message through the queue.',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'queue2civicrm_test',
  );

  $items['admin/config/queue2civicrm/insert'] = array(
    'title' => 'Insert item',
    'description' => 'Insert a message into the queue.',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue2civicrm_insertmq_form'),
    'weight' => 10,
  );

  return $items;
}

function queue2civicrm_stomp_url() {
  return variable_get( 'queue2civicrm_url', 'tcp://localhost:61613' );
}

function queue2civicrm_stomp() {
  static $q = null;

  if ( !$q ) {
    $q = new Queue( queue2civicrm_stomp_url() );
  }

  return $q;
}

function queue2civicrm_test() {
  $content = array();
  
  $content[] = '<p>Attempting connection to ' . queue2civicrm_stomp_url() . '... ';  
  $q = queue2civicrm_stomp();
  try {
    $q->getConnection();
    $content[] = '[SUCCESS]</p>';
  }
  catch (Exception $e) {
    $content[] = '[FAILURE], error: ' . $e . '</p>';
  }
  
  return implode("\n", $content);
}

/**
 * Implements hook_permission().
 */
function queue2civicrm_permission() {
  return array(
    'administer queue2civicrm' => array(
      'title' => 'Administer queue2civicrm',
    ),
  );
}

/**
 * Callback for menu path "admin/config/queue2civicrm".
 */
function queue2civicrm_settings() {
  $form = array();

  $form['queue2civicrm_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable job'),
    '#description' => t('If checked, no message processing will be performed.'),
    '#default_value' => variable_get('queue2civicrm_disable', false),
  );

  $form['queue2civicrm_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection URL'),
    '#description' => t('Include the port number, like so for a typical development environment: !example_url', array( '!example_url' => 'http://localhost:61613')),
    '#required' => TRUE,
    '#default_value' => queue2civicrm_stomp_url(),
  );

  $form['queue2civicrm_subscription'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscription path'),
    '#description' => t('The queue holding normal, incoming donations waiting to be processed.'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_subscription', '/queue/test'),
  );

  $form['queue2civicrm_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of donations processed by a queue2civicrm job.'),
    '#default_value' => variable_get('queue2civicrm_batch', 0),
    '#options' => array(
      '' => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      150 => 150,
      200 => 200,
      250 => 250,
      300 => 300,
      350 => 350,
      400 => 400,
      450 => 450,
      500 => 500,
      550 => 550,
      600 => 600,
      650 => 650,
      700 => 700,
    ),
  );

  $form['queue2civicrm_batch_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of a queue2civicrm job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_batch_time', 90),
  );

  $form[ 'queue2civicrm_gateways_to_monitor' ] = array(
    '#type' => 'textfield',
    '#title' => t('Gateways to monitor'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gateways_to_monitor', 'payflowpro, paypal' ),
    '#description' => t( 'A CSV of gateway-strings that you wish to monitor in Ganglia.  The gateway string should match the name of the gateway as defined in the "gateway" field of transaction messages.')
  );
  
  $form [ 'queue2civicrm_gmetric_tmax' ] = array(
    '#type' => 'textfield',
    '#title' => t('Default tmax for gmetric reporting (in seconds)'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gmetric_tmax', 60 ),
    '#description' => t('TMAX indicates the freshness of a metric. If TN exceeds TMAX, then Ganglia is expecting a new value. However, TMAX is only advisory: Ganglia takes no action when TN exceeds TMAX.')
  );
  
  $form [ 'queue2civicrm_gmetric_dmax' ] = array(
  	'#type' => 'textfield',
    '#title' => t('Default dmax for gmetric reporting (in seconds)'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gmetric_dmax', 360 ),
    '#description' => t('DMAX indicates for how long an old metric should be retained. If TN exceeds DMAX then Ganglia will consider that that metric is no longer being monitored. Therefore, it will discard information about that metric.')
  );
  
  return system_settings_form($form);
}

function queue2civicrm_batch_process() {
  wmf_civicrm_boost_performance();

  if ( variable_get( 'queue2civicrm_disable', false ) ) {
    watchdog( 'queue2civicrm', 'Job is disabled.  Exiting.', NULL, WATCHDOG_INFO );
    return;
  }

  $processed = queue2civicrm_stomp()->dequeue_loop(
      variable_get('queue2civicrm_subscription', '/queue/test'),
      variable_get( 'queue2civicrm_batch', 0 ),
      variable_get( 'queue2civicrm_batch_time', 0 ),
      'queue2civicrm_import'
  );

  // allow for other modules to handle their own related batch processing
  $batchprocessed = module_invoke_all( 'queue2civicrm_batch_process');
  $processed += array_sum($batchprocessed);
  
  /**
   * this may some day supercede the process counts handled above...
   * 
   * Note that this might be a little whack.  At least, it feels a little sloppy.
   * The tmax/dmax fields should probably be configurable
   * through the UI rather than hardcoded here. Furthermore, we might consider specifying the names
   * of gateways to keep track of, rather than auto-generate the gateways to keep track of during 
   * queue consumption.  With the latter (current) method, we'll only report to gmetric when there
   * are > 0 msgs consumed from the queue - meaning if there are no msgs for a particular gateway, 
   * that fact will not get reported to gmetric.  But I've hardcoded the dmax param here to be the
   * same as the frequency of queue consumption, so if there are no messages in the queue for
   * a particular gateway, the gateway will report as having consumed 0 messages in ganglia anyway.
   *
   * TODO: the ganglia stuff should be a hook
   */
  $gmetric_tmax = variable_get( 'queue2civicrm_gmetric_tmax', 60 );
  $gmetric_dmax = variable_get( 'queue2civicrm_gmetric_dmax', 360 );
  $counter = _queue2civicrm_trxn_counter_get();
  foreach ( $counter->get_trxn_counts() as $gateway => $count ) {
    module_invoke( 'ganglia_reporter', 'send_metric', $gateway . ' donations', $count, 'int8', 'donations', 'both', $gmetric_tmax, $gmetric_dmax );
  }
  module_invoke( 'ganglia_reporter', 'send_metric', 'Total donations', $counter->get_count_total(), 'int8', 'donations', 'both', $gmetric_tmax, $gmetric_dmax );
  
  if ($processed > 0) {
    watchdog('queue2civicrm', 'Successfully processed ' . $processed . ' contribution(s).');
  }
  else {
    watchdog('queue2civicrm', 'No contributions processed.');
  }
}

/**
 * Process one contribution from the queue to CiviCRM.
 *
 * @param Stomp_Frame $msg
 */
function queue2civicrm_import( Stomp_Frame $msg ) {
    // save the original message for logging
    $msg_orig = $msg;

    $msg = json_decode( $msg->body, true );

    /**
    * prepare data for logging
    */
    $log = array(
        'gateway' => $msg[ 'gateway' ],
        'gateway_txn_id' => $msg[ 'gateway_txn_id' ],
        'data' => $msg_orig->body,
        'timestamp' => time(),
        'verified' => 0,
    );
    $cid = _queue2civicrm_log( $log );

    $contribution = wmf_civicrm_contribution_message_import($msg);

    // construct an array of useful info to invocations of queue2civicrm_import
    $contribution_info = array(
        'contribution_id' => $contribution['id'],
        'contact_id' => $contribution['contact_id'],
        'msg' => $msg,
    );

    // update the log if things went well
    if ( $cid ) {
        $log[ 'cid' ] = $cid;
        $log[ 'verified' ] = 1;
        $log[ 'timestamp' ] = time();
        _queue2civicrm_log( $log );
    }

    // Send thank you email, other post-import things
    module_invoke_all( 'queue2civicrm_import', $contribution_info );
    
    // keep count of the transactions
    _queue2civicrm_trxn_counter_add( $msg[ 'gateway' ] );
}

/**
 * Make the form to insert a test message into the queue
 */ 
function queue2civicrm_insertmq_form() {
  $message = queue2civicrm_generate_message();

  $form['submit1'] = array(
    '#value' => 'Insert into queue',
    '#type' => 'submit'
  );
  
  $form['queue'] = array(
    '#type' => 'textfield',
    '#title' => 'Queue to submit to',
    '#default_value' => variable_get( 'queue2civicrm_subscription', '/queue/test_donations' ),
    '#required' => TRUE
  );
  
  foreach ( $message as $key => $value ) {
    $form[$key] = array(
      '#type' => 'textfield',
      '#title' => $key,
      '#default_value' => $value
    );
  }

  $form['submit2'] = array(
    '#value' => 'Insert into queue',
    '#type' => 'submit'
  );

  return $form;
}

/** 
 * Implementation of hook_form_submit
 *
 * Submits a test message to the queue
 */
function queue2civicrm_insertmq_form_submit($form, &$form_state) {
    $q = queue2civicrm_stomp();
	  $result = $q->enqueue( drupal_json_encode($form_state['values']), array('persistent' => true), $form_state['values']['queue'] );
	  $q->disconnect();
	  if (!$result) {
      watchdog('queue2civicrm','Send to queue failed for this message: <pre>' . check_plain(print_r($form_state['values'], TRUE)) . '</pre>');
      $content = 'Failed to add item to the queue.';
      drupal_set_message($content, 'error');
    }
	  $content = 'Success adding item to the queue!';
	  watchdog('queue2civicrm','Successfully added the following to the queue: <pre>' . check_plain(print_r($form_state['values'], TRUE)) . '</pre>');
	  drupal_set_message($content);
}

/**
 * Generates random data for queue and donation insertion testing
 */
function queue2civicrm_generate_message() {
  //language codes
  $lang = array('en','de','fr');

  $currency_codes = array('USD', 'GBP', 'EUR', 'ILS');
  shuffle($currency_codes);
  $currency = (mt_rand(0,1)) ? 'USD' : $currency_codes[0];
  
  $message = array(
	'contribution_tracking_id' => '',
	'optout'                 => mt_rand(0,1),
	'anonymous'              => mt_rand(0,1),
	'comment'                => mt_rand(),
	'utm_source'             => mt_rand(),
	'utm_medium'             => mt_rand(),
	'utm_campaign'           => mt_rand(),
	'language'               => $lang[array_rand($lang)],
	'referrer'               => 'http://example.com/'.mt_rand(),
	'email'                  => mt_rand() . '@example.com',
	'first_name'             => mt_rand(),
	'middle_name'            => mt_rand(),
	'last_name'              => mt_rand(),
	'street_address'         => mt_rand(),
	'supplemental_address_1' => '',
	'city'                   => 'San Francisco',
	'state_province'         => 'CA',
	'country'                => 'USA',
	'countryID'              => 'US',
	'postal_code'            => mt_rand(02801,99999),
	'gateway'                => 'insert_test',
	'gateway_txn_id'         => mt_rand(),
	'response'               => mt_rand(),
	'currency'               => $currency,
	'original_currency'      => $currency_codes[0],
	'original_gross'         => mt_rand(0,10000)/100,
	'fee'                    => '0',
	'gross'                  => mt_rand(0,10000)/100,
	'net'                    => mt_rand(0,10000)/100,
	'date'                   => date('r'), //time(),
  );
  return $message;
}
