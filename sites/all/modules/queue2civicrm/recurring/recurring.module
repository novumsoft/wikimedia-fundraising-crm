<?php
/**
 * An extension of the queue2civicrm module to handle processing recurring payment
 * related messages from a queue.
 * 
 * You may notice the use of the words 'recurring' and 'subscription' - they are 
 * essentially interchangable.  They have slightly different meanings in the 
 * PayPal land of subscription/recurring payments, but essentially they function
 * the same.  'Recurring' more clearly captures the idea behind how the WMF uses
 * PayPal's subscription payments and is how the fundraising team colloquially refers  
 * to the 'subscription' service, so 'recurring' is used here in attempt to promote  
 * greater clarity.  'Subscription' or its derivations are used in places where PayPal 
 * uses the word in its field/variable names (eg subscr_payment). 
 */

/**
 * Implementation of hook_menu
 */
function recurring_menu() {
  $items['admin/config/queue2civicrm/recurring'] = array(
	'title' => 'Recurring payments',
       'description' => t( 'Configure the recurring payments queue' ),
	'access arguments' => array( 'administer queue2civicrm' ),
	'page callback' => 'drupal_get_form',
	'page arguments' => array( 'recurring_settings' ),
  );
  return $items;
}

/**
 * Settings form for recurring payments configuration
 */
function recurring_settings() {
  $form = array();

  $form['recurring_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable job'),
    '#description' => t('If checked, no message processing will be performed.'),
    '#default_value' => variable_get('recurring_disable', false),
  );
 
  $form['recurring_description'] = array(
    '#type' => 'markup',
    '#markup' => t('<p>The recurring queue contains notifications pertaining to subscription donations, such as monthly payments, cancellation,and expiration.</p>'),
  );
  
  $form['recurring_subscription'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscription path'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_subscription', '/queue/test_recurring'),
    '#description' => t( 'Queue to watch for recurring notifications' ),
  );
  
  $form['recurring_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of items processed by the recurring job'),
    '#default_value' => variable_get('recurring_batch', 0),
    '#options' => array(
      '' => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      120 => 120,
      150 => 150,
    ),
  );

  $form['recurring_batch_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of a recurring job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_batch_time', 90),
  );

  return system_settings_form( $form );
}

function recurring_batch_process() {
  civicrm_initialize();

  if (variable_get( "recurring_disable", false )){
    watchdog('recurring', 'Recurring is disabled. No contributions processed.');
    return 0;
  }

  $recurring_processed = queue2civicrm_stomp()->dequeue_loop(
      variable_get( 'recurring_subscription', '/queue/test_recurring' ),
      variable_get( 'recurring_batch', 0 ),
      variable_get( 'recurring_batch_time', 0 ),
      'recurring_import'
  );

  if ($recurring_processed > 0) {
    watchdog('recurring', 'Processed ' . $recurring_processed . ' subscription messages.');
  }
  else {
    watchdog('recurring', 'No contributions processed.');
  }
  
  return $recurring_processed;
}

/**
 * Import queued message contents to CiviCRM
 * 
 * @param $msg
 */
function recurring_import( $msg ) {
  global $txn_subscr_payment, $txn_subscr_acct;
  
  // store the original message for logging later
  $msg_orig = $msg;

  $msg = recurring_normalize_msg( $msg );

  /**
   * prepare data for logging
   * 
   * if we don't have a gateway_txn_id, we'll store the transaction type + the subscriber id instead - 
   * this should happen for all non-payment transactions.
   */
  $log = array(
    'gateway' => 'recurring_' . $msg['gateway'],
    'gateway_txn_id' => ( !empty( $msg[ 'gateway_txn_id_orig' ] ) ? $msg[ 'gateway_txn_id_orig' ] : $msg[ 'txn_type' ] . ":" . $msg[ 'subscr_id' ] ),
    'data' => ( is_array( $msg_orig ) ? json_encode( $msg_orig ) : $msg_orig->body ), 
    'timestamp' => time(),
    'verified' => 0,
  );
  $cid = _queue2civicrm_log( $log );
  
  // define the subscription txn type for an actual 'payment'
  $txn_subscr_payment = array( 'subscr_payment' );
  
  // define the subscription txn types that affect the subscription account
  $txn_subscr_acct = array(
    'subscr_cancel', // subscription canceled
    'subscr_eot', // subscription expired
    'subscr_failed', // failed signup
    //'subscr_modify', // subscription modification
    'subscr_signup', // subscription account creation
  );
  
  // route the message to the appropriate handler depending on transaction type
  if ( isset( $msg[ 'txn_type' ] ) && in_array( $msg[ 'txn_type' ], $txn_subscr_payment ) ) {
    if ( wmf_civicrm_get_contributions_from_gateway_id( $msg['gateway'], $msg['gateway_txn_id'] ) ) {
      watchdog( 'recurring', "Duplicate contribution: {$msg['gateway']}-{$msg['gateway_txn_id']}." );
      throw new WmfException( 'DUPLICATE_CONTRIBUTION', "Contribution already exists. Ignoring message." );
    }
    recurring_import_subscr_payment( $msg );
  } elseif ( isset( $msg[ 'txn_type' ] ) && in_array( $msg[ 'txn_type' ], $txn_subscr_acct ) ) {
    recurring_import_subscr_acct( $msg );
  } else {
    throw new WmfException( 'INVALID_RECURRING', 'Msg not recognized as a recurring payment related message.' );
  }
  
  // update the log
  if ( $cid ) {
    $log[ 'cid' ] = $cid;
    $log[ 'timestamp' ] = time();
    $log[ 'verified' ] = 1;
    _queue2civicrm_log( $log );
  }
}

/**
 * Import a recurring payment
 * 
 * @param array $msg
 */
function recurring_import_subscr_payment( $msg ) {
  /**
   * if the subscr_id is not set, we can't process it due to an error in the message.
   *  
   * otherwise, check for the parent record in civicrm_contribution_recur.
   * if one does not exist, the message is not ready for reprocessing, so requeue it.
   * 
   * otherwise, process the payment.
   */
  if ( !isset( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'Msg missing the subscr_id; cannot process.' );
  } elseif ( !$recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) { // check for parent record in civicrm_contribution_recur and fetch its id
    watchdog( 'recurring', 'Msg does not have a matching recurring record in civicrm_contribution_recur; requeueing for future processing.' );
    throw new WmfException( 'MISSING_PREDECESSOR', "Missing the initial recurring record for subscr_id {$msg['subscr_id']}" );
  }

  $contact[ 'id' ] = $recur_record->contact_id;

  //insert the contribution
  $contribution = wmf_civicrm_message_contribution_insert( $msg, $contact, $recur_record->id );
  
  /**
   *  Insert the contribution record.
   *  
   *  PayPal only sends us full address information for the user in payment messages,
   *  but we only want to insert this data once unless we're modifying the record.
   *  We know that this should be the first time we're processing a contribution 
   *  for this given user if we are also updating the contribution_tracking table
   *  for this contribution.
   */
  if ( $msg[ 'contribution_tracking_update' ] ) {
    
    // Map the tracking record to the CiviCRM contribution
    wmf_civicrm_message_update_contribution_tracking( $msg, $contribution );
    
    // update the contact
    $contact = wmf_civicrm_message_contact_update( $msg, $contact[ 'id' ] );
  
    // Insert the location record
    wmf_civicrm_message_location_insert( $msg, $contact );

	// Tag contact for review
	wmf_civicrm_tag_contact_for_review( $contact );
  }

  // update subscription record with next payment date
  $api = civicrm_api_classapi();
  $update_params = array(
    'next_sched_contribution' => wmf_common_date_unix_to_civicrm( strtotime( "+" . $recur_record->frequency_interval . " " . $recur_record->frequency_unit, $msg[ 'payment_date' ] )),
    'id' => $recur_record->id,

    'version' => 3,
  );
  $api->ContributionRecur->Create( $update_params );
  
  // construct an array of useful info to invocations of queue2civicrm_import
  $contribution_info = array(
    'contribution_id' => $contribution['id'],
    'contact_id' => $contact[ 'id' ],
    'msg' => $msg,
  );
  
  // Send thank you email, other post-import things
  module_invoke_all( 'queue2civicrm_import', $contribution_info );
}

/**
 * Import subscription account
 * 
 * Routes different subscription message types to an appropriate handling
 * function.
 * 
 * @param $msg
 */
function recurring_import_subscr_acct( $msg ) {
  switch ( $msg[ 'txn_type' ] ) {
    case 'subscr_signup':
      recurring_import_subscr_signup( $msg );
      break;
      
    case 'subscr_cancel':
      recurring_import_subscr_cancel( $msg );
      break;
      
    case 'subscr_eot':
      recurring_import_subscr_eot( $msg );
      break;
      
    case 'subscr_modify':
      recurring_import_subscr_modify( $msg );
      break;
      
    case 'subscr_failed':
      recurring_import_subscr_failed( $msg );
      break;
     
    default:
      throw new WmfException( 'INVALID_RECURRING', 'Invalid subscription message type' );
  }
}

/**
 * Import a subscription signup message
 * 
 * @param $msg
 */
function recurring_import_subscr_signup( $msg ) {
  // ensure there is not already a record of this account - if so, mark the message as succesfuly processed
  if ( $recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'DUPLICATE_CONTRIBUTION', 'Subscription account already exists' );
  }
  
  // create contact record
  $contact = wmf_civicrm_message_contact_insert( $msg );

  // Insert the location record
  wmf_civicrm_message_location_insert( $msg, $contact );

  // Tag contact for review
  wmf_civicrm_tag_contact_for_review( $contact );
  
  $api = civicrm_api_classapi();
  $insert_params = array(
    'contact_id' => $contact[ 'id' ],
    'currency' => $msg[ 'original_currency' ],
    'amount' => $msg[ 'original_gross' ],
    'frequency_unit' => $msg[ 'frequency_unit' ],
    'frequency_interval' => $msg[ 'frequency_interval' ],
    'installments' => $msg[ 'installments' ],
    'start_date' => wmf_common_date_unix_to_civicrm( $msg[ 'start_date' ] ),
    'create_date' => wmf_common_date_unix_to_civicrm( $msg[ 'create_date' ] ),
    'trxn_id' => $msg[ 'subscr_id' ],
    
    'version' => 3,
  );

  if ( !$api->ContributionRecur->Create( $insert_params ) ) {
    throw new WmfException( 'IMPORT_CONTRIB', 'Failed inserting subscriber signup for subscriber id: ' . print_r( $msg['subscr_id'], true ) . ': ' . $api->errorMsg() );
  } else {
    watchdog( 'recurring', 'Succesfully inserted subscription signup for subscriber id: %subscr_id ', array( '%subscr_id' => print_r( $msg[ 'subscr_id' ], true )), WATCHDOG_NOTICE );
  }
}

/**
 * Process a subscriber cancellation
 * 
 * @param array $msg
 */
function recurring_import_subscr_cancel( $msg ) {
  // ensure we have a record of the subscription
  if ( !$recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'Subscription account does not exist' );
  }
  
  $api = civicrm_api_classapi();
  $update_params = array(
    'id' => $recur_record->id,

    'cancel_date' => wmf_common_date_unix_to_civicrm( $msg[ 'cancel_date' ] ), 
    'end_date' => wmf_common_date_unix_to_civicrm( $msg[ 'cancel_date' ] ), 

    'version' => 3,
  );
  if ( !$api->ContributionRecur->Create( $update_params ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'There was a problem updating the subscription for cancelation for subscriber id: ' . print_r( $msg[ 'subscr_id' ], true ) . ": " . $api->errorMsg() );
  } else {
    watchdog( 'recurring', 'Succesfuly cancelled subscription for subscriber id %subscr_id', array( '%subscr_id' => print_r( $msg[ 'subscr_id' ], true )), WATCHDOG_NOTICE );
  }
}

/**
 * Process an expired subscription
 * 
 * @param array $msg
 */
function recurring_import_subscr_eot( $msg ) {
  // ensure we have a record of the subscription
  if ( !$recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'Subscription account does not exist' );
  }

  $api = civicrm_api_classapi();
  $update_params = array(
    'id' => $recur_record->id,
    'end_date' => wmf_common_date_unix_to_civicrm( time() ),

    'version' => 3,
  );
  if ( !$api->ContributionRecur->Create( $update_params ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'There was a problem updating the subscription for EOT for subscription id: %subscr_id' . print_r( $msg[ 'subscr_id' ], true ) . ": " . $api->errorMsg() );
  } else {
    watchdog( 'recurring', 'Succesfuly ended subscription for subscriber id: %subscr_id ', array( '%subscr_id' => print_r( $msg[ 'subscr_id' ], true )), WATCHDOG_NOTICE );
  }
}

/**
 * Process a subscription modification
 * 
 * NOTE: at the moment, we are not accepting modification messages, so this is currently
 * unused.
 * 
 * @param array $msg
 */
function recurring_import_subscr_modify( $msg ) {
  // ensure we have a record of the subscription
  if ( !$recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'Subscription account does not exist for subscription id: ' . print_r( $msg['subscr_id'], true ));
  }

  $api = civicrm_api_classapi();
  $update_params = array(
    'id' => $recur_record->id,

    'amount' => $msg[ 'original_gross' ],
    'frequency_unit' => $msg[ 'frequency_unit' ],
    'frequency_interval' => $msg[ 'frequency_interval' ],
    'modified_date' => wmf_common_date_unix_to_civicrm( $msg[ 'modified_date' ] ),
    //FIXME: looks wrong to base off of start_date
    'next_sched_contribution' => wmf_common_date_unix_to_civicrm( strtotime( "+" . $recur_record->frequency_interval . " " . $recur_record->frequency_unit, $msg[ 'start_date' ] )),

    'version' => 3,
  );
  if ( !$api->ContributionRecur->Create( $update_params ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'There was a problem updating the subscription record for subscription id ' . print_r( $msg['subscr_id'], true ) . ": " . $api->errorMsg() );
  }

  // update the contact
  $contact = wmf_civicrm_message_contact_update( $msg, $recur_record->contact_id );
  
  // Insert the location record
  $location = wmf_civicrm_message_location_update( $msg, $contact );
  
  // Tag contact for review
  $tag = wmf_civicrm_tag_contact_for_review( $contact );

  watchdog( 'recurring', 'Subscription succesfully modified for subscription id: %subscr_id', array( '%subscr_id' => print_r( $msg['subscr_id'], true )), WATCHDOG_NOTICE );
}

/**
 * Process failed subscription payment
 * @param $msg
 */
function recurring_import_subscr_failed( $msg ) {
  // ensure we have a record of the subscription
  if ( !$recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'Subscription account does not exist for subscription id: ' . print_r( $msg['subscr_id'], true ) );
  }
  
  $api = civicrm_api_classapi();
  $update_params = array(
    'id' => $recur_record->id,
    'failure_count' => $msg[ 'failure_count' ],
    'failure_retry_date' => wmf_common_date_unix_to_civicrm( $msg[ 'failure_retry_date' ] ),

    'version' => 3,
  );
  if ( !$api->ContributionRecur->Create( $update_params ) ) {
    throw new WmfException( 'INVALID_RECURRING', 'There was a problem updating the subscription for failed payment for subscriber id: ' . print_r( $msg['subscr_id'], true ) . ": " . $api->errorMsg() );
  } else {
    watchdog( 'recurring', 'Succesfuly cacneled subscription for failed payment for subscriber id: %subscr_id ', array( '%subscr_id' => print_r( $msg[ 'subscr_id' ], true )), WATCHDOG_NOTICE );
  }
}

/**
 * Get recurring record in CiviCRM for the given subscriber id
 * @param int $subscr_id
 * @return object|false
 */
function recurring_get_recur_record( $subscr_id ) {
  $query = "SELECT * FROM civicrm_contribution_recur WHERE trxn_id = %1";

  $dao = CRM_Core_DAO::executeQuery( $query, array(
    1 => array( $subscr_id, 'String' ),
  ) );

  if ( !$dao->fetch() ) {
    return false;
  }

  return $dao;
}

/**
 * Convert queued message to a standardized format
 * 
 * This is a wrapper to ensure that all necessary normalization occurs on the 
 * message.
 * 
 * If message is in json format, it will be converted into an array.
 *
 * @param array|string $msg
 * @return array
 */
function recurring_normalize_msg( $msg  ) {
  // Decode the message body.
  if ( !is_array( $msg ) ) {
    $msg = json_decode($msg->body, true);
  }

  if ( isset( $msg['gateway'] ) && $msg['gateway'] === 'amazon' ) {
    // should not require special normalization
  } else if ( !isset( $msg[ 'contribution_tracking_id' ]) ) {
    // we can safely assume we have a raw msg from paypal if contribution_tracking_id isn't set
    $msg = recurring_normalize_paypal_msg( $msg );
  } else {
    $msg['contribution_tracking_update'] = false;
  }

  if ( isset( $msg['frequency_unit'] ) ) {
    if ( !in_array( $msg['frequency_unit'], array( 'day', 'week', 'month', 'year' ) ) ) {
      throw new WmfException("INVALID_RECURRING", "Bad frequency unit: {$msg['frequency_unit']}");
    }
  }

  //Seeing as we're in the recurring module...
  $msg[ 'recurring' ] = true;
  
  $msg = wmf_civicrm_normalize_msg( $msg );
  return $msg;
}

/**
 * Normalize raw PayPal message
 * 
 * It is possible that we'll get a raw message from PayPal.  If that is the 
 * case, this will convert the raw PayPal message to our normalized format.
 * 
 * This is large and unwieldly.
 *
 * FIXME: move this normalization into the paypal listener
 * 
 * @param $msg
 * @return array
 */
function recurring_normalize_paypal_msg( $msg ) {
  $msg_normalized = array();

  $timestamp = ( !isset( $msg[ 'payment_date' ] ) || !strlen( $msg[ 'payment_date' ] )) ? strtotime( "now" ) : strtotime( $msg[ 'payment_date' ] );

  
  // the subscription id
  $msg_normalized[ 'subscr_id' ] = $msg[ 'subscr_id' ];
  $msg_normalized[ 'txn_type' ] = $msg[ 'txn_type' ];
  $msg_normalized[ 'contribution_tracking_id' ] = recurring_get_contribution_tracking_id( $msg );
  $msg_normalized[ 'email' ] = $msg[ 'payer_email' ];

  // Premium info
  if ( isset( $msg[ 'option_selection1' ] ) && !is_numeric( $msg[ 'option_selection1' ] ) ) {
    $msg_normalized[ 'size' ] = $msg[ 'option_selection1' ];
    $msg_normalized[ 'premium_language' ] = $msg[ 'option_selection2' ];
  }

  // Contact info
  if ( $msg[ 'txn_type' ] == 'subscr_signup' || $msg[ 'txn_type' ] == 'subscr_payment' || $msg[ 'txn_type' ] == 'subscr_modify' ) {
	  $msg_normalized[ 'first_name' ] = $msg[ 'first_name' ];
	  $msg_normalized[ 'middle_name' ] = '';
	  $msg_normalized[ 'last_name' ] = $msg[ 'last_name' ];

      if ( isset( $msg['address_street'] ) ) {
          $split = split("\n", str_replace("\r", '', $msg[ 'address_street' ]));
          $msg_normalized[ 'street_address' ] = $split[0];
          if ( count( $split ) > 1 ) {
            $msg_normalized[ 'supplemental_address_1' ] = $split[1];
          }
          $msg_normalized[ 'city' ] = $msg[ 'address_city' ];
          $msg_normalized[ 'state_province' ] = $msg[ 'address_state' ];
          $msg_normalized[ 'country' ] = $msg[ 'address_country_code' ];
          $msg_normalized[ 'postal_code' ] = $msg[ 'address_zip' ];

          // Shipping info (address same as above since PayPal only passes 1 address)
          $split = split(" ", $msg[ 'address_name' ]);
          $msg_normalized[ 'last_name_2' ] = array_pop($split);
          $msg_normalized[ 'first_name_2' ] = implode(" ", $split);
          $split = split("\n", str_replace("\r", '', $msg[ 'address_street' ]));
          $msg_normalized[ 'street_address_2' ] = $split[0];
          if ( count( $split ) > 1 ) {
            $msg_normalized[ 'supplemental_address_2' ] = $split[1];
          }
      } elseif ( isset( $msg['residence_country'] ) ) {
        $msg_normalized['country'] = $msg['residence_country'];
      }
  }
  
  // payment-specific message handling
  if ( $msg[ 'txn_type' ] == 'subscr_payment' ) {
    // default to not update contribution tracking data
    $msg_normalized[ 'contribution_tracking_update' ] = false;
    
    // get the database connection to the tracking table
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push( 'donations' );
    $query = "SELECT * FROM {contribution_tracking} WHERE id = :id";
    $tracking_data = db_query( $query, array( ':id' => $msg[ 'custom' ] ) )->fetchAssoc();
    if ( $tracking_data ) {
	  // if we don't have a contribution id in the tracking data, we need to update
      if ( !$tracking_data[ 'contribution_id' ] || !is_numeric( $tracking_data[ 'contribution_id' ] ) ) {
	      $msg_normalized[ 'contribution_tracking_update' ] = true;
	      $msg_normalized[ 'optout' ] = $tracking_data[ 'optout' ];
	      $msg_normalized[ 'anonymous' ] = $tracking_data[ 'anonymous' ];
	      $msg_normalized[ 'comment' ] = $tracking_data[ 'note' ];
	  }
    } else {
      watchdog( 'recurring', "There is no contribution tracking id associated with this message.", array(), WATCHDOG_NOTICE );
    }

	$msg_normalized[ 'gateway_txn_id' ] = $msg[ 'txn_id' ];
	$msg_normalized[ 'currency' ] = $msg[ 'mc_currency' ];
	$msg_normalized[ 'gross' ] = $msg[ 'mc_gross' ];
	$msg_normalized[ 'fee' ] = $msg[ 'mc_fee' ];  
	$msg_normalized[ 'gross' ] = $msg[ 'mc_gross' ]; 
	$msg_normalized[ 'net' ] = $msg_normalized[ 'gross' ] - $msg_normalized[ 'fee' ];
	$msg_normalized[ 'payment_date' ] = strtotime( $msg[ 'payment_date' ] ); 
  } else {
    
    // break the period out for civicrm
    if( isset( $msg[ 'period3' ] ) ) {
      // map paypal period unit to civicrm period units
      $period_map = array(
        'm' => 'month',
        'd' => 'day',
        'w' => 'week',
        'y' => 'year',
      );
      
      $period = explode( " ", $msg[ 'period3' ] );
      $msg_normalized[ 'frequency_interval' ] = $period[0];
      $msg_normalized[ 'frequency_unit' ] = $period_map[ strtolower( $period[1] ) ];
    }
    
    if ( isset( $msg[ 'recur_times' ] ) ) {
      $msg_normalized[ 'installments' ] = $msg[ 'recur_times' ];
    } else {
      // forever
      $msg_normalized[ 'installments' ] = 0;
    }
    
    if ( isset( $msg[ 'amount3' ] ) ) {
      $msg_normalized[ 'gross' ] = $msg[ 'amount3' ];
    } elseif ( isset( $msg[ 'mc_amount3' ] ) ) {
      $msg_normalized[ 'gross' ] = $msg[ 'mc_amount3' ];
    }

    if ( isset( $msg['mc_currency'] ) ) {
	  $msg_normalized[ 'currency' ] = $msg[ 'mc_currency' ];
    }

    if ( isset( $msg[ 'subscr_date' ] ) ) {
      if ( $msg[ 'txn_type' ] == 'subscr_signup' ) {
        $msg_normalized[ 'create_date' ] = strtotime( $msg[ 'subscr_date' ] );
        $msg_normalized[ 'start_date' ] = strtotime( $msg[ 'subscr_date' ] );
      } elseif( $msg[ 'txn_type' ] == 'subscr_cancel' ) {
        $msg_normalized[ 'cancel_date' ] = strtotime( $msg[ 'subscr_date' ] );
      }
    }
    
    if ( $msg[ 'txn_type' ] == 'subscr_modify' ) {
      $msg_normalized[ 'modified_date' ] = $msg[ 'subscr_effective' ];
    }

    if ( $msg[ 'txn_type' ] == 'subscr_failed' ) {
      $recur_record = recurring_get_recur_record( $msg[ 'subscr_id' ] );
      $msg_normalized[ 'failure_count' ] = $recur_record->failure_count + 1;
      if ( isset( $msg[ 'retry_at' ] )) {
        $msg_normalized[ 'failure_retry_date' ] = strtotime( $msg[ 'retry_at' ] );
      } elseif( isset( $msg[ 'failure_retry_date' ] )) {
        $msg_normalized[ 'failure_retry_date' ] = strtotime( $msg[ 'failure_retry_date' ] );
      }
    }
  }

  $msg_normalized[ 'gateway' ] = ( !empty( $msg['gateway'] ) ? $msg['gateway'] : 'paypal' );

  $msg_normalized[ 'date' ] = $timestamp;

  // FIXME: so dirty.
  foreach ( $msg as $key => $value ) {
    if ( strpos( $key, "source_" ) === 0 ) {
        $msg_normalized[$key] = $value;
    }
  }
  
  return $msg_normalized;
}

/**
 * Get the contribution tracking id for a given a recurring trxn
 * 
 * If the 'custom' field is not set (from paypal, which would normally carry the tracking id),
 * we look and see if any related recurring transactions have had a contrib tracking id set.
 * 
 * If they do, we'll use that contrib tracking id, otherwise we'll generate a new row in the
 * contrib tracking table.
 * @param array $msg
 * @return int contribution tracking id
 */
function recurring_get_contribution_tracking_id( $msg ) {
  if ( array_key_exists( 'custom', $msg ) && strlen( $msg[ 'custom' ] )) {
  	watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Using $msg["custom"], %cti', array( '%cti' => $msg['custom']), WATCHDOG_DEBUG );
    return $msg[ 'custom' ];
  } elseif ( $msg[ 'txn_type' ] == 'subscr_payment' ) {
    $contribution_tracking_id = null;
    $contrib_ids = array();

    // determine if we already have a contrib tracking id for related contribs, working backwards from recur record
    $recurring_record = recurring_get_recur_record( $msg['subscr_id'] );

    if ( $recurring_record ) { // we potentially have related contributions
      $recur_id = $recurring_record->id;
      // find related contribution ids

      $query = "SELECT id FROM civicrm_contribution WHERE contribution_recur_id = %1";
      $dao = CRM_Core_DAO::executeQuery( $query, array(
        '1' => array( $recur_id, 'Integer' ),
      ) );
      while ( $dao->fetch() ) {
        array_push( $contrib_ids, $dao->id );
      }

      if ( count( $contrib_ids )) { // if we've got any related contributions
        // see if a record already exists
        $dbs = wmf_civicrm_get_dbs();
        $dbs->push( 'donations' );
        $id_list = implode( ",", $contrib_ids );
        $query = "SELECT id FROM {contribution_tracking} WHERE contribution_id IN ( {$id_list} )";
        // we can use this related contribution tracking id
        $contribution_tracking_id = db_query( $query )->fetchField();
        watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Selected contrib tracking id from past contributions, %cti', array( '%cti' => $contribution_tracking_id ), WATCHDOG_DEBUG );
        return $contribution_tracking_id;
      }
    }
    
    // if we still don't have a contribution tracking id, we're gonna have to make one
    if ( !$contribution_tracking_id ) {
      // if we already have previous contributions, we should create a contrib id connected with the first contrib
      sort( $contrib_ids, SORT_NUMERIC );
      $contrib_id = array_shift( $contrib_ids ); // this should return null if $contrib_ids is empty
      $date = wmf_common_date_unix_to_sql( strtotime( $msg[ 'payment_date' ] ));
      $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking( '..rpp', 'civicrm', $date, $contrib_id );
      watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Inserted contrib tracking id, %cti', array( '%cti' => $contribution_tracking_id ), WATCHDOG_DEBUG );
      return $contribution_tracking_id;
    }
  } else {
  	watchdog( 'recurring', 'recurring_get_contribution_tracking_id: No contribution_tracking_id returned.', array(), WATCHDOG_DEBUG );
    return null;
  }
}
