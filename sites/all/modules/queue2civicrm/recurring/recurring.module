<?php
/**
 * An extension of the queue2civicrm module to handle processing recurring payment
 * related messages from a queue.
 *
 * You may notice the use of the words 'recurring' and 'subscription' - they are
 * essentially interchangable.  They have slightly different meanings in the
 * PayPal land of subscription/recurring payments, but essentially they function
 * the same.  'Recurring' more clearly captures the idea behind how the WMF uses
 * PayPal's subscription payments and is how the fundraising team colloquially refers
 * to the 'subscription' service, so 'recurring' is used here in attempt to promote
 * greater clarity.  'Subscription' or its derivations are used in places where PayPal
 * uses the word in its field/variable names (eg subscr_payment).
 */
use queue2civicrm\recurring\RecurringQueueConsumer;

/**
 * Implementation of hook_menu
 */
function recurring_menu() {
  $items['admin/config/queue2civicrm/recurring'] = array(
	'title' => 'Recurring payments',
       'description' => t( 'Configure the recurring payments queue' ),
	'access arguments' => array( 'administer queue2civicrm' ),
	'page callback' => 'drupal_get_form',
	'page arguments' => array( 'recurring_settings' ),
  );
  return $items;
}

/**
 * Settings form for recurring payments configuration
 */
function recurring_settings() {
  $form = array();

  $form['recurring_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable job'),
    '#description' => t('If checked, no message processing will be performed.'),
    '#default_value' => variable_get('recurring_disable', false),
  );

  $form['recurring_description'] = array(
    '#type' => 'markup',
    '#markup' => t('<p>The recurring queue contains notifications pertaining to subscription donations, such as monthly payments, cancellation,and expiration.</p>'),
  );

  $form['recurring_subscription'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscription path'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_subscription', '/queue/donations_recurring'),
    '#description' => t( 'Queue to watch for recurring notifications' ),
  );

  $form['recurring_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of items processed by the recurring job'),
    '#default_value' => variable_get('recurring_batch', 0),
    '#options' => array(
      0 => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      120 => 120,
      150 => 150,
    ),
  );

  $form['recurring_batch_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of a recurring job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_batch_time', 90),
  );

  return system_settings_form( $form );
}

function recurring_batch_process() {
  civicrm_initialize();

  if (variable_get( "recurring_disable", false )){
    watchdog('recurring', 'Recurring is disabled. No contributions processed.');
    return 0;
  }

  $consumer = new RecurringQueueConsumer(
    'recurring-new', // TODO: kill all the -new suffixes
    variable_get( 'recurring_batch_time', 0 ),
    variable_get( 'recurring_batch', 0 )
  );

  $recurring_processed = $consumer->dequeueMessages();

  if ($recurring_processed > 0) {
    watchdog('recurring', 'Processed ' . $recurring_processed . ' subscription messages.');
  }
  else {
    watchdog('recurring', 'No contributions processed.');
  }

  return $recurring_processed;
}

/**
 * Import queued message contents to CiviCRM
 *
 * @param $msg
 */
function recurring_import( $msg ) {

}

/**
 * Get the contribution tracking id for a given a recurring trxn
 *
 * If the 'custom' field is not set (from paypal, which would normally carry the tracking id),
 * we look and see if any related recurring transactions have had a contrib tracking id set.
 *
 * If they do, we'll use that contrib tracking id, otherwise we'll generate a new row in the
 * contrib tracking table.
 * @param array $msg
 * @return int contribution tracking id
 */
function recurring_get_contribution_tracking_id( $msg ) {
  if ( array_key_exists( 'custom', $msg ) && strlen( $msg[ 'custom' ] )) {
  	watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Using $msg["custom"], %cti', array( '%cti' => $msg['custom']), WATCHDOG_DEBUG );
    return $msg[ 'custom' ];
  } elseif ( $msg[ 'txn_type' ] == 'subscr_payment' ) {
    $contribution_tracking_id = null;
    $contrib_ids = array();

    // determine if we already have a contrib tracking id for related contribs, working backwards from recur record
    $recurring_record = wmf_civicrm_get_recur_record( $msg['subscr_id'] );

    if ( $recurring_record ) { // we potentially have related contributions
      $recur_id = $recurring_record->id;
      // find related contribution ids

      $query = "SELECT id FROM civicrm_contribution WHERE contribution_recur_id = %1";
      $dao = CRM_Core_DAO::executeQuery( $query, array(
        '1' => array( $recur_id, 'Integer' ),
      ) );
      while ( $dao->fetch() ) {
        array_push( $contrib_ids, $dao->id );
      }

      if ( count( $contrib_ids )) { // if we've got any related contributions
        // see if a record already exists
        $dbs = wmf_civicrm_get_dbs();
        $dbs->push( 'donations' );
        $id_list = implode( ",", $contrib_ids );
        $query = "SELECT id FROM {contribution_tracking} WHERE contribution_id IN ( {$id_list} )";
        // we can use this related contribution tracking id
        $contribution_tracking_id = db_query( $query )->fetchField();
        watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Selected contrib tracking id from past contributions, %cti', array( '%cti' => $contribution_tracking_id ), WATCHDOG_DEBUG );
        return $contribution_tracking_id;
      }
    }

    // if we still don't have a contribution tracking id, we're gonna have to make one
    if ( !$contribution_tracking_id ) {
      // if we already have previous contributions, we should create a contrib id connected with the first contrib
      sort( $contrib_ids, SORT_NUMERIC );
      $contrib_id = array_shift( $contrib_ids ); // this should return null if $contrib_ids is empty
      $date = wmf_common_date_unix_to_sql( strtotime( $msg[ 'payment_date' ] ));
      $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking( '..rpp', 'civicrm', null, $date, $contrib_id );
      watchdog( 'recurring', 'recurring_get_contribution_tracking_id: Inserted contrib tracking id, %cti', array( '%cti' => $contribution_tracking_id ), WATCHDOG_DEBUG );
      return $contribution_tracking_id;
    }
  } else {
  	watchdog( 'recurring', 'recurring_get_contribution_tracking_id: No contribution_tracking_id returned.', array(), WATCHDOG_DEBUG );
    return null;
  }
}
