<?php

use queue2civicrm\banner_history\BannerHistoryQueueConsumer;
use SmashPig\Core\Configuration;
use SmashPig\Core\Context;

/**
 * Implements hook_menu
 */
function banner_history_menu() {
	$items[ 'admin/config/queue2civicrm/banner_history' ] = array(
		'title' => 'Banner history',
		'description' => t( 'Configure banner history queue' ),
		'access arguments' => array( 'administer queue2civicrm' ),
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'banner_history_settings_page_args' ),
	);
	return $items;
}

/**
 * Constructs the settings page for this module.
 * @return array Of form components.
 */
function banner_history_settings_page_args() {
	$form = array();

	$form['description'] = array(
		'#type'	=> 'markup',
		'#description' =>
			t( '<p>Banner history log ID associations are consumed from a' .
			' queue and placed in a table.</p>' ),
	);

	$form['banner_history_queue'] = array(
		'#type'	=> 'textfield',
		'#title' => t( 'Subscription path' ),
		'#required' => true,
		'#default_value' => variable_get(
			'banner_history_queue', 'banner-history' ),
		'#description'	 => t( 'Queue for banner history log ID associations' ),
	);

	$form['banner_history_batch'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Batch size' ),
		'#description'	 => t(
			'Maximum number of items processed by a banner history job. Use ' .
			'0 for no limit.'
		),
		'#default_value' => variable_get( 'banner_history_batch', 0 ),
	);

	$form['banner_history_batch_time'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Job time limit (in seconds)' ),
		'#description' => t(
			'Maximum elapsed duration of an banner history job, after which ' .
			'we will abort from the loop. This can be used to set a reliable ' .
			'duty cycle for the job. Use 0 for no limit. Either a time limit ' .
			'or batch size limit is required.'
		),
		'#required' => true,
		'#default_value' => variable_get( 'banner_history_batch_time', 0 ),
	);

	return system_settings_form( $form );
}

/**
 * Entry point from banner-history-queue-consume drush command
 */
function banner_history_queue_consume() {
	watchdog( 'banner_history', 'Executing: banner_history_queue_consume' );

	civicrm_initialize();
    $config = new Configuration();
    Context::initWithLogger( $config, 'banner_history' );

	$queue = variable_get( 'banner_history_queue', 'banner-history' );

	$qc = new BannerHistoryQueueConsumer(
		$queue,
		variable_get( 'banner_history_batch_time', 0 ),
		variable_get( 'banner_history_batch', 0 )
	);
	$processed = $qc->dequeueMessages();

	if ( $processed > 0 ) {
		watchdog( 'banner_history',
			"Processed $processed banner_history log ID association(s)." );

	} else {
		watchdog( 'banner_history',
			'No banner history log ID associations processed.' );
	}
}
