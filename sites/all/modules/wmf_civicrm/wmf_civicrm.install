<?php

require_once( __DIR__ . "/bootstrap.inc" );

function wmf_civicrm_install()
{
    wmf_civicrm_update_6000();
    wmf_civicrm_update_6001();
    wmf_civicrm_update_6002();
    wmf_civicrm_update_6003();
    wmf_civicrm_update_6004();
    wmf_civicrm_update_6005();
    wmf_civicrm_update_6006();
    wmf_civicrm_update_6007();
    wmf_civicrm_update_6008();
    wmf_civicrm_update_6009();
    wmf_civicrm_update_6010();
    wmf_civicrm_update_6011();
    wmf_civicrm_update_6012();
    wmf_civicrm_update_6013();
    wmf_civicrm_update_7014();
}

/**
 * Add contribution types and payment instruments
 */
function wmf_civicrm_update_6000()
{
    $contribution_types = array(
        'Cash',
    );
    $payment_instruments = array(
        'Amazon',
        'Bank Transfer',
        'Boleto',
        'Bpay',
        'Cash',
        'Cashu',
        'Check',
        'Credit Card',
        'Credit Card: American Express',
        'Credit Card: Carte Bleue',
        'Credit Card: Discover',
        'Credit Card: JCB',
        'Credit Card: Laser',
        'Credit Card: Maestro',
        'Credit Card: MasterCard',
        'Credit Card: Solo',
        'Credit Card: Visa',
        'Direct Debit',
        'Enets',
        'EPS',
        'iDeal',
        'Moneybookers',
        'Nordea',
        'Paypal',
        'Sofort',
        'Webmoney',
    );

    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_contribution_types($contribution_types);
    wmf_civicrm_create_option_values( 'payment_instrument', $payment_instruments );

    return array();
}

/**
 * Add settlement date field
 */
function wmf_civicrm_update_6001()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $result = $api->values();
    if (empty($result))
    {
        $success = $api->CustomGroup->create(array(
            'extends' => 'Contribution',
            'name' => 'contribution_extra',
            'table_name' => 'wmf_contribution_extra',
            'title' => ts('Contribution Extra'),
            'is_active' => 1,
        ));
        if (!$success) {
            $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
        }
        $result = $api->values();
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_date',
        'column_name' => 'settlement_date',
        'label' => ts('Settlement Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

/**
 * Add non-authoritatize USD conversion estimate
 */
function wmf_civicrm_update_6002()
{
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'total_usd',
        'column_name' => 'total_usd',
        'label' => ts('Total in USD (approx)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

function wmf_civicrm_update_6003()
{
    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_contribution_types(array(
        'Merkle',
    ));
}

/**
 * Add gateway_account name field
 */
function wmf_civicrm_update_6004()
{
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_account',
        'column_name' => 'gateway_account',
        'label' => ts('Gateway Account Name'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

/**
 * More complete gateway and settlement recording. Adding a field to mark auditing-only transactions, and a hack to link contributions.
 */
function wmf_civicrm_update_6005()
{
    $ret = array();

    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway',
        'column_name' => 'gateway',
        'label' => ts('Gateway'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_txn_id',
        'column_name' => 'gateway_txn_id',
        'label' => ts('Gateway Transaction ID'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status_raw',
        'column_name' => 'gateway_status_raw',
        'label' => ts('Gateway Status (raw)'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status',
        'column_name' => 'gateway_status',
        'label' => ts('Gateway Status (normalized)'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_date',
        'column_name' => 'gateway_date',
        'label' => ts('Gateway Last Update Timestamp'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'original_amount',
        'column_name' => 'original_amount',
        'label' => ts('Original Amount Received (unconverted)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'original_currency',
        'column_name' => 'original_currency',
        'label' => ts('Original Currency Received'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_usd',
        'column_name' => 'settlement_usd',
        'label' => ts('Settlement Total (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_currency',
        'column_name' => 'settlement_currency',
        'label' => ts('Settlement Currency'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_date',
        'column_name' => 'deposit_date',
        'label' => ts('Deposit Received Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_usd',
        'column_name' => 'deposit_usd',
        'label' => ts('Deposit Total (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_currency',
        'column_name' => 'deposit_currency',
        'label' => ts('Deposit Currency'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'parent_contribution_id',
        'column_name' => 'parent_contribution_id',
        'label' => ts('Parent Contribution ID'),
        'data_type' => 'Int',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'finance_only',
        'column_name' => 'finance_only',
        'label' => ts('Finance Auditing Only'),
        'data_type' => 'Boolean',
        'html_type' => 'Radio',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return $ret;
}

/**
 * Additional, gateway-related contribution statuses
 */
function wmf_civicrm_update_6006()
{
    $ret = array();

    wmf_civicrm_create_option_values('contribution_status', array(
        'Settled',
        'Paid',
        'Refunded',
    ));

    $api = wmf_civicrm_bootstrap_civi();

    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $custom_group = $api->values[0];
    $success = $api->CustomField->get(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status',
    ));
    if ($success && $api->values) {
        $field = $api->values[0];
        $success = $api->CustomField->delete(array(
            'id' => $field->id,
        ));
        if (!$success) {
            $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
        }
    }

    return $ret;
}

/**
 * New contribution types to distinguish refunds from chargebacks. Create old "Review" tag.
 */
function wmf_civicrm_update_6007()
{
    $api = wmf_civicrm_bootstrap_civi();

    wmf_civicrm_create_contribution_types(array(
        'Refund',
        'Chargeback',
    ));

    $success = $api->Tag->create(array(
        'name' => 'Review',
        'description' => 'Review',
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }
}

/**
 * Add new check processor!
 */
function wmf_civicrm_update_6008()
{
	wmf_civicrm_bootstrap_civi();
	wmf_civicrm_create_contribution_types(array(
		'Arizona Lockbox',
	));
}

/**
 * Extend some CiviCRM column maximum lengths
 */
function wmf_civicrm_update_6009()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query("ALTER TABLE civicrm_email
            MODIFY email varchar(254) DEFAULT NULL");

    db_query("ALTER TABLE civicrm_address
            MODIFY postal_code varchar(64) DEFAULT NULL");
}

/**
 * Improve civicrm_entity_tag indexing--DO NOT RUN ON PRODUCTION
 */
function wmf_civicrm_update_6010()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    try {
        db_query("ALTER TABLE civicrm_entity_tag
            ADD KEY entity_id (entity_id)");
    } catch (PDOException $ex) {
        drupal_set_message("Key already exists?: " + $ex->getMessage());
    }
}

/**
 * Improve civicrm_entity_tag indexing
 */
function wmf_civicrm_update_6011()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    try {
        db_query("ALTER TABLE civicrm_entity_tag
            ADD KEY entity_table (entity_table)");
    } catch (PDOException $ex) {
        drupal_set_message("Key already exists?: " + $ex->getMessage());
    }
}

/**
 * Add source metadata fields
 */
function wmf_civicrm_update_6012()
{
    $api = wmf_civicrm_bootstrap_civi();

    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_name',
        'column_name' => 'source_name',
        'label' => ts('Source Name'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'Source Type',
        'column_name' => 'source_type',
        'label' => ts('Source Type'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_host',
        'column_name' => 'source_host',
        'label' => ts('Source Host'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_run_id',
        'column_name' => 'source_run_id',
        'label' => ts('Source Run ID'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_version',
        'column_name' => 'source_version',
        'label' => ts('Source Version'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_enqueued_time',
        'column_name' => 'source_enqueued_time',
        'label' => ts('Enqueued At Timestamp'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    return implode("\n", $ret);
}

/**
 * Add Postmark Date field
 */
function wmf_civicrm_update_6013()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'Postmark_Date',
        'column_name' => 'postmark_date',
        'label' => ts('Postmark Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 0,
        'is_view' => 0,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    return $ret;
}

/**
 * Add no_thank_you field
 */
function wmf_civicrm_update_7014()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'no_thank_you',
        'column_name' => 'no_thank_you',
        'label' => ts('No Thank-you Reason'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 0,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query( "
UPDATE wmf_contribution_extra, civicrm_contribution
SET
    no_thank_you = 'legacy'
WHERE
    wmf_contribution_extra.entity_id = civicrm_contribution.id
    AND thankyou_date = '1970-01-01 00:00:00'
" );

    return $ret;
}
