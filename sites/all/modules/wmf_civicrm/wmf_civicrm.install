<?php

require_once( __DIR__ . "/bootstrap.inc" );

function wmf_civicrm_install()
{
    wmf_civicrm_update_7000();
    wmf_civicrm_update_7001();
    wmf_civicrm_update_7002();
    wmf_civicrm_update_7003();
    wmf_civicrm_update_7004();
    wmf_civicrm_update_7005();
    wmf_civicrm_update_7006();
    wmf_civicrm_update_7007();
    wmf_civicrm_update_7008();
    wmf_civicrm_update_7009();
    wmf_civicrm_update_7010();
    wmf_civicrm_update_7011();
    wmf_civicrm_update_7012();
    wmf_civicrm_update_7013();
    wmf_civicrm_update_7014();
    wmf_civicrm_update_7015();
    wmf_civicrm_update_7016();
    wmf_civicrm_update_7017();
    wmf_civicrm_update_7018();
    wmf_civicrm_update_7019();
    wmf_civicrm_update_7020();
    wmf_civicrm_update_7021();
    wmf_civicrm_update_7022();
    wmf_civicrm_update_7023();
    wmf_civicrm_update_7024();
    wmf_civicrm_update_7025();
    wmf_civicrm_update_7026();
    wmf_civicrm_update_7027();
    wmf_civicrm_update_7028();
    wmf_civicrm_update_7029();
    wmf_civicrm_update_7030();
    wmf_civicrm_update_7031();
    wmf_civicrm_update_7032();
    wmf_civicrm_update_7033();
    wmf_civicrm_update_7034();
}

/**
 * Helper creates a new option group and links an
 * existing custom field in the Gift_Data custom group.
 *
 * TODO this is not a handy generalization, just a way
 * to have a little less copypasta in this file.  I also
 * suspect there's a better place for it to live.
 */
function _link_gift_data_field_to_new_group ( $field_name, $group_name, $values )
{
    $api = wmf_civicrm_bootstrap_civi();

    // Get the custom group.
    $success = $api->CustomGroup->get( array(
        'name' => 'Gift_Data',
    ) );
    if ( !$success || !count( $api->values ) ) {
        throw new Exception( $api->errorMsg() );
    }
    $custom_group_id = $api->values[0]->id;

    // Get the field.
    $success = $api->CustomField->get( array(
        'custom_group_id' => $custom_group_id,
        'name' => $field_name,
    ) );
    if ( !$success || !count( $api->values ) ) {
        throw new Exception( $api->errorMsg() );
    }
    $custom_field_id = $api->values[0]->id;

    // Make the options.
    $success = $api->OptionGroup->get( array(
        'name' => $group_name,
    ) );
    if ( !$success || !count( $api->values ) ) {
        $success = $api->OptionGroup->create( array(
            'is_active' => 1,
            'is_reserved' => 1,
            'name' => $group_name,
            'title' => $field_name,
        ) );
        if ( !$success ) {
            throw new Exception( $api->errorMsg() );
        }
    }
    $option_group_id = $api->values[0]->id;

    foreach ( $values as $value ) {
        $success = $api->OptionValue->get( array(
            'group_id' => $option_group_id,
            'value' => $value,
        ) );
        if ( !$success || !count( $api->values ) ) {
            $success = $api->OptionValue->create( array(
                'option_group_id' => $option_group_id,
                'label' => ts( $value ),
                'value' => $value,
                'weight' => 'next',
            ) );
            if ( !$success ) {
                throw new Exception( $api->errorMsg() );
            }
        }
    }

    // Link the options to this field.
    $success = $api->CustomField->create( array(
        'id' => $custom_field_id,
        'option_group_id' => $option_group_id,
        // TODO why do i have to reset these fields here?
        // they are set when the row is created but come
        // out as 0 after this update.
        'is_active' => 1,
        'is_required' => 1,
        'is_searchable' => 1,
    ) );
    if ( !$success ) {
        throw new Exception( $api->errorMsg() );
    }
}

/**
 * Add contribution types and payment instruments
 */
function wmf_civicrm_update_7000()
{
    $contribution_types = array(
        'Cash',
    );
    $payment_instruments = array(
        'Amazon',
        'Bank Transfer',
        'Boleto',
        'Bpay',
        'Cash',
        'Cashu',
        'Check',
        'Credit Card',
        'Credit Card: American Express',
        'Credit Card: Carte Bleue',
        'Credit Card: Discover',
        'Credit Card: JCB',
        'Credit Card: Laser',
        'Credit Card: Maestro',
        'Credit Card: MasterCard',
        'Credit Card: Solo',
        'Credit Card: Visa',
        'Direct Debit',
        'Enets',
        'EPS',
        'iDeal',
        'Moneybookers',
        'Nordea',
        'Paypal',
        'Sofort',
        'Webmoney',
    );

    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_financial_types($contribution_types);
    wmf_civicrm_create_option_values( 'payment_instrument', $payment_instruments );

    return array();
}

/**
 * Add settlement date field
 */
function wmf_civicrm_update_7001()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $result = $api->values();
    if (empty($result))
    {
        $success = $api->CustomGroup->create(array(
            'extends' => 'Contribution',
            'name' => 'contribution_extra',
            'table_name' => 'wmf_contribution_extra',
            'title' => ts('Contribution Extra'),
            'is_active' => 1,
        ));
        if (!$success) {
            $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
        }
        $result = $api->values();
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_date',
        'column_name' => 'settlement_date',
        'label' => ts('Settlement Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

/**
 * Add non-authoritatize USD conversion estimate
 */
function wmf_civicrm_update_7002()
{
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'total_usd',
        'column_name' => 'total_usd',
        'label' => ts('Total in USD (approx)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

function wmf_civicrm_update_7003()
{
    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_financial_types(array(
        'Merkle',
    ));
}

/**
 * Add gateway_account name field
 */
function wmf_civicrm_update_7004()
{
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_account',
        'column_name' => 'gateway_account',
        'label' => ts('Gateway Account Name'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return array();
}

/**
 * More complete gateway and settlement recording. Adding a field to mark auditing-only transactions, and a hack to link contributions.
 */
function wmf_civicrm_update_7005()
{
    $ret = array();

    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway',
        'column_name' => 'gateway',
        'label' => ts('Gateway'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_txn_id',
        'column_name' => 'gateway_txn_id',
        'label' => ts('Gateway Transaction ID'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status_raw',
        'column_name' => 'gateway_status_raw',
        'label' => ts('Gateway Status (raw)'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status',
        'column_name' => 'gateway_status',
        'label' => ts('Gateway Status (normalized)'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_date',
        'column_name' => 'gateway_date',
        'label' => ts('Gateway Last Update Timestamp'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'original_amount',
        'column_name' => 'original_amount',
        'label' => ts('Original Amount Received (unconverted)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'original_currency',
        'column_name' => 'original_currency',
        'label' => ts('Original Currency Received'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_usd',
        'column_name' => 'settlement_usd',
        'label' => ts('Settlement Total (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'settlement_currency',
        'column_name' => 'settlement_currency',
        'label' => ts('Settlement Currency'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_date',
        'column_name' => 'deposit_date',
        'label' => ts('Deposit Received Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_usd',
        'column_name' => 'deposit_usd',
        'label' => ts('Deposit Total (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'deposit_currency',
        'column_name' => 'deposit_currency',
        'label' => ts('Deposit Currency'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'parent_contribution_id',
        'column_name' => 'parent_contribution_id',
        'label' => ts('Parent Contribution ID'),
        'data_type' => 'Int',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'finance_only',
        'column_name' => 'finance_only',
        'label' => ts('Finance Auditing Only'),
        'data_type' => 'Boolean',
        'html_type' => 'Radio',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    return $ret;
}

/**
 * Additional, gateway-related contribution statuses
 */
function wmf_civicrm_update_7006()
{
    $ret = array();

    wmf_civicrm_create_option_values('contribution_status', array(
        'Settled',
        'Paid',
        'Refunded',
    ));

    $api = wmf_civicrm_bootstrap_civi();

    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $custom_group = $api->values[0];
    $success = $api->CustomField->get(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'gateway_status',
    ));
    if ($success && $api->values) {
        $field = $api->values[0];
        $success = $api->CustomField->delete(array(
            'id' => $field->id,
        ));
        if (!$success) {
            $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
        }
    }

    return $ret;
}

/**
 * New contribution types to distinguish refunds from chargebacks. Create old "Review" tag.
 */
function wmf_civicrm_update_7007()
{
    $api = wmf_civicrm_bootstrap_civi();

    wmf_civicrm_create_financial_types(array(
        'Refund',
        'Chargeback',
    ));

    $success = $api->Tag->create(array(
        'name' => 'Review',
        'description' => 'Review',
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }
}

/**
 * Add new check processor!
 */
function wmf_civicrm_update_7008()
{
	wmf_civicrm_bootstrap_civi();
	wmf_civicrm_create_financial_types(array(
		'Arizona Lockbox',
	));
}

/**
 * Extend some CiviCRM column maximum lengths
 */
function wmf_civicrm_update_7009()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query("ALTER TABLE civicrm_email
            MODIFY email varchar(254) DEFAULT NULL");

    db_query("ALTER TABLE civicrm_address
            MODIFY postal_code varchar(64) DEFAULT NULL");
}

/**
 * Improve civicrm_entity_tag indexing--DO NOT RUN ON PRODUCTION
 */
function wmf_civicrm_update_7010()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    try {
        db_query("ALTER TABLE civicrm_entity_tag
            ADD KEY entity_id (entity_id)");
    } catch (PDOException $ex) {
        drupal_set_message("Key already exists?: " + $ex->getMessage());
    }
}

/**
 * Improve civicrm_entity_tag indexing
 */
function wmf_civicrm_update_7011()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    try {
        db_query("ALTER TABLE civicrm_entity_tag
            ADD KEY entity_table (entity_table)");
    } catch (PDOException $ex) {
        drupal_set_message("Key already exists?: " + $ex->getMessage());
    }
}

/**
 * Add source metadata fields
 */
function wmf_civicrm_update_7012()
{
    $ret = array();
    $api = wmf_civicrm_bootstrap_civi();

    $success = $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    if (!$success) {
        throw new Exception($api->errorMsg());
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_name',
        'column_name' => 'source_name',
        'label' => ts('Source Name'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_type',
        'column_name' => 'source_type',
        'label' => ts('Source Type'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_host',
        'column_name' => 'source_host',
        'label' => ts('Source Host'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_run_id',
        'column_name' => 'source_run_id',
        'label' => ts('Source Run ID'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_version',
        'column_name' => 'source_version',
        'label' => ts('Source Version'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'source_enqueued_time',
        'column_name' => 'source_enqueued_time',
        'label' => ts('Enqueued At Timestamp'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    return implode("\n", $ret);
}

/**
 * Add Postmark Date field
 */
function wmf_civicrm_update_7013()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'Postmark_Date',
        'column_name' => 'postmark_date',
        'label' => ts('Postmark Date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 0,
        'is_view' => 0,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    return $ret;
}

/**
 * Add no_thank_you field
 */
function wmf_civicrm_update_7014()
{
    $ret = array();
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'contribution_extra',
    ));
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'no_thank_you',
        'column_name' => 'no_thank_you',
        'label' => ts('No Thank-you Reason'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 0,
    ));
    if (!$success) {
        $ret[] = $api->errorMsg();
    }

    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query( "
UPDATE wmf_contribution_extra, civicrm_contribution
SET
    no_thank_you = 'legacy'
WHERE
    wmf_contribution_extra.entity_id = civicrm_contribution.id
    AND thankyou_date = '1970-01-01 00:00:00'
" );

    return $ret;
}

/**
 * Extend contact.preferred_language column maximum length
 */
function wmf_civicrm_update_7015()
{
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query("ALTER TABLE civicrm_contact
            MODIFY preferred_language varchar(32) DEFAULT NULL");
}

/**
 * Create recurring restarted contribution tag
 */
function wmf_civicrm_update_7016()
{
    $ret = array();
    $api = wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_option_values_detailed('tag_used_for', array(
        'Contributions' => array('value' => 'civicrm_contribution'),
    ));

    $success = $api->Tag->get(array(
        'name' => 'RecurringRestarted',
        'used_for' => 'civicrm_contribution',
    ));
    if (!count($api->values)) {
        $success = $api->Tag->create(array(
            'name' => 'RecurringRestarted',
            'description' => 'For the first contribution of a restarted recurring subscription.',
            'is_selectable' => false,
            'is_reserved' => true,
            'used_for' => 'civicrm_contribution'
        ));
        if (!$success) {
            throw new Exception( $api->errorMsg() );
        }
    }
}

/**
 * Create truncated address tag
 */
function wmf_civicrm_update_7017()
{
    $ret = array();
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->Tag->get(array(
        'name' => 'AddressTruncated',
        'used_for' => 'civicrm_contact',
    ));
    if (!count($api->values)) {
        $success = $api->Tag->create(array(
                'name' => 'AddressTruncated',
                'description' => 'Tag applied to a contact when the address was truncated on import.',
                'is_selectable' => true,
                'is_reserved' => true,
                'used_for' => 'civicrm_contact'
            ));
        if (!$success) {
            throw new Exception( $api->errorMsg() );
        }
    }
}

/**
 * Add contribution types and payment instruments
 */
function wmf_civicrm_update_7018()
{
    $payment_instruments = array(
        'Credit Card: Visa Beneficial',
        'Credit Card: Visa Electron',
        'Credit Card: Visa Debit',
        'Credit Card: MasterCard Debit',
        'Credit Card: Diners',
    );

    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_option_values( 'payment_instrument', $payment_instruments );

    return array();
}

/**
 * Add JP Morgan payment instrument
 */
function wmf_civicrm_update_7019()
{
    $payment_instruments = array(
        'JP Morgan EUR',
    );

    wmf_civicrm_create_option_values( 'payment_instrument', $payment_instruments );
}

/**
 * Add Bitcoin payment instrument
 */
function wmf_civicrm_update_7020()
{
    $payment_instruments = array(
        'Bitcoin',
    );
    wmf_civicrm_create_option_values( 'payment_instrument', $payment_instruments );
}

/**
 * Create UnrecordedCharge contribution tag
 */
function wmf_civicrm_update_7021()
{
    $ret = array();
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->Tag->get(array(
        'name' => 'UnrecordedCharge',
        'used_for' => 'civicrm_contribution',
    ));
    if (!count($api->values)) {
        $success = $api->Tag->create(array(
            'name' => 'UnrecordedCharge',
            'description' => 'For donations which have already been charged, but were not recorded in Civi at the time.',
            'is_selectable' => false,
            'is_reserved' => true,
            'used_for' => 'civicrm_contribution'
        ));
        if (!$success) {
            throw new Exception( $api->errorMsg() );
        }
    }
}

/**
 * DO NOT RUN ON PRODUCTION Add gift data group.
 */
function wmf_civicrm_update_7022() {
    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'Gift_Data',
    ));
    if ( !$success || !count( $api->values ) ) {
        $success = $api->CustomGroup->create(array(
            'extends' => 'Contribution',
            'name' => 'Gift_Data',
            'title' => ts('Gift Data'),
            'is_active' => 1,
        ));
        if (!$success) {
            throw new Exception( $api->errorMsg() );
        }
    }
    $custom_group_id = $api->values[0]->id;

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group_id,
        'name' => 'Fund',
        'column_name' => 'fund',
        'label' => ts('Restrictions'),
        'data_type' => 'String',
        'html_type' => 'Select',
        'default_value' => 'Unrestricted - General',
        'is_active' => 1,
        'is_required' => 1,
        'is_searchable' => 1,
    ));
    if (!$success) {
        throw new Exception( $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group_id,
        'name' => 'Campaign',
        'column_name' => 'campaign',
        'label' => ts('Gift Source'),
        'data_type' => 'String',
        'html_type' => 'Select',
        'default_value' => 'Community Gift',
        'is_active' => 1,
        'is_required' => 1,
        'is_searchable' => 1,
    ));
    if (!$success) {
        throw new Exception( $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group_id,
        'name' => 'Appeal',
        'column_name' => 'appeal',
        'label' => ts('Direct Mail Appeal'),
        'data_type' => 'String',
        'html_type' => 'Select',
        'default_value' => 'spontaneousdonation',
        'is_active' => 1,
        'is_required' => 1,
        'is_searchable' => 1,
    ));
    if (!$success) {
        throw new Exception( $api->errorMsg() );
    }

    // TODO: define option groups in another migration if necessary
}

/**
 * Add custom donor data group.
 */
function wmf_civicrm_update_7023() {
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'WMF_Donor',
    ));
    $result = $api->values();
    if ($result) {
        return;
    }

    $success = $api->CustomGroup->create(array(
        'extends' => 'Contact',
        'name' => 'wmf_donor',
		'table_name' => 'wmf_donor',
        'title' => ts('WMF Donor'),
        'is_active' => 1,
    ));
    if (!$success) {
        throw new Exception('Could not create custom group');
    }
    $values = $api->values();
    $custom_group = array_pop($values);

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'do_not_solicit',
        'column_name' => 'do_not_solicit',
        'label' => ts('Do not solicit'),
        'data_type' => 'Boolean',
        'html_type' => 'Radio',
        'is_active' => 1,
        'is_required' => 1,
        'is_searchable' => 1,
    ));
    if (!$success) {
        throw new Exception('Failed to create custom field.');
    }
}

/**
 * Add yearly contribution rollup and last donation data
 */
function wmf_civicrm_update_7024() {
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'wmf_donor',
    ));
    $result = $api->values();
    if (!$result) {
        throw new Exception('Could not find custom group wmf_donor.  Please run update 7023 first.');
    }

    $custom_group = array_pop($result);

	for ($year = WMF_MIN_ROLLUP_YEAR; $year <= WMF_MAX_ROLLUP_YEAR; $year++) {
		$success = $api->CustomField->create(array(
			'custom_group_id' => $custom_group->id,
			'name' => "is_{$year}_donor",
			'column_name' => "is_{$year}_donor",
			'label' => ts("Is {$year} donor"),
			'data_type' => 'Boolean',
			'html_type' => 'Radio',
			'default_value' => 0,
			'is_active' => 1,
			'is_required' => 0,
			'is_searchable' => 1,
			'is_view' => 1,
		));
		if (!$success) {
			$ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
		}
	}
	$success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
		'name' => 'last_donation_date',
		'column_name' => 'last_donation_date',
		'label' => ts('Last donation date'),
        'data_type' => 'Date',
        'html_type' => 'Select Date',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
        'date_format' => 'M d, yy',
        'time_format' => 2,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'last_donation_currency',
        'column_name' => 'last_donation_currency',
        'label' => ts('Last Donation Currency'),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'last_donation_amount',
        'column_name' => 'last_donation_amount',
        'label' => ts('Last Donation Amount (unconverted)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'last_donation_usd',
        'column_name' => 'last_donation_usd',
        'label' => ts('Last Donation Amount (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }

    $success = $api->CustomField->create(array(
        'custom_group_id' => $custom_group->id,
        'name' => 'lifetime_usd_total',
        'column_name' => 'lifetime_usd_total',
        'label' => ts('Lifetime Donations (USD)'),
        'data_type' => 'Money',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'is_search_range' => 1,
        'is_view' => 1,
    ));
    if (!$success) {
        $ret[] = array( 'success' => false, 'query' => $api->errorMsg() );
    }
	return $ret;
}

/**
 * Add indexes to the civicrm_prevnext_cache table.
 *
 * In CiviCRM 4.6 these are in core.
 */
function wmf_civicrm_update_7025()
{

}

/**
 * Add Alipay to payment_instrument
 */
function wmf_civicrm_update_7026()
{
	wmf_civicrm_create_option_values( 'payment_instrument', array( 'Alipay' ) );

    return array();
}

/**
 * Fix year rollup HTML type
 */
function wmf_civicrm_update_7027()
{
    $api = wmf_civicrm_bootstrap_civi();
    $api->CustomGroup->get(array(
        'name' => 'wmf_donor',
    ));
    $result = $api->values();
    if (!$result) {
        throw new Exception('Could not find custom group wmf_donor.  Please run update 7023 first.');
    }

    $custom_group = array_pop($result);

	$dbs = wmf_civicrm_get_dbs();
    $dbs->push('civicrm');

    db_query("UPDATE civicrm_custom_field
        SET html_type = 'Radio'
        WHERE custom_group_id = {$custom_group->id}
        AND column_name LIKE 'is%donor'
        AND html_type = 'CheckBox'");
}

/**
 * Add "Engage" contribution type
 *
 * Note that we create the "Engage Direct Mail" role programatically, but it
 * won't have usable permissions.
 */
function wmf_civicrm_update_7028() {
    if ( false === user_role_load_by_name( 'Engage Direct Mail' ) ) {
        $role = new stdClass();
        $role->name = 'Engage Direct Mail';
        user_role_save( $role );
    }

    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_financial_types( array(
        'Engage',
    ) );
}

/**
 * Rename "Old and add "Old 2015" Location Type values
 *
 * We are also adding existing values programmatically if they don't already
 * exist.
 */
function wmf_civicrm_update_7029() {
  $api = wmf_civicrm_bootstrap_civi();
  $location_types = array(
    'Home' => 'Home',
    'Work' => 'Work',
    'Main' => 'Main',
    'Other' => 'Other',
    'Mailing' => 'Mailing',
    'Billing' => 'Billing',
    'Old' => 'Old 2014',
    'Old_2015' => 'Old 2015',
  );
  wmf_civicrm_create_location_types($location_types, TRUE);
}

/**
 * Add some custom fields that already exist on production
 */
function wmf_civicrm_update_7030() {
    $warnings = array();

    $api = wmf_civicrm_bootstrap_civi();
    $success = $api->CustomGroup->get(array(
        'name' => 'Organization_Contact',
    ) );
    if ( !$success || !$api->count ) {
        $success = $api->CustomGroup->create( array(
            'name' => 'Organization_Contact',
            'title' => 'Organization Contact',
            'extends' => 'Organization',
            'is_active' => 1,
        ) );
        if ( !$success ) {
            throw new Exception( $api->errorMsg() );
        }
    }
    $custom_group_id = $api->id;

    $success = $api->CustomField->create( array(
        'custom_group_id' => $custom_group_id,
        'name' => 'Name',
        'label' => ts( 'Name' ),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_required' => 0,
        'is_searchable' => 1,
        'is_view' => 0,
    ) );
    if ( !$success ) {
        $warnings[] = $api->errorMsg();
    }

    $success = $api->CustomField->create( array(
        'custom_group_id' => $custom_group_id,
        'name' => 'Title',
        'label' => ts( 'Title' ),
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_required' => 0,
        'is_searchable' => 0,
        'is_view' => 0,
    ) );
    if ( !$success ) {
        $warnings[] = $api->errorMsg();
    }

	return implode( "\n", $warnings );
}

/**
 * Add more custom fields that already exist on production
 */
function wmf_civicrm_update_7031() {

    $api = wmf_civicrm_bootstrap_civi();
    $financialTypes = wmf_civicrm_create_financial_types(array('Stock'));
    $stockContributionTypeId = array_search('Stock', $financialTypes);

    $success = $api->CustomGroup->get(array(
        'name' => 'Stock_Information',
    ) );
    if ( !$success || !$api->count ) {
        $success = $api->CustomGroup->Create( array(
            'name' => 'Stock_Information',
            'title' => 'Stock Information',
            'extends' => 'Contribution',
            'extends_entity_column_value' => array( $stockContributionTypeId ),
            'is_active' => 1,
        ) );
        if ( !$success ) {
            throw new Exception( $api->errorMsg() );
        }
    }
    $custom_group = $api->values[0];

    $success = $api->CustomField->Create( array(
        'custom_group_id' => $custom_group->id,
        'data_type' => 'String',
        'html_type' => 'Text',
        'is_active' => 1,
        'is_searchable' => 1,
        'label' => 'Description of Stock',
        'name' => 'Description_of_Stock',
    ) );
    if ( !$success ) {
        throw new Exception( $api->errorMsg() );
    }
}

/**
 * Link Restrictions, Gift Source, Appeal options to custom fields.
 */
function wmf_civicrm_update_7032() {

    _link_gift_data_field_to_new_group( 'Fund', 'fund_20080709173248', array(
        'Unrestricted - General',
        'Restricted - Foundation',
        'Restricted - Program',
        'Restricted - Fiscal Sponsorship',
    ));

    _link_gift_data_field_to_new_group( 'Campaign', 'campaign_20080709183311', array(
        'Community Gift',
        'Benefactor Gift',
        'Foundation Gift',
        'Matching Gift',
        'Donor Advised Fund',
        'Corporate Gift',
        'Legacy Gift',
        'Chapter Gift',
        'Major Gift',
        'Combined Federal Campaign',
        'Payroll Deduction',
    ));

    _link_gift_data_field_to_new_group( 'Appeal', 'appeal_20080709183729', array(
        'White Mail',
        'Spontaneous Donation',
        'Facebook',
        'Event',
        'Mobile Giving',
        'Corp Matching Gift',
    ));
}

/**
 * Add "Square Cash" payment instrument.
 */
function wmf_civicrm_update_7033() {
    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_option_values( 'payment_instrument', array('Square Cash') );
    return array();
}

/**
 * Add "Trilogy" payment instrument.
 */
function wmf_civicrm_update_7034() {
    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_option_values( 'payment_instrument', array('Trilogy') );
    return array();
}

/**
 * Add option value 'tag_used_for' for civicrm_contribution.
 *
 * This might exist as it had to be added to update 7022 so check first.d
 */
function wmf_civicrm_update_7035() {
    wmf_civicrm_bootstrap_civi();
    wmf_civicrm_create_option_values( 'payment_instrument', array('Trilogy') );
    return array();
}
