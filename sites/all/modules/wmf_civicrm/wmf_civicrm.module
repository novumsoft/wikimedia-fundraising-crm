<?php

require_once 'recurring.inc';
require_once 'tracking.inc';

/**
 * return a map of option value (id) => option name
 */
function civicrm_api_option_group($group_name, $key = null)
{
	static $cached_group = array();
	if (!array_key_exists($group_name, $cached_group))
	{
		$api = civicrm_api_classapi();
		$api->OptionValue->Get(array(
			'option_group_name' => $group_name,
		));
		$cached_group[$group_name] = array();
		$option_values = $api->values();
		foreach ($option_values as $row)
		{
			$cached_group[$group_name][$row->value] = $row->name;
		}
	}
	if ($key)
	{
		// In this case, just lookup name and return the option value
		$forwards = array_flip($cached_group[$group_name]);
		return $forwards[$key];
	}
	return $cached_group[$group_name];
}

function civicrm_option_group_id( $group_name ) {
    $api = civicrm_api_classapi();
    $success = $api->OptionGroup->Get(array(
        'name' => $group_name,
    ));
    if ( $success && $api->values ) {
        return $api->values[0]->id;
    }
}

function civicrm_api_contribution_status($key = null)
{
	return civicrm_api_option_group('contribution_status', $key);
}

function civicrm_api_classapi()
{
	civicrm_initialize();
	if (module_load_include('php', 'civicrm', '../api/class.api') === FALSE)
	{
		watchdog('civicrm_api', t('Failed to load civicrm api classes'), array(), WATCHDOG_ERROR);
	}
	else
	{
		return new civicrm_api3();
	}
}

/**
 * Determines the settlement currency for a given donation.
 * Argument is a queue message or a civicrm contribution array.
 * TODO: implement hook to determine our actual settlement currency.
 */
function wmf_civicrm_get_settlement_currency($transaction)
{
	return 'USD';
}

/**
 * Given the date a payment was settled (in unix seconds), recalculate the
 * amount in USD using the exchange rate at that moment.  Put this amount in a
 * custom field.
 * Then, set the civi amounts and currencies to reflect the real settlement
 * currency and amount.
 *
 * Return the contribution array with these extra fields merged in.
 */
function wmf_civicrm_settle( $contribution, $settled_timestamp = null )
{
    if ( $settled_timestamp === null ) {
        // Get the stored date
        // FIXME wmf_civicrm_contribution_get_custom_values('settlement_date');
        $field = wmf_civicrm_get_custom_field_name( 'settlement_date' );
        $params = array(
            'entityID' => $contribution['id'],
            $field => 1
        );
        $result = CRM_Core_BAO_CustomValueTable::getValues( $params );
        $settlement_db_date = $result[$field];
        $settled_timestamp = strtotime( $settlement_db_date );
        $settlement_db_date = wmf_common_date_unix_to_sql( $settled_timestamp );
    } else {
        $settlement_db_date = wmf_common_date_unix_to_sql( $settled_timestamp );
    }

    list($original_currency, $original_amount) = explode(" ", $contribution['source']);
    $total_usd = round(exchange_rate_convert($original_currency, $original_amount, $settled_timestamp), 2);

    $custom_values = array(
        'total_usd' => $total_usd,
        'settlement_date' => $settlement_db_date,
    );
    wmf_civicrm_set_custom_field_values($contribution['id'], $custom_values);

    $settled_currency = wmf_civicrm_get_settlement_currency( $contribution );
    if ( $contribution['currency'] != $settled_currency ) {
        $settlement_convert =
            exchange_rate_convert( $settled_currency, 1, $settled_timestamp );
        $contribution['total_amount'] = round( $contribution['total_amount'] * $settlement_convert, 2 );
        $contribution['fee_amount'] = round( $contribution['fee_amount'] * $settlement_convert, 2 );
        $contribution['net_amount'] = round( $contribution['net_amount'] * $settlement_convert, 2 );

        $contribution['currency'] = $settled_currency;

        $contribution['version'] = 3; //WTF

        $contribution_result = civicrm_api( "Contribution", "Create", $contribution );
        if ( array_key_exists( 'is_error', $contribution_result ) && $contribution_result['is_error'] != 0 ) {
            throw new WmfException( "IMPORT_CONTRIB", "Couldn't update contribution with new settlement info. Original error: {$contribution_result['error_message']}. txn_id: {$contribution['trxn_id']}" );
        }
    }

    return array_merge( $contribution, $custom_values );
}

function wmf_civicrm_contribution_get_custom_values( $entity_id, $names, $group_name = null )
{
    $names = (array)$names;
    $params[ 'entityID' ] = $entity_id;
    foreach ( $names as $name ) {
        $field = wmf_civicrm_get_custom_field_name( $name, $group_name );
        $params[ $field ] = 1;
        $field_map[ $field ] = $name;
    }
    $result = CRM_Core_BAO_CustomValueTable::getValues( $params );
    $ret = array();
    foreach ( $result as $field => $value ) {
        if ( array_key_exists( $field, $field_map ) ) {
            $ret[ $field_map[ $field ] ] = $value;
        }
    }
    return $ret;
}

function wmf_civicrm_set_custom_field_values($entity_id, $map, $group_name = null)
{
    $params = array(
        'entityID' => $entity_id,
    );
    $custom_fields = wmf_civicrm_get_custom_field_map(array_keys($map), $group_name);
    foreach ($map as $field_name => $value)
    {
        $params[$custom_fields[$field_name]] = $value;
    }
    $result = CRM_Core_BAO_CustomValueTable::setValues($params);
    if (!empty($result['is_error']))
    {
        throw new WmfException( 'CIVI_CONFIG',
            t( 'Failed to set custom values: id !id, error: !err', array( '!id' => $entity_id, '!err' => $result['error_message'] ) )
        );
    }
}

function wmf_civicrm_get_custom_field_map( $field_names, $group_name = null )
{
    static $custom_fields = array();
    foreach ($field_names as $name)
    {
        if (empty($custom_fields[$name]))
        {
            $id = CRM_Core_BAO_CustomField::getCustomFieldID( $name, $group_name );
            $custom_fields[$name] = "custom_{$id}";
        }
    }

    return $custom_fields;
}

function wmf_civicrm_get_custom_field_name( $field_name, $group_name = null ) {
    $custom_fields = wmf_civicrm_get_custom_field_map( array( $field_name ), $group_name );
    return $custom_fields[ $field_name ];
}

/**
 * Try to import a transaction message into CiviCRM, otherwise
 * throw an exception.
 */
function wmf_civicrm_contribution_message_import( &$msg ) {
    civicrm_initialize();

    $msg = wmf_civicrm_verify_message_and_stage($msg);

    // Associate with existing recurring records
    if ( $msg['recurring']
        && !$msg['contribution_recur_id']
    ) {
        if ( $msg['subscr_id'] ) {
            $recur_record = wmf_civicrm_get_gateway_subscription( $msg['gateway'], $msg['subscr_id'] );
            if ( $recur_record ) {
                watchdog( 'queue2civicrm_import', 'Found matching recurring record for subscr_id: ' . $msg['subscr_id'], NULL, WATCHDOG_INFO );
                $msg['contribution_recur_id'] = $recur_record->id;
                $msg['contact_id'] = $recur_record->contact_id;
            }
        } else {
            throw new WmfException( 'INVALID_MESSAGE', 'Recurring donation, but no subscription ID found.' );
        }
    }

    if ( !$msg['contact_id'] ) {
        // insert the contact information
        $contact = wmf_civicrm_message_contact_insert( $msg );

        // Insert the location record
        $location = wmf_civicrm_message_location_insert( $msg, $contact );

        // Tag contact for review
        try {
            $tag = wmf_civicrm_tag_contact_for_review( $contact );
        } catch ( WmfException $ex ) {
            watchdog( 'queue2civicrm_import', 'Failed to tag contact for review.', NULL, WATCHDOG_ERROR );
        }

        $msg['contact_id'] = $contact['id'];
    }

    // Make new recurring record if necessary
    $initial_recurring = ( $msg['recurring'] && !$msg['contribution_recur_id'] );
    if ( $initial_recurring ) {
        watchdog( 'queue2civicrm_import', 'Attempting to insert new recurring subscription: ' . $msg['subscr_id'], NULL, WATCHDOG_INFO );

        // FIXME: level across processors
        if ( $msg['gateway'] === 'globalcollect' ) {
            if ( false === strpos( $msg['subscr_id'], 'RECURRING GLOBALCOLLECT' ) ) {
                $msg['subscr_id'] = "RECURRING GLOBALCOLLECT {$msg['subscr_id']}";
            }
        }

        wmf_civicrm_message_contribution_recur_insert( $msg, $contact['id'], $msg['subscr_id'] );
        $recur_record = wmf_civicrm_get_gateway_subscription( $msg['gateway'], $msg['subscr_id'] );
        $msg['contribution_recur_id'] = $recur_record->id;
    }

    // Insert the contribution record.
    $contribution = _wmf_civicrm_message_contribution_insert( $msg );

    if ( !$msg['recurring'] || $initial_recurring ) {
        // Map the tracking record to the CiviCRM contribution
        // @FIXME what do we do if this returns false?  nothing at the moment...
        wmf_civicrm_message_update_contribution_tracking( $msg, $contribution );
    }

    if ( !empty( $msg['notes'] ) ) {
        civicrm_api3( "Note", "Create", array(
            'entity_table' => 'civicrm_contact',
            'entity_id' => $msg['contact_id'],
            'note' => $msg['notes'],
        ) );
    }

    return $contribution;
}

/**
 * Insert the contribution record
 *
 * This is an internal method, you must be looking for
 * @see wmf_civicrm_contribution_message_import.
 *
 * @param array $msg
 *
 * @return array
 */
function _wmf_civicrm_message_contribution_insert( $msg )
{
    $transaction = WmfTransaction::from_message( $msg );
    $trxn_id = $transaction->get_unique_id();

    $contribution = array(
        'contact_id' => $msg['contact_id'],
        'total_amount' => $msg['gross'],
        'contribution_type_id' => $msg['contribution_type_id'],
        'payment_instrument_id' => $msg['payment_instrument_id'],
        'fee_amount' => $msg['fee'],
        'net_amount' => $msg['net'],
        'trxn_id' => $trxn_id,
        'receive_date' => wmf_common_date_unix_to_civicrm( $msg['date'] ),
        'currency' => $msg['currency'],
        'source' => $msg['original_currency'] . ' ' . $msg['original_gross'],
        'contribution_recur_id' => $msg['contribution_recur_id'],
        'check_number' => $msg['check_number'],
        'letter_code' => $msg['letter_code'],

        // API required fields
        'version' => '3'
    );

    // Add the thank you date when it exists and is not null (e.g.: we're importing from a check)
    if ( array_key_exists( 'thankyou_date', $msg ) && is_numeric( $msg[ 'thankyou_date' ] ) ) {
        $contribution[ 'thankyou_date' ] = wmf_common_date_unix_to_civicrm( $msg['thankyou_date'] );
    }

    /**
    *  Hopefully the Civi API will eventually handle custom fields in the
    *  above "Create" call.
    *
    * NOTE: the custom field for "Gift_Information" indicates that check number is stored here.  It is not.
    */
    $custom_field_defaults = array(
        'Contribution_Comments' => '',
        'Gift_Data' => NULL,
        'gateway_account' => '',
    );

    // Legacy field names which do not match the message field names
    $custom_name_mangle = array(
        'comment' => 'Contribution_Comments',
        'direct_mail_appeal' => 'Appeal',
        'gift_source' => 'Campaign',
        'letter_code' => 'Gift_Data',
        'restrictions' => 'Fund',
        'postmark_date' => 'Postmark_Date',
    );

    // Custom fields with names that match the message fields
    $custom_name_passthrough = array(
        'gateway_account',
        'import_batch_number',
        'no_thank_you',
        'source_name',
        'source_type',
        'source_host',
        'source_run_id',
        'source_version',
        'source_enqueued_time',
    );

    $custom_fields = $custom_name_mangle
        + array_combine( $custom_name_passthrough, $custom_name_passthrough );

    $custom_vars = array();
    foreach ( $custom_fields as $msg_key => $custom_key ) {
        if ( array_key_exists( $msg_key, $msg ) ) {
            $custom_vars[$custom_key] = $msg[$msg_key];
        }
    }

    // Transform any unix timestamps into an unambiguous MySQL datetime literal.
    // If the date is already in mysql format, it will be 14 characters long:
    // YYYYmmddHHiiss :-/
    $date_mangle = array(
        'Postmark_Date',
        'source_enqueued_time',
    );
    foreach ( $date_mangle as $field ) {
        if ( array_key_exists( $field, $custom_vars )
            && is_numeric( $custom_vars[$field] )
            && strlen( $custom_vars[$field] ) < 14
        ) {
            $custom_vars[$field] = wmf_common_date_unix_to_sql( $custom_vars[$field] );
        }
    }

    $custom_vars += $custom_field_defaults;

    $custom_name_mapping = wmf_civicrm_get_custom_field_map( array_keys( $custom_vars ) );
    foreach ( $custom_name_mapping as $readable => $machined ) {
        if ( array_key_exists( $readable, $custom_vars ) ) {
            $contribution[$machined] = $custom_vars[$readable];
        }
    }

    watchdog( 'wmf_civicrm', 'Contribution array for civicrm_contribution_add(): ' . print_r($contribution, TRUE), NULL, WATCHDOG_DEBUG);

    $contribution_result = civicrm_api( "Contribution", "Create", $contribution );

    watchdog( 'wmf_civicrm', 'Contribution result from civicrm_contribution_add(): ' . print_r($contribution_result, TRUE), NULL, WATCHDOG_DEBUG);

    if ( array_key_exists( 'is_error', $contribution_result ) && $contribution_result['is_error'] != 0 ) {
        throw new WmfException(
            'INVALID_MESSAGE',
            'Cannot create contribution, civi error!',
            $contribution_result['error_message']
        );
    }

    // Create any required tags on the contribution
    if ( $msg['contribution_tags'] ) {
        $supported_tags = array_flip(CRM_Core_PseudoConstant::tag());
        $stacked_ex = array();
        foreach ( array_unique( $msg['contribution_tags'] ) as $tag ) {
            try {
                $tag_result = civicrm_api3( "EntityTag", "Create", array(
                    'entity_table' => 'civicrm_contribution',
                    'entity_id' => $contribution_result['id'],
                    'tag_id' => $supported_tags[$tag]
                ));
            } catch ( CiviCRM_API3_Exception $ex ) {
                $stacked_ex[] = "Failed to add tag {$tag} to contribution ID {$contribution_result['id']}. Error: " . $ex->getMessage();
            }
        }
        if ( !empty( $stacked_ex ) ) {
            throw new WmfException(
                "IMPORT_CONTRIB",
                implode( "\n", $stacked_ex )
            );
        }
    }

    return $contribution_result[ 'values' ][ $contribution_result[ 'id' ] ];
}

/**
 * @fixme TODO: make the v3 API calls use the wrapper function
 *
 * @param $type
 * @param $name
 * @return bool
 */
function wmf_civicrm_get_civi_id($type, $name)
{
    static $civi_ids = array();
    $params = array('name' => $name);
    $dummy = array();

    if(array_key_exists($type, $civi_ids) && array_key_exists($name, $civi_ids[$type])) {
        return $civi_ids[$type][$name];
    }

    switch ($type) {
        case 'contribution_type_id':
            //fixme: This is probably the upside-down way to do it. Really ought to go through the API.
            //
            $result = CRM_Contribute_BAO_ContributionType::retrieve($params, $dummy);
            if (!is_null($result)){
                $civi_ids[$type][$name] = $result->id;
                watchdog('wmf_civicrm', "Found id for contribution_type $name: " . $civi_ids[$type][$name]);
            } else {
                //make it. Or, throw an error here. Either way.
                //XXX nonono
                watchdog('wmf_civicrm', "Id for contribution_type $name not found. Creating...");
                $params['description'] = '';
                $params['accounting_code'] = strtoupper($name);
                $params['is_deductible'] = 1;
                $params['is_active'] = 1;
                $result = CRM_Contribute_BAO_ContributionType::add($params, $dummy);
                $civi_ids[$type][$name] = $result->id;
                watchdog('wmf_civicrm', "New id for contribution_type $name :" . $civi_ids[$type][$name]);
            }
            $id = $civi_ids[$type][$name];
            if (empty($id)) {
                throw new WmfException( "CIVI_CONFIG",
                    t( 'Contribution Type "!name" not found!', array( '!name' => $name ) )
                );
            }
            return $id;
        case 'payment_instrument_id':
            require_once 'api/v3/OptionValue.php';
            $group_id = civicrm_api3_option_value_get(
                array('option_group_name' => 'payment_instrument', 'label'=> $name, 'version' => '3'));
            if($group_id['count'] == 1){
                $civi_ids[$type][$name] = $group_id['values'][strval($group_id['id'])]['value'];
                watchdog('wmf_civicrm', "Found value for payment_instrument $name :" . $civi_ids[$type][$name]);
                return $civi_ids[$type][$name];
            } else {
                throw new WmfException("CIVI_CONFIG", t("Payment Instrument '!name' not found!", array("!name" => $name)));
            }
            break;
        case 'tag_id':
            require_once 'api/v3/Tag.php';
            $tag_id = civicrm_api3_tag_get(array('name'=> $name, 'version' => '3'));
            if (is_array($tag_id) && array_key_exists('id', $tag_id)){
                $civi_ids[$type][$name] = $tag_id['id'];
                watchdog('wmf_civicrm', "Found id for Entity Tag $name :" . $civi_ids[$type][$name]);
                return $civi_ids[$type][$name];
            } else {
                throw new WmfException("CIVI_CONFIG", t("Entity Tag '!name' not found!", array("!name" => $name)));
            }
        default:
            throw new WmfException("CIVI_CONFIG", t("Civi lookup for type '!type' not implemented", array("!type" => $type)));
    }
}

function wmf_civicrm_get_message_contribution_type( $msg ) {
	$gateway = strtolower( $msg['gateway'] );
    if ( $gateway === 'merkle' ) {
		return 'merkle';
	} elseif ( $gateway === 'arizonalockbox' ) {
        return 'Arizona Lockbox';
    } else {
		return 'cash';
	}
}

/**
 * Determines which civi-only payment instrument is appropriate for the current 
 * message, and resturns the civi payment instrument's human-readable display 
 * string (if it exists).   
 *
 * TODO lookup table
 *
 * @return string payment instrument label
 */
function wmf_civicrm_get_message_payment_instrument( $msg )
{
    civicrm_initialize();

    $payment_instrument = null;

    if ( array_key_exists( 'payment_method', $msg ) && trim( $msg['payment_method'] ) != '' ){

        switch( strtolower( $msg[ 'payment_method' ] ) ){
            case 'check':
                $payment_instrument = 'Check';
                break;
            case 'bt':
                $payment_instrument = 'Bank Transfer';
                break;
            case 'cc':
                $payment_instrument = 'Credit Card';	
                if ( empty( $msg['payment_submethod'] ) ) {
                    watchdog( 'wmf_civicrm', 'No credit card submethod given', NULL, WATCHDOG_WARNING );
                    break;
                }
                switch ( strtolower( $msg['payment_submethod'] ) ){
                    case 'visa':
                        $payment_instrument .= ': Visa';
                        break;
                    case 'visa-beneficial':
                        $payment_instrument .= ': Visa Beneficial';
                        break;
                    case 'visa-electron':
                        $payment_instrument .= ': Visa Electron';
                        break;
                    case 'visa-debit':
                        $payment_instrument .= ': Visa Debit';
                        break;
                    case 'mc':
                        $payment_instrument .= ': MasterCard';
                        break;
                    case 'mc':
                        $payment_instrument .= ': MasterCard Debit';
                        break;
                    case 'amex':
                        $payment_instrument .= ': American Express';
                        break;
                    case 'maestro':
                        $payment_instrument .= ': Maestro';
                        break;
                    case 'solo':
                        $payment_instrument .= ': Solo';
                        break;
                    case 'laser':
                        $payment_instrument .= ': Laser';
                        break;
                    case 'jcb':
                        $payment_instrument .= ': JCB';
                        break;
                    case 'discover':
                        $payment_instrument .= ': Discover';
                        break;
                    case 'cb':
                        $payment_instrument .= ': Carte Bleue';
                        break;
                    case 'diners':
                        $payment_instrument .= ': Diners';
                        break;
                }
                break;
            case 'dd':
                $payment_instrument = 'Direct Debit';
                break;
            case 'eft':
                $payment_instrument = 'EFT';
                break;
            case 'ew':
                switch( strtolower( $msg['payment_submethod'] ) ){
                    case 'ew_paypal':
                        $payment_instrument = 'Paypal';
                        break;
                    case 'ew_webmoney':
                        $payment_instrument = 'Webmoney';
                        break;
                    case 'ew_moneybookers':
                        $payment_instrument = 'Moneybookers';
                        break;
                    case 'ew_cashu':
                        $payment_instrument = 'Cashu';
                        break;
                    case 'ew_yandex':
                        $payment_instrument = 'Yandex';
                        break;
                    case 'ew_alipay':
                        $payment_instrument = 'Alipay';
                        break;
                }
                break;
            case 'obt':
                if ( strtolower( $msg['payment_submethod'] === 'bpay' ) ){
                    $payment_instrument = 'Bpay';
                }
                break;
            case 'rtbt':
                switch( strtolower( $msg['payment_submethod'] ) ){
                    case 'rtbt_nordea_sweden':
                        $payment_instrument = 'Nordea';
                        break;
                    case 'rtbt_ideal':
                        $payment_instrument = 'iDeal';
                        break;
                    case 'rtbt_enets':
                        $payment_instrument = 'Enets';
                        break;
                    case 'rtbt_sofortuberweisung':
                        $payment_instrument = 'Sofort';
                        break;
                    case 'rtbt_eps':
                        $payment_instrument = 'EPS';
                        break;
                }
                break;
            case 'cash':
                $payment_instrument = 'Cash';
                //'cash_boleto' - Only one right now. I assume there might be more later? 
                switch ( strtolower( $msg['payment_submethod'] ) ){
                    case 'cash_boleto': 
                        $payment_instrument = 'Boleto';
                        break;
                }
                break;	
            case 'payflowpro':
                if ( strtolower( $msg['gateway'] ) === 'payflowpro' ){
                    $payment_instrument = 'Credit Card';
                }
                break;
        }

    }
    if ( !$payment_instrument
            and array_key_exists( 'gateway', $msg )
    ) {
        switch ( strtolower( $msg['gateway'] ) ) {
        case 'amazon':
            $payment_instrument = 'Amazon';
            if ( array_key_exists( 'payment_method', $msg ) and strtolower( $msg['payment_method'] ) !== 'amazon' ) {
                watchdog( 'wmf_civicrm', 'payment_method constraint violated: gateway Amazon, but method=@method ; gateway_txn_id=@id', array( '@method' => $msg['payment_method'], '@id' => $msg['gateway_txn_id'] ), WATCHDOG_DEBUG );
            }
            break;
        case 'paypal':
            $payment_instrument = 'Paypal';
            if ( array_key_exists( 'payment_method', $msg ) and strtolower( $msg['payment_method'] ) !== 'paypal' ) {
                watchdog( 'wmf_civicrm', 'payment_method constraint violated: gateway Paypal, but method=@method ; gateway_txn_id=@id', array( '@method' => $msg['payment_method'], '@id' => $msg['gateway_txn_id'] ), WATCHDOG_DEBUG );
            }
            break;
        }
    }

    //I was going to check to make sure the target gateway was a real thing, but: Hello, overhead. No.
    return $payment_instrument;
}

/**
 * Normalize contribution amounts
 * 
 * Do exchange rate conversions and set appropriate fields for CiviCRM
 * based on information contained in the message.
 *
 * Upon exiting this function, the message is guaranteed to have these fields:
 *    currency - settlement currency
 *    original_currency - currency remitted by the donor
 *    gross - settled total amount
 *    original_gross - remitted amount in original currency
 *    fee - processor fees, when available
 *    net - gross less fees
 *
 * @param $msg
 * @return array
 */
function wmf_civicrm_normalize_contribution_amounts( $msg ) {

    // If there is anything fishy about the amount...
    if ( ( empty( $msg['gross'] ) or empty( $msg['currency'] ) )
        and ( empty( $msg['original_gross'] ) or empty( $msg['original_currency'] ) )
    ) {
        // just... don't
        watchdog( 'wmf_civicrm', 'Not freaking out about non-monetary message.',
            NULL, WATCHDOG_INFO );
        return $msg;
    }

    if ( empty( $msg['original_currency'] ) && empty( $msg['original_gross'] ) ) {
        $msg['original_currency'] = $msg['currency'];
        $msg['original_gross'] = $msg['gross'];
    }

    if ( !array_key_exists('fee', $msg) && !array_key_exists('net', $msg) ) {
        $msg['fee'] = '0.00';
        $msg['net'] = $msg['gross'];
    } elseif ( !array_key_exists('fee', $msg) && array_key_exists('net', $msg) ) {
        $msg['fee'] = $msg['gross'] - $msg['net'];
    } elseif ( array_key_exists('fee', $msg) && !array_key_exists('net', $msg) ) {
        $msg['net'] = $msg['gross'] - $msg['fee'];
    }

    $settlement_currency = wmf_civicrm_get_settlement_currency($msg);
    if ( $msg['currency'] !== $settlement_currency ) {
        watchdog( 'wmf_civicrm', 'Converting to settlement currency: %old -> %new',
            array( '%old' => $msg['currency'], '%new' => $settlement_currency ),
            WATCHDOG_INFO );
        try {
            $settlement_convert = exchange_rate_convert($msg['original_currency'], 1, $msg['date']) / exchange_rate_convert($settlement_currency, 1, $msg['date']);
        }
        catch (ExchangeRatesException $ex) {
            throw new WmfException( 'INVALID_MESSAGE', "UNKNOWN_CURRENCY: '{$msg['original_currency']}': " . $ex->getMessage() );
        }

        // Do exchange rate conversion
        $msg['currency'] = $settlement_currency;
        $msg['fee'] = $msg['fee'] * $settlement_convert;
        $msg['gross'] = $msg['gross'] * $settlement_convert;
        $msg['net'] = $msg['net'] * $settlement_convert;
    }

    // TODO: Lookup by currency
    $significantDecimals = 2;
    $msg['fee'] = round( $msg['fee'], $significantDecimals );
    $msg['gross'] = round( $msg['gross'], $significantDecimals );
    $msg['net'] = round( $msg['net'], $significantDecimals );

    return $msg;
}

function wmf_civicrm_verify_message_and_stage($msg)
{
    $msg = wmf_civicrm_normalize_msg( $msg );

    $required = array(
        'gross',
        'currency',
        'gateway',
        'gateway_txn_id',
    );

    $err = array();
    foreach ($required as $key){
        if ( empty( $msg[$key] ) ) {
            $err[] = "Required Field '$key' not found in message.";
        }
    }

    if (floatval($msg['net']) <= 0 || floatval($msg['gross']) <= 0)
    {
        $err[] = "Positive amount required.";
    }

    if (!empty($err)) {
        throw new WmfException( 'CIVI_REQ_FIELD', $err );
    }

    $max_lengths = array(
        'check_number' => 255,
        'city' => 64,
        'email' => 254,
        'first_name' => 64,
        'last_name' => 64,
        'middle_name' => 64,
        'organization_name' => 128,
        'postal_code' => 64,
        'street_address' => 96,
        'supplemental_address_1' => 96,
        'supplemental_address_2' => 96,
    );
    $truncate_tags = array(
        'postal_code' => 'AddressTruncated',
        'street_address' => 'AddressTruncated',
        'supplemental_address_1' => 'AddressTruncated',
        'supplemental_address_2' => 'AddressTruncated',
    );
    foreach ( $max_lengths as $key => $limit ) {
        if ( strlen( $msg[$key] ) > $limit ) {
            if ( array_key_exists( $key, $truncate_tags ) ) {
                watchdog(
                    'wmf_civicrm',
                    'Truncating key !key to !len chars. Original: "!val". Applying tag !tag',
                    array( '!key' => $key, '!len' => $limit, '!val' => $msg[$key], '!tag' => $truncate_tags[$key] ),
                    WATCHDOG_WARNING
                );
                $msg[$key] = substr( $msg[$key], 0, $limit );
                $msg['contact_tags'][] = $truncate_tags[$key];
            } else {
                throw new WmfException( 'INVALID_MESSAGE', "Field '{$key}' is too long." );
            }
        }
    }

    //Now check to make sure this isn't going to be a duplicate message for this gateway.
    if ( wmf_civicrm_get_contributions_from_gateway_id( $msg['gateway'], $msg['gateway_txn_id'] ) ) {
        throw new WmfException( 'DUPLICATE_CONTRIBUTION', "Contribution already exists. Ignoring message." );
    }

    return $msg;
}

/**
 * Insert the contact record
 * 
 * Serves as a standard way for message processors to handle contact
 * insertion.  By passing a contact id, a contact can be updated.
 * 
 * @param array $msg
 * @param int $contact_id
 * @return array
 */
function wmf_civicrm_message_contact_insert( $msg, $contact_id=NULL ) {
    // Set defaults for optional fields in the message
    if ( !array_key_exists( 'contact_type', $msg ) ) {
        $msg['contact_type'] = "Individual";
    } elseif ( $msg['contact_type'] != "Individual" && $msg['contact_type'] != "Organization" ) {
        // looks like an unsupported type was sent, revert to default
        watchdog( 'wmf_civicrm', 'Non-supported contact_type received: %type', array( '%type' => print_r( $msg['contact_type'], true )), WATCHDOG_INFO );
        $msg['contact_type'] = "Individual";
    }

    if ( !array_key_exists( 'contact_source', $msg ) ) {
        $msg['contact_source'] = "online donation";
    }

    // Honor the opt-out checkbox, if present, else, set default
    if ( !array_key_exists( 'optout', $msg ) ) {
        $msg['optout'] = 0;
    }

    // Create the contact record
	$fname = substr( trim( $msg['first_name'] ), 0, 64 );
	$mname = substr( trim( $msg['middle_name'] ), 0, 64 );
	$lname = substr( trim( $msg['last_name'] ), 0, 64 );
    $contact = array(
        'id' => $contact_id,
        'contact_type' => $msg['contact_type'],
        'first_name' => $fname,
        'middle_name' => $mname,
        'last_name' => $lname,
        'sort_name' => substr( trim( $lname . ', ' . $fname, ' ,' ), 0, 128 ),
        'display_name' => substr( $fname . ' ' . $lname, 0, 128 ),
        'do_not_trade' => $msg['anonymous'], // FIXME: has the wrong meaning
        'contact_source' => $msg['contact_source'],

        // API required fields
        'version' => '3'
    );
    if ( strtolower( $msg['contact_type'] ) == "organization" ){
        unset( $contact['first_name'] );
        unset( $contact['middle_name'] );
        unset( $contact['last_name'] );

        $contact['sort_name'] = $msg['organization_name'];
        $contact['display_name'] = $msg['organization_name'];
        $contact['organization_name'] = $msg['organization_name'];
    }
    if ( empty($msg['language']) ) {
        // TODO: use LanguageTag to prevent truncation of >2 char lang codes
        // guess from contribution_tracking data
        $tracking = wmf_civicrm_get_contribution_tracking( $msg );
        if ( $tracking and !empty($tracking['language']) ) {
            if ( strpos( $tracking['language'], '-' ) ) {
                // If we are already tracking variant, use that
                list( $language, $variant ) = explode( '-', $tracking['language'] );
                $contact['preferred_language'] = $language . '_' . strtoupper( $variant );
            } else {
                $contact['preferred_language'] = $tracking['language'];
                if ( !empty($tracking['country']) ) {
                    $contact['preferred_language'] .= '_' . $tracking['country'];
                }
            }
        } else {
            // FIXME: wish we had the contact_id here :(
            watchdog( 'wmf_civicrm', 'Failed to guess donor\'s preferred language, falling back to some hideous default', NULL, WATCHDOG_INFO );
        }
    } else {
        $contact['preferred_language'] = strtolower(substr($msg['language'], 0, 2));
        if ( !empty( $msg['country'] ) ) {
            $contact['preferred_language'] .= '_' . strtoupper(substr($msg['country'], 0, 2));
        }
    }

    // Copy some fields, if they exist
    $direct_fields = array(
        'do_not_email',
        'do_not_mail',
        'do_not_phone',
        'do_not_sms',
        'is_opt_out',
    );
    foreach ( $direct_fields as $field ) {
        if ( isset( $msg[$field] ) ) {
            $contact[$field] = $msg[$field];
        }
    }

    // Attempt to insert the contact
    try {
        $contact_result = civicrm_api3( "Contact", "Create", $contact );
        if ( $contact_id == NULL ){
            watchdog( 'wmf_civicrm', 'Result for adding contact: %contact', array( '%contact' => print_r( $contact_result, true )), WATCHDOG_DEBUG );
        } else {
            watchdog( 'wmf_civicrm', 'Result for updating contact: %contact', array( '%contact' => print_r( $contact_result, true )), WATCHDOG_DEBUG );
        }
    } catch ( CiviCRM_API3_Exception $ex ) {
        throw new WmfException(
            "IMPORT_CONTACT",
            "Contact could not be added. Aborting import. Contact data was " . print_r($contact, true) . " Original error: " . $ex->getMessage()
        );
    }
    $contact_id = $contact_result['id'];

    // Add any wmf_donor custom field values
    $wmf_donor_fields = array(
        'do_not_solicit',
    );
    $wmf_donor_values = array();
    foreach ( $wmf_donor_fields as $donor_field ) {
        if ( isset( $msg[$donor_field] ) ) {
            $wmf_donor_values[$donor_field] = $msg[$donor_field];
        }
    }
    if ( !empty( $wmf_donor_values ) ) {
        try {
            wmf_civicrm_set_custom_field_values( $contact_id, $wmf_donor_values, 'wmf_donor' );
        } catch ( WmfException $ex ) {
            watchdog( 'wmf_civicrm', "Setting wmf_donor custom field values failed with details: {$ex->getMessage()}", array(), WATCHDOG_ERROR );
        }
    }

    // Do we have any tags we need to add to this contact?
    if ( $msg['contact_tags'] ) {
        $supported_tags = array_flip(CRM_Core_PseudoConstant::tag());
        $stacked_ex = array();
        foreach ( array_unique( $msg['contact_tags'] ) as $tag ) {
            try {
                $tag_result = civicrm_api3( "EntityTag", "Create", array(
                    'entity_table' => 'civicrm_contact',
                    'entity_id' => $contact_id,
                    'tag_id' => $supported_tags[$tag]
                ));
            } catch ( CiviCRM_API3_Exception $ex ) {
                $stacked_ex[] = "Failed to add tag {$tag} to contact ID {$contact_id}. Error: " . $ex->getMessage();
            }
        }
        if ( !empty( $stacked_ex ) ) {
            throw new WmfException(
                "IMPORT_CONTACT",
                implode( "\n", $stacked_ex )
            );
        }
    }

    return $contact_result;
}

/**
 * Update the contact record
 * 
 * Serves as a standard way for message processors to handle contact
 * updates.
 * 
 * @param array $msg
 * @param int $contact_id
 * @return array
 */
function wmf_civicrm_message_contact_update( $msg, $contact_id )
{
    //FIXME: reverse the way these functions delegate.  Or eliminate -_insert.
    return wmf_civicrm_message_contact_insert( $msg, $contact_id );
}

/**
 * Insert the location record
 * 
 * Serves as a standard way for message processors to handle location
 * insertion.
 * 
 * @param array $msg
 * @param array $contact
 */
function wmf_civicrm_message_location_insert( $msg, $contact ) {
    wmf_civicrm_message_location_update( $msg, $contact );
}

/**
 * Update the location record
 * 
 * Serves as a standard way for message processors to handle location
 * updates.
 * 
 * @param array $msg
 * @param array $contact
 */
function wmf_civicrm_message_location_update( $msg, $contact ) {
    wmf_civicrm_message_email_update( $msg, $contact[ 'id' ] );
    wmf_civicrm_message_address_update( $msg, $contact[ 'id' ] );
}

function wmf_civicrm_message_email_update( $msg, $contact_id ) {
    // unset the email address if the default is used
    // this enables us to properly dedupe contacts later on
    if( empty( $msg['email'] ) or $msg[ 'email' ] === 'nobody@wikimedia.org' ){
        return;
    }

    $loc_type_id = wmf_civicrm_get_default_location_type_id();

    $email_params = array(
        'contact_id' => $contact_id,
        'email' => $msg[ 'email' ],
        'is_primary' => 1,
        'is_billing' => 1,
        'location_type_id' => $loc_type_id,
        'version' => 3,
    );

    $result = civicrm_api( "Email", "Create", $email_params );
    if ( array_key_exists( 'is_error', $result ) && $result['is_error'] != 0 ) {
        throw new WmfException( 'IMPORT_CONTACT', "Couldn't store email for the contact.", $result );
    }
}

function wmf_civicrm_message_address_update( $msg, $contact_id ) {
    $loc_type_id = wmf_civicrm_get_default_location_type_id();

    // We can do these lookups a bit more efficiently than Civi
    $country_id = wmf_civicrm_get_country_id( $msg[ 'country' ] );

    $address_params = array(
        'contact_id' => $contact_id,
        'location_type_id' => $loc_type_id,
        'is_primary' => 1,
        'street_address' => $msg['street_address'],
        'supplemental_address_1' => $msg['supplemental_address_1'],
        'city' => $msg['city'],
        'postal_code' => $msg['postal_code'],
        'country_id' => $country_id,
        'country' => $msg[ 'country' ],
        'is_billing' => 1,
        'version' => 3,
    );

    if ( !empty( $msg['state_province'] ) ) {
        $address_params['state_province'] = $msg['state_province'];
        $address_params['state_province_id'] = wmf_civicrm_get_state_id( $country_id, $msg['state_province'] );
    }

    // FIXME: api does not offer control over fixAddress flag
    //$result = civicrm_api( "Address", "Create", $address_params );
    //if ( array_key_exists( 'is_error', $result ) && $result['is_error'] != 0 ) {

    $result = CRM_Core_BAO_Address::add( $address_params, false );
    if ( !$result ) {
        throw new WmfException( 'IMPORT_CONTACT', "Couldn't store address for the contact.", $result );
    }
}

function wmf_civicrm_get_default_location_type_id() {
    $default_location_type = CRM_Core_BAO_LocationType::getDefault();
    return $default_location_type->id;
}

function wmf_civicrm_get_country_id( $raw ) {
	// ISO code, or outside chance this could be a lang_COUNTRY pair
	if ( preg_match( '/^([a-z]+_)?([A-Z]{2})$/', $raw, $matches ) ) {
		$code = $matches[2];

		$iso_cache = CRM_Core_PseudoConstant::countryIsoCode();
		$id = array_search( strtoupper( $code ), $iso_cache );
		if ( $id !== FALSE ) {
			return $id;
		}
	} else {
		$country_cache = CRM_Core_PseudoConstant::country( false, false );
		$id = array_search( $raw, $country_cache );
		if ( $id !== false ) {
			return $id;
		}
	}

	watchdog( 'wmf_civicrm',
		"Cannot find country: [%txt]",
		array( '%txt' => $raw ),
		WATCHDOG_NOTICE
	);
}

/**
 * Find correct state for insertion
 * 
 * When passing CiviCRM a state abbreviation, odd things can happen - like getting the right abbreviation, but the wrong state
 * So we'll pull back the correct state/province name based off of a user's country/state abbreviation
 */
function wmf_civicrm_get_state( $country, $state )
{
    if ( strlen( $country ) == 2 ) {
        $query = "SELECT s.name AS state_name FROM civicrm_country c, civicrm_state_province s WHERE s.country_id=c.id AND c.iso_code = :country AND s.abbreviation = :state";
    } else {
        $query = "SELECT s.name AS state_name FROM civicrm_country c, civicrm_state_province s WHERE s.country_id=c.id AND c.name = :country AND s.abbreviation = :state";
    }
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push( 'civicrm' );
    $result = db_query( $query, array( ':country' => $country, ':state' => $state ) );
    if ( $result->rowCount() === 1 ){
        $state = $result->fetch()->state_name;
    }

    return $state;
}

function wmf_civicrm_get_state_id( $country_id, $state )
{
    $query = <<<EOS
SELECT id
FROM civicrm_state_province s
WHERE
    s.country_id = :country_id
    AND ( s.abbreviation = :state OR s.name = :state )
EOS;
    $dbs = wmf_civicrm_get_dbs();
    $dbs->push( 'civicrm' );
    $result = db_query( $query, array( ':country_id' => $country_id, ':state' => $state ) );
    if ( $result->rowCount() === 1 ){
        return $result->fetch()->id;
    }
    watchdog( 'wmf_civicrm',
        "Cannot find state: [%state] (country %country)",
        array( '%state' => $state, '%country' => $country_id ),
        WATCHDOG_NOTICE
    );
}



/**
 * Normalize the queued message
 * 
 * Decodes the message and updates some of the message fields in ways 
 * that are consistent with how we need to insert data into CiviCRM.
 * This should be useful by other modules processing contribution messages 
 * out of the queue.
 * 
 * @param mixed $msg
 * @return array
 */
function wmf_civicrm_normalize_msg( $msg ) {
    // Decode the message body.
    if ( !is_array( $msg ) ) {
        $msg = json_decode( $msg->body, true );
    }

	$trim_strings = function( $input ) {
		if ( !is_string( $input ) ) {
			return $input;
		}
		return trim( $input );
	};

	$msg = array_map( $trim_strings, $msg );

    //defaults: Keys that aren't actually required, but which will cause some portion of the code to complain
    //if they don't exist (even if they're blank).
    // FIXME: don't use defaults.  Access msg properties using a functional interface.
    $defaults = array(
        // FIXME: Default to now. If you can think of a better thing to do in
        // the name of historical exchange rates.  Searching ts and
        // source_enqueued_time is a good start.
        'date' => time(),
        'first_name' => '',
        'middle_name' => '',
        'last_name' => '',
        'organization_name' => '',
        'email' => '',
        'street_address' => '',
        'supplemental_address_1' => '',
        'supplemental_address_2' => '',
        'city' => '',
        'country' => '',
        'state_province' => '',
        'postal_code' => '',
        'postmark_date' => null,
        'check_number' => null,
        'letter_code' => null,
        'thankyou_date' => null,
        'recurring' => null,
        'utm_campaign' => null,
        'recurring' => null,
        'contact_id' => null,
        'contribution_recur_id' => null,
        'effort_id' => null,
        'subscr_id' => null,
        'contact_tags' => array(),
        'contribution_tags' => array(),
    );
    $msg = $msg + $defaults;

    if ( empty( $msg['contribution_type_id'] ) ) {
        if ( empty( $msg['contribution_type'] ) ) {
            $msg['contribution_type'] = wmf_civicrm_get_message_contribution_type( $msg );

            if ( !$msg['contribution_type'] ) {
                throw new WmfException( 'INVALID_MESSAGE', 'No contribution type specified' );
            }
        }
        $msg['contribution_type_id'] = wmf_civicrm_get_civi_id( 'contribution_type_id', $msg['contribution_type'] );
    }

    if ( empty( $msg['payment_instrument_id'] ) ) {
        if ( empty( $msg['payment_instrument'] ) ) {
            $msg['payment_instrument'] = wmf_civicrm_get_message_payment_instrument( $msg );

            if ( !$msg['payment_instrument'] ) {
                throw new WmfException( 'INVALID_MESSAGE', 'No payment instrument specified' );
            }
        }
        $msg['payment_instrument_id'] = wmf_civicrm_get_civi_id( 'payment_instrument_id', $msg['payment_instrument'] );
    }
    if ( !$msg['payment_instrument_id'] ) {
        throw new WmfException( "INVALID_MESSAGE", "No payment type found for message." );
    }


    // if we're missing a contrib id, insert new record to the table
    // this can happen if a user somehow makes a trxn from outside the normal workflow
    // checks are ignored as they were completely offline
    if ( !isset( $msg[ 'contribution_tracking_id' ] ) ) {
        if ( array_key_exists( 'payment_method', $msg ) && strtoupper( $msg['payment_method'] ) != "CHECK" ) {

            watchdog( 'wmf_civicrm', 'Contribution missing contribution_tracking_id', array(), WATCHDOG_DEBUG );
            //@fixme: For the regular transactions, this has been moved to the staging function. This needs to happen in recurring also, and then it can be removed here.
            $anonymous = ( array_key_exists( 'anonymous', $msg) && $msg['anonymous'] == true && strtoupper( $msg['anonymous'] ) != "FALSE" ) ? 1 : 0;
            $optout = ( array_key_exists( 'optout', $msg ) && $msg['optout'] == true && strtoupper( $msg['optout'] ) != "FALSE" ) ? 1 : 0;

            // FIXME: make the next line readable, safe, sane, useful.  See "ACK!"
            $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking( '..' . $msg['payment_method'], 'civicrm', wmf_common_date_unix_to_sql( $msg['date'] ), null, $optout, $anonymous ); //ACK! this should not be handled this way! should be dynamic!
            watchdog( 'wmf_civicrm', 'Newly inserted contribution tracking id: @id', array( '@id' => $contribution_tracking_id ), WATCHDOG_DEBUG );
            $msg['contribution_tracking_id'] = $contribution_tracking_id;
        }
    }

    // Convert times to Unix timestamps.
    if ( !is_numeric( $msg['date'] ) ) {
        $msg['date'] = strtotime($msg['date']);
    }
    // if all else fails, fall back to now.
    if ( empty( $msg['date'] ) ) {
        $msg['date'] = time();
    }

    if ( $msg['recurring'] and !isset( $msg['start_date'] ) ) {
        $msg['start_date'] = $msg['date'];
        $msg['create_date'] = $msg['date'];
    }

    if ( $msg['recurring'] and $msg['gateway'] == 'globalcollect' ) {
        if ( !$msg['subscr_id'] ) {
            // Well randomly grab an ID, of course :-/
            $msg['subscr_id'] = $msg['gateway_txn_id'];
        }
    }

    if ( !empty( $msg['thankyou_date'] ) ) {
        if ( !is_numeric( $msg['thankyou_date'] ) ) {
            $unix_time = strtotime( $msg['thankyou_date'] );
            if ( $unix_time !== false ) {
                $msg['thankyou_date'] = $unix_time;
            } else {
                watchdog( 'wmf_civicrm', 'Could not parse thankyou date: @date from @id', array( '@date' => $msg['thankyou_date'], '@id' => $msg['contribution_tracking_id'] ), WATCHDOG_DEBUG );
                unset( $msg['thankyou_date'] );
            }
        }
    }

    if ( empty( $msg['first_name'] ) and empty( $msg['last_name'] ) ) {
        $msg['first_name'] = 'Anonymous';
        $msg['last_name'] = '';
    }

    // Check for special flags
    // TODO: push non-generic cases into database
    if ( !empty( $msg['utm_campaign'] ) ) {
        switch ( $msg['utm_campaign'] ) {
        case 'NY2013':
            $msg['direct_mail_appeal'] = "New York Event 2013";
            break;
        case 'NYCShaku2013':
            $msg['direct_mail_appeal'] = "Shaku - NYC Event 2013";
            break;
        case 'SF2013':
            $msg['direct_mail_appeal'] = "San Francisco Event 2013";
            break;
        case 'Mossman':
            $msg['direct_mail_appeal'] = "Sheila Mossman";
            break;
        case 'Mediander':
            $msg['direct_mail_appeal'] = "Mediander";
            break;
        default:
            $msg['direct_mail_appeal'] = $msg['utm_campaign'];
            break;
        }
    }

    $msg['anonymous'] = ((!empty( $msg['anonymous'] ) && strtoupper($msg['anonymous'] ) !== "FALSE") ? 1 : 0);
    $msg['optout'] = ((empty( $msg['optout'] ) || $msg['optout'] === 0 || $msg['optout'] === '0' || strtoupper( $msg['optout'] ) === "FALSE") ? 0 : 1);

    // set the correct amount fields/data and do exchange rate conversions.
    $msg = wmf_civicrm_normalize_contribution_amounts( $msg );

    watchdog( 'wmf_civicrm', 'Contribution (normalized):<pre>' . check_plain(print_r($msg, TRUE)) . '</pre>', NULL, WATCHDOG_INFO );

    return $msg;
}

/**
 * Insert the tag record
 * 
 * Serves as a standard way for message processors to handle tag
 * insertion.
 * 
 * @param array $contact
 * @return array
 */
function wmf_civicrm_tag_contact_for_review( $contact )
{
    require_once 'api/v2/EntityTag.php';

    $review_tag_id = wmf_civicrm_get_civi_id('tag_id', 'Review');

    $tag = array(
        'tag_id' => $review_tag_id,
        'contact_id' => $contact[ 'id' ]
    );
    $tag_result = civicrm_entity_tag_add( $tag );
    return $tag_result;
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the gateway
 * and gateway transaction id.
 * @param string $gateway
 * @param string $gateway_txn_id
 * @return mixed array of result rows, or false if none present.
 * @throws WmfException
 */
function wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id) {
    $gateway = strtolower( $gateway );
	$query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc 
		ON cc.id = cx.entity_id 
		WHERE gateway = %1 AND gateway_txn_id = %2";

    $dao = CRM_Core_DAO::executeQuery( $query, array(
        1 => array( $gateway, 'String' ),
        2 => array( $gateway_txn_id, 'String' ),
    ) );
	return wmf_civicrm_dao_to_list( $dao );
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the civicrm
 * contribution id.
 * @param string $contribution_id
 * @return mixed array of result rows, or false if none present.
 * @throws WmfException
 */
function wmf_civicrm_get_contributions_from_contribution_id($contribution_id) {
    $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE cc.id = %1";

    $dao = CRM_Core_DAO::executeQuery($query, array(
                1 => array($contribution_id, 'Integer'),
            ));
    return wmf_civicrm_dao_to_list($dao);
}

/**
 * Pulls all child contributions in the wmf_contribution_extras table that match
 * the gateway
 * and gateway transaction id.
 * @param string $gateway
 * @param string $gateway_txn_id
 * @return mixed array of result rows, or false if none present.
 * @throws WmfException
 */
function wmf_civicrm_get_child_contributions_from_gateway_id($gateway, $gateway_txn_id) {
    $gateway = strtolower( $gateway );
	$query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cxp 
		INNER JOIN wmf_contribution_extra cx ON cxp.entity_id = cx.parent_contribution_id 
		LEFT JOIN civicrm_contribution cc ON cc.id = cx.entity_id 
		WHERE cxp.gateway = %1 AND cxp.gateway_txn_id = %2";

    $dao = CRM_Core_DAO::executeQuery( $query, array(
        1 => array( $gateway, 'String' ),
        2 => array( $gateway_txn_id, 'String' ),
    ) );
	return wmf_civicrm_dao_to_list( $dao );
}


/**
 * Pulls all child contributions in the wmf_contribution_extras table that match
 * the civicrm contribution id.
 * @param string $contribution_id
 * @return mixed array of result rows, or false if none present.
 * @throws WmfException
 */
function wmf_civicrm_get_child_contributions_from_contribution_id($contribution_id) {
//    $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cxp
//		INNER JOIN wmf_contribution_extra cx ON cxp.entity_id = cx.parent_contribution_id
//		LEFT JOIN civicrm_contribution cc ON cc.id = cx.entity_id
//		WHERE cc.id = %1";

    $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cxp
		INNER JOIN wmf_contribution_extra cx ON cxp.entity_id = cx.parent_contribution_id
		LEFT JOIN civicrm_contribution cc ON cc.id = cx.entity_id
		WHERE cxp.entity_id = %1";

    $dao = CRM_Core_DAO::executeQuery($query, array(
                1 => array($contribution_id, 'Integer'),
    ));
    return wmf_civicrm_dao_to_list($dao);
}

function wmf_civicrm_boost_performance() {
    civicrm_initialize();
    $config = CRM_Core_Config::singleton();
    $config->doNotResetCache = 1;
}

function wmf_civicrm_set_no_thank_you( $contribution_id, $reason ) {
	watchdog( 'wmf_civicrm', "Preventing thank-you for contribution {$contribution_id} because: {$reason}", array(), WATCHDOG_INFO );

	try {
		wmf_civicrm_set_custom_field_values( $contribution_id, array(
			'no_thank_you' => $reason,
		) );
	} catch ( WmfException $ex ) {
		watchdog( 'wmf_civicrm', "Updating with no-thank-you failed with details: {$ex->getMessage()}", array(), WATCHDOG_ERROR );
	}
}

/**
 * Sets the civi records to reflect a contribution refund.
 *
 * The original contribution is set to status "Refunded", and a negative and
 * equal refund contribution is created.  This contribution will be linked
 * to the original through the parent_contribution_id field, and will have
 * status "Pending" unless the $refund_completed argument is true.
 * TODO: Default to refund_completed=true.
 *
 * $refund_type should be 'refund' or 'chargeback', for now we simply dump
 * this string into the "source" field of the negative contribution.
 *
 * If $refund_amount and $refund_currency are provided, they will be
 * checked against the original contribution and an exception thrown on a
 * mismatch.  If the original amount has been zeroed (legacy protocol) we will
 * reconstruct the contribution using the currency and amount from these
 * function parameters.
 *
 * @return integer the refund's contribution id.
 */
function wmf_civicrm_mark_refund(
    $contribution_id,
    $refund_type = 'refund',
    $refund_completed = false,
    $refund_date = null,
    $refund_gateway_txn_id = null,
    $refund_currency = null,
    $refund_amount = null
) {
    $api = civicrm_api_classapi();

    $success = $api->Contribution->Get( array(
        'id' => $contribution_id,
        'version' => 3,
    ) );
    if ( !$success ) {
        throw new WmfException( 'INVALID_MESSAGE', "Could not load contribution: $contribution_id, " . $api->errorMsg() );
    } elseif ( !$api->values() ) {
        throw new WmfException( 'INVALID_MESSAGE', "No such contribution: $contribution_id" );
    }
    $result = $api->values;
    $contribution = array_pop($result);

    // Look for existing refunds
    $query = "
SELECT id FROM wmf_contribution_extra
WHERE
    parent_contribution_id = %1";

    $dao = CRM_Core_DAO::executeQuery( $query, array(
        1 => array( $contribution_id, 'Integer' ),
    ) );
    if ( $dao->fetch() ) {
        throw new WmfException( 'DUPLICATE_CONTRIBUTION', "Contribution is already refunded: $contribution_id" );
    }

    // Look for existing refunds
    $query = "
SELECT id FROM wmf_contribution_extra
WHERE
    entity_id = %1 AND COALESCE(parent_contribution_id, 0)";

    $dao = CRM_Core_DAO::executeQuery( $query, array(
        1 => array( $contribution_id, 'Integer' ),
    ) );
    if ( $dao->fetch() ) {
        throw new WmfException( 'INVALID_MESSAGE', "Contribution to refund is itself a refund: $contribution_id" );
    }

    // Should we restore?
    if ( (floatval( $contribution->total_amount ) == 0
            || $contribution->contribution_source === "RFD")
        && $refund_currency !== null && $refund_amount !== null
    ) {
        //FIXME!: call this from the contribution save hook. $round parameter. 
        $contribution->total_amount = round( exchange_rate_convert(
            $refund_currency, $refund_amount,
            strtotime( $contribution->receive_date )
        ), 2 );

        $api->Contribution->Create( array(
            'id' => $contribution_id,

            'source' => "{$refund_currency} {$refund_amount}",
            'total_amount' => $contribution->total_amount,

            'version' => 3,
        ) );
    } else {
        // Deal with any discrepancies in the refunded amount.
        list( $original_currency, $original_amount ) = explode(" ", $contribution->contribution_source);

        if ( $refund_currency !== null ) {
            if ( $refund_currency != $original_currency ) {
                throw new WmfException( 'INVALID_MESSAGE', "Refund was in a different currency.  Freaking out." );
            }
        } else {
            $refund_currency = $original_currency;
        }

        if ( $refund_amount !== null ) {
            $amount_scammed = round( $refund_amount, 2 ) - round( $original_amount, 2 );
            if ( $amount_scammed > 0 ) {
                throw new WmfException( 'INVALID_MESSAGE', "The refunded amount was greater than the payment: $refund_currency $refund_amount > $original_amount" );
            } elseif ( $amount_scammed != 0 ) {
                // By accident or design, it turns out you don't quite get your
                // money back in the real world.  So don't trip.
                watchdog( 'wmf_civicrm', "Refunded ($refund_type) amount did not exactly match original contribution, ID=$contribution_id.  $refund_currency $refund_amount != $original_currency $original_amount", NULL, WATCHDOG_INFO );

                // TODO: Record the difference here, as a fee or something.
            }
        } else {
            $refund_amount = $original_amount;
        }
    }

    $transaction = WmfTransaction::from_unique_id( $contribution->trxn_id );
    if ( $refund_gateway_txn_id ) {
        $transaction->gateway_txn_id = $refund_gateway_txn_id;
    }
    $transaction->is_refund = true;
    $refund_unique_id = $transaction->get_unique_id();

    # FIXME: remove debug line,
    watchdog( 'wmf_civicrm', "Refund date: " . var_export( $refund_date, true ), NULL, WATCHDOG_INFO );

    if ( $refund_date === null ) {
        $refund_date = time();
    } elseif ( !is_numeric( $refund_date ) ) {
        $refund_date = strtotime( $refund_date );
    }

    $refund_status = ( $refund_completed ? 'Completed' : 'Pending' );
    $refund_params = array(
        'contact_id' => $contribution->contact_id,
        'total_amount' => 0 - $contribution->total_amount,
        'contribution_type_id' => wmf_civicrm_get_civi_id( 'contribution_type_id', $refund_type ),
        'receive_date' => wmf_common_date_unix_to_civicrm( $refund_date ),
        'contribution_status_id' => civicrm_api_contribution_status( $refund_status ),
        'contribution_source' => "$refund_currency -{$refund_amount}",
        'trxn_id' => $refund_unique_id,

        // API required fields
        'version' => '3'
    );
    if ( !$api->Contribution->Create($refund_params) ) {
        throw new WmfException( 'IMPORT_CONTRIB', "Failed to create refund contribution for: $contribution_id, " . $api->errorMsg() );
    }
    $result = $api->values;
    $refund = array_pop($result);

    $parent_custom_values = wmf_civicrm_contribution_get_custom_values( $contribution_id, array(
        'gateway_account',
    ) );

    // FIXME: race condition on no_thank_you
    $custom_values = array(
        'gateway_account' => $parent_custom_values['gateway_account'],
        'parent_contribution_id' => $contribution->id,
        'finance_only' => 1,
        'no_thank_you' => 'refund',
    );

    wmf_common_set_message_source( $custom_values, 'direct', 'Refund' );
    $custom_values['source_enqueued_time'] = wmf_common_date_unix_to_sql( $custom_values['source_enqueued_time'] );

    wmf_civicrm_set_custom_field_values($refund->id, $custom_values);

    $custom_values = array(
        'finance_only' => 1,
    );
    wmf_civicrm_set_custom_field_values($contribution->id, $custom_values);

    $update_params = array(
        'id' => $contribution->id,
        'contribution_status_id' => civicrm_api_contribution_status( 'Refunded' ),

        'version' => 3,
    );
    if ( !$api->Contribution->Create($update_params) ) {
        throw new WmfException( 'IMPORT_CONTRIB', "Cannot mark original contribution as refunded: $contribution_id, " . db_error() );
    }

    return $refund->id;
}

/**
 * Update civi records to track gateway status change events.
 *
 * If more recent information is in the database, ignore the event
 * unless it is a Refund.
 *
 * For refund events, mark the refund using our helper function.
 *
 * Raw gateway status is stored in a custom field.
 */
function wmf_civicrm_set_gateway_status( int $contribution_id, string $raw_status, string $normalized_status = null, int $timestamp = null )
{
    civicrm_initialize();

    if ( $normalized_status !== null ) {
        $contribution = new CRM_Contribute_BAO_Contribution();
        $contribution->id = $contribution_id;
        if ( !$contribution->find( true ) ) {
            throw new WmfException( 'INVALID_MESSAGE', "Contribution not found: $contribution_id" );
        }

        $status_id = civicrm_api_contribution_status( $normalized_status );
        if ( $status_id === null ) {
            watchdog('wmf_civicrm', "Normalized status does not exist: {$normalized_status}", array(), WATCHDOG_ERROR);
        }
    }

    // this is sort of audit-specific logic
    if ( $normalized_status === 'Refunded' ) {
        // We restore the old status id in case this refund action was less recent
        // than current info in the db.  If the data conditional below succeeds, we
        // set the status to 'refunded' again.
        $old_status_id = $contribution->contribution_status_id;
        try {
            wmf_civicrm_mark_refund( $contribution_id, 'chargeback', true );
        } catch ( WmfException $e ) {
            watchdog('wmf_civicrm', "Cannot create a refund for: {$contribution_id}", array(), WATCHDOG_ERROR);
        }
        $contribution->find( true );
        $contribution->contribution_status_id = $old_status_id;
        $contribution->save();
    }

    if ( $timestamp === null ) {
        $gateway_date = gmdate( 'YmdHis' );
    } else {
        $gateway_date = gmdate( 'YmdHis', $timestamp );
    }

    $original_custom_values = wmf_civicrm_contribution_get_custom_values( $contribution_id, array(
        'gateway_date',
    ) );
    $last_timestamp = strtotime( $original_custom_values['gateway_date'] );
    $last_gateway_date = wmf_common_date_unix_to_sql( $last_timestamp );

    if ( $last_gateway_date >= $gateway_date ) {
        watchdog('wmf_civicrm', "Not updating contribution, because a more recent gateway status change has been recorded: {$contribution_id}", array(), WATCHDOG_INFO);
        return;
    }

    $custom_values['gateway_date'] = $gateway_date;
    $custom_values['gateway_status_raw'] = $raw_status;
    wmf_civicrm_set_custom_field_values($contribution_id, $custom_values);

    if ( $normalized_status !== null ) {
        $contribution->contribution_status_id = $status_id;
    }
    $contribution->save();
}

/**
 * Dedupe helper.
 */
function wmf_civicrm_merge_contacts( $main_contact_id, $other_contact_id ) {
    $api = civicrm_api_classapi();

    $cidRefs = CRM_Dedupe_Merger::cidRefs();
    $eidRefs = CRM_Dedupe_Merger::eidRefs();
    $moveTables = array_merge( array_keys( $cidRefs ), array_keys( $eidRefs ) );

    CRM_Dedupe_Merger::moveContactBelongings( $main_contact_id, $other_contact_id, $moveTables );

    $api->Contact->delete( array(
        'contact_id' => $other_contact_id,
        'version' => 3
    ) );
}

/**
 * Implementation of hook_civicrm_merge
 */
function wmf_civicrm_civicrm_merge( $type, &$refs, $mainId, $otherId, $tables ) {
    switch ( $type ) {
    case 'cidRefs':
        // adds our custom tables, except for wmf_donor, which is recalculated
        $contact_types = array( "Contact" );
        $contact_types = array_merge( CRM_Contact_BAO_ContactType::basicTypes(), $contact_types );
        foreach ( $contact_types as &$type ) {
            $type = "'" . $type . "'";
        }
        $contact_types = implode( ", ", $contact_types );

        $sql = <<<EOS
SELECT table_name
FROM civicrm_custom_group
WHERE extends IN ( $contact_types )
AND table_name <> 'wmf_donor'
EOS;
        $dao = CRM_Core_DAO::executeQuery( $sql );
        while ( $dao->fetch() ) {
            $refs[ $dao->table_name ][] = 'entity_id';
        }
        break;
    case 'sqls':
        // After merging contribution data, update the wmf_donor columns
        // FRAGILE: This hook is called twice, first with $tables set while
        // moving related data, then with $tables unset.  We only want to
        // add the wmf_donor update SQL the second time we're called
        if ( $tables ) {
            break;
        }
        $refs[] = "INSERT INTO wmf_donor( entity_id, last_donation_date, lifetime_usd_total ) (
            SELECT contact_id, MAX(receive_date) AS last_donation_date, SUM(total_amount) AS lifetime_usd_total
            FROM civicrm_contribution
            WHERE contact_id = $mainId
            GROUP by contact_id
        ) ON DUPLICATE KEY UPDATE
            last_donation_date = VALUES(last_donation_date),
            lifetime_usd_total = VALUES(lifetime_usd_total)";

        $refs[] = "UPDATE wmf_donor w
        JOIN civicrm_contribution t
            ON t.contact_id = w.entity_id
            AND t.contact_id = $mainId
            AND t.receive_date = w.last_donation_date
        JOIN wmf_contribution_extra x
            ON x.entity_id = t.id
        SET w.last_donation_usd = t.total_amount,
            w.last_donation_amount = x.original_amount,
            w.last_donation_currency = x.original_currency";

        for ( $year = WMF_MIN_ROLLUP_YEAR; $year <= WMF_MAX_ROLLUP_YEAR; $year++ ) {
            $next_year = $year + 1;
            $refs[] = "UPDATE wmf_donor w
            JOIN civicrm_contribution t
                ON t.contact_id = w.entity_id
                AND t.contact_id = $mainId
                AND t.receive_date >= '$year-07-01'
                AND t.receive_date < '$next_year-07-01'
            SET w.is_{$year}_donor = 1";
        };

        // Set do_not_solicit on the merged contact if it was set on either
        // We're doing this here because we have explicitly ignored this table
        // during the rest of the merge.
        $refs[] = "UPDATE wmf_donor wnew
        JOIN wmf_donor wold
            ON wnew.entity_id = $mainId
            AND wold.entity_id = $otherId
        SET wnew.do_not_solicit =
            COALESCE( wold.do_not_solicit, 0 ) OR COALESCE( wnew.do_not_solicit, 0 )";
        // And finally delete the old wmf_donor record;
        $refs[] = "DELETE FROM wmf_donor WHERE entity_id = $otherId";
        break;
    }
}

/**
 * Implementation of hook_civicrm_post, used to update contribution_extra fields
 * and wmf_donor rollup fields.
 */
function wmf_civicrm_civicrm_post( $op, $type, $id, &$contribution ) {
	if ( $type !== 'Contribution' ) {
		return;
	}
    switch ( $op ) {
    case 'create':
    case 'edit':
		$extra = array();

		if ( $contribution->trxn_id ) {
			try {
				$transaction = WmfTransaction::from_unique_id( $contribution->trxn_id );
				$extra['gateway'] = strtolower( $transaction->gateway );
				$extra['gateway_txn_id'] = $transaction->gateway_txn_id;
			} catch ( WmfException $ex ) {
				watchdog( 'wmf_civicrm', "Failed to parse trxn_id: {$contribution->trxn_id}, " . $ex->getMessage() );
			}
		}

		if ( $contribution->source ) {
			list( $original_currency, $original_amount ) = explode( " ", $contribution->source );
			$extra['original_currency'] = $original_currency;
			$extra['original_amount'] = $original_amount;
		}

		if ( $extra ) {
			wmf_civicrm_set_custom_field_values( $id, $extra );
		}

		// If we're missing any of the data we need for wmf_donor, retrieve it
		// from the database.
		if( $contribution->contact_id
			&& $contribution->total_amount
			&& $contribution->receive_date ) {
			$receive_date = $contribution->receive_date;
			$contact_id = $contribution->contact_id;
			$total_amount = $contribution->total_amount;
		} else {
			$api = civicrm_api_classapi();
			$result = $api->Contribution->get( array(
				'id' => $contribution->id,
			) );
			if ( !$result || count( $api->values ) != 1) {
				// can't get the data, skip wmf_donor updates
				break;
			}
			$db_contribution = $api->values[0];
			$receive_date = $db_contribution->receive_date;
			$contact_id = $db_contribution->contact_id;
			$total_amount = $db_contribution->total_amount;
		} 

		// Update the wmf_donor data.  Set the is_YYYY_donor column to true
		// FIXME: if this is an edit, we should review all contributions
		$wmf_donor = array();
		$contribution_date = new DateTime( $receive_date );
		$fiscal_year = intval( $contribution_date->format( 'Y' ) );
		if ( intval( $contribution_date->format( 'm' ) ) < 7 ) {
			$fiscal_year = $fiscal_year - 1;
		}
		if ( $fiscal_year >= WMF_MIN_ROLLUP_YEAR && $fiscal_year <= WMF_MAX_ROLLUP_YEAR ) {
			$wmf_donor["is_{$fiscal_year}_donor"] = true;	
		}
		// Update the latest donation data.
		// If this is an edit, first check if it's the latest
		$latest = true;
		if ( $op === 'edit' ) {
			$sql = <<<EOS
SELECT id FROM civicrm_contribution
WHERE contact_id = {$contact_id}
AND receive_date > '{$contribution_date->format( 'Y-m-d H:i:s' )}'
LIMIT 1
EOS;
			$dao = CRM_Core_DAO::executeQuery( $sql );
			if ( $dao->fetch() ) {
				$latest = false;
			}
		}
		if ( $latest ) {
			$wmf_donor['last_donation_date'] = $contribution_date->format( 'YmdHis' );
			$wmf_donor['last_donation_usd'] = $total_amount;
			if ( isset( $extra['original_currency'] ) ) {
				$wmf_donor['last_donation_currency'] = $extra['original_currency'];
			}
			if ( isset( $extra['original_amount'] ) ) {	
			    $wmf_donor['last_donation_amount'] = $extra['original_amount'];
			}
		}
		// Get lifetime totals
		$sql = <<<EOS
SELECT SUM(total_amount) AS lifetime_usd_total
FROM civicrm_contribution
WHERE contact_id = {$contact_id}
EOS;
		$dao = CRM_Core_DAO::executeQuery( $sql );
		if ( $dao->fetch() ) {
			$wmf_donor['lifetime_usd_total'] = $dao->lifetime_usd_total;
		}
		if ( !empty( $wmf_donor ) ) {
			wmf_civicrm_set_custom_field_values(
				$contact_id,
				$wmf_donor,
				'wmf_donor'
			);
		}
        break;
    }
}

/**
 * Implementation of hook_civicrm_contactListQuery, this is short-circuiting
 * the normal quicksearch to workaround bad queries which take several minutes...
 * filesort...  This should be fixed upstream in this issue:
 *    http://issues.civicrm.org/jira/browse/CRM-12326
 */
function wmf_civicrm_civicrm_contactListQuery( &$query, $name, $context, $id ) {
    if (is_numeric($name)) {
        $query = <<<EOS
SELECT DISTINCT(id), data, sort_name, email
FROM
(
    (
        SELECT
            civicrm_contact.id,
            CONCAT_WS( ' :: ', CONCAT( 'Contact - ', sort_name ), email ) AS data,
            sort_name,
            email
        FROM civicrm_contact
        LEFT JOIN civicrm_email
			ON ( civicrm_email.contact_id = civicrm_contact.id AND civicrm_email.is_primary = 1 )
        WHERE
            civicrm_contact.id = {$name}
            AND civicrm_contact.is_deleted = 0
    ) UNION (
        SELECT
            civicrm_contact.id,
            CONCAT_WS( ' :: ', CONCAT( 'Contribution - ', sort_name ), email ) AS data,
            sort_name,
            email
        FROM civicrm_contribution
        JOIN civicrm_contact
            ON civicrm_contribution.contact_id = civicrm_contact.id
        LEFT JOIN civicrm_email
			ON ( civicrm_email.contact_id = civicrm_contribution.id AND civicrm_email.is_primary = 1 )
        WHERE
            civicrm_contribution.id = {$name}
            AND civicrm_contact.is_deleted = 0
    )
) AS t
LIMIT 0, 10
EOS;
    } else {
        $query = <<<EOS
SELECT DISTINCT(id), data, sort_name, email
FROM
(
    (
        SELECT
            civicrm_contact.id,
            CONCAT_WS( ' :: ', sort_name, email ) AS data,
            sort_name,
            email
        FROM civicrm_contact
        LEFT JOIN civicrm_email
			ON ( civicrm_email.contact_id = civicrm_contact.id AND civicrm_email.is_primary = 1 )
        WHERE
            civicrm_contact.sort_name LIKE '{$name}%'
            AND civicrm_contact.is_deleted = 0
    ) UNION (
        SELECT
            civicrm_contact.id,
            CONCAT_WS( ' :: ', sort_name, email ) AS data,
            sort_name,
            email
        FROM civicrm_email
        JOIN civicrm_contact
            ON civicrm_email.contact_id = civicrm_contact.id
        WHERE
            civicrm_email.email LIKE '{$name}%'
            AND civicrm_contact.is_deleted = 0
            AND civicrm_email.is_primary = 1
    )
) AS t
LIMIT 0, 10
EOS;
    }
}

/**
 * Get a grip on multiple database connections.
 *
 * @return db_switcher
 */
function wmf_civicrm_get_dbs() {
    return new db_switcher();
}

/**
 * Expand CiviCRM DAO results object into an array of rows as array
 *
 * @param $dao CRM_Core_DAO
 *
 * @return array
 */
function wmf_civicrm_dao_to_list( $dao ) {
    $result = array();
    while ($dao->fetch()) {
        $result[] = $dao->toArray();
    }
    // FIXME: pick wart
    if (empty($result)) {
        return false;
    }
    return $result;
}

/**
 * Implements hook_civicrm_buildForm
 */
function wmf_civicrm_civicrm_buildForm( $formName, &$form ) {
    switch ( $formName ) {
    case 'CRM_Contribute_Form_Contribution':
        // Only run this validation for users having the Engage role.
        if ( !wmf_civicrm_user_has_role( 'Engage Direct Mail' ) ) {
            break;
        }

        // Default to the Engage contribution type, if this is a new contribution.
        if ( $form->_action & CRM_Core_Action::ADD ) {
            $engage_contribution_type_id = wmf_civicrm_get_civi_id( 'contribution_type_id', 'Engage' );
            $form->setDefaults( array(
                'contribution_type_id' => $engage_contribution_type_id,
            ) );
        }

        // Make Batch Number required, if the field exists.
        $batch_num_field_name = wmf_civicrm_evil_get_custom_field_in_form( 'import_batch_number', $form->_elementIndex );
        if ( $batch_num_field_name ) {
            $form->addRule( $batch_num_field_name, t('Batch number is required'), 'required' );
        }
        break;
    }
}

/**
 * Implements hook_civicrm_validate
 */
function wmf_civicrm_civicrm_validate( $formName, &$fields, &$files, &$form ) {
    $errors = array();

    switch ( $formName ) {
    case 'CRM_Contribute_Form_Contribution':
        // Source has to be of the form USD 15.25 so as not to gum up the works
        $source = $fields['source'];
        if ( !preg_match( '/[a-z]{3} [0-9]+(\.[0-9]+)?/i', $source) ) {
            $errors['source'] = t('Source must be in the format USD 15.25');
        }

        // Only run the following validation for users having the Engage role.
        if ( !wmf_civicrm_user_has_role( 'Engage Direct Mail' ) ) {
            break;
        }

        $engage_contribution_type_id = wmf_civicrm_get_civi_id( 'contribution_type_id', 'Engage' );
        if ( $fields['contribution_type_id'] !== $engage_contribution_type_id ) {
            $errors['contribution_type_id'] = t("Must use the \"Engage\" contribution type.");
        }

        // Gift Source (sic field named "Campaign") is limited.
        $gift_source_field_name = wmf_civicrm_evil_get_custom_field_in_form( 'Campaign', $fields );
        if ( $gift_source_field_name ) {
            $allowed_sources = array(
                'Combined Federal Campaign',
                'Donor Advised Fund',
                'Matching Gift',
                'Payroll Deduction',
            );
            if ( !in_array( $fields[$gift_source_field_name], $allowed_sources ) ) {
                $errors[$gift_source_field_name] = t('Must choose a Gift Source from the following list: ') . implode( ', ', $allowed_sources );
            }
        }

        $postmark_field_name = wmf_civicrm_evil_get_custom_field_in_form( 'postmark_date', $fields );
        // If the receive_date is in Dec or Jan, make sure we have a postmark date,
        // to be generous to donors' tax stuff.
        $date = strptime( $fields['receive_date'], "%m/%d/%Y" );
        // n.b.: 0-based date spoiler.
        if ( $date['tm_mon'] == (12 - 1) || $date['tm_mon'] == (1 - 1) ) {
            // And the postmark date is missing
            if ( !$fields[$postmark_field_name] ) {
                $errors[$postmark_field_name] = t("You forgot the postmark date!");
            }
        }
        break;
    }

    return ( empty($errors) ? true : $errors );
}

/**
 * Return true if the user has this role
 *
 * @param string $role Name of the role
 *
 * @return bool
 */
function wmf_civicrm_user_has_role( $role ) {
    global $user;

    foreach ( $user->roles as $rid => $roleName ) {
        if ( $role === $roleName ) {
            return true;
        }
    }

    return false;
}

/**
 * @param string $name custom field name
 * @param array $fields k/v fields as they are passed to CiviCRM form hooks
 *
 * @return string evil mangled name, like "custom_21_123332"
 */
function wmf_civicrm_evil_get_custom_field_in_form( $name, $fields ) {
    $custom_field_stump = wmf_civicrm_get_custom_field_name( $name ) . '_';
    foreach ( $fields as $key => $value ) {
        if ( 0 === strpos( $key, $custom_field_stump ) ) {
            return $key;
        }
    }
    watchdog( 'wmf_civicrm', 'Form is missing your precious custom field.', NULL, WATCHDOG_ERROR );
    return null;
}

/**
 * Split a full name into first and last
 *
 * Splits at the first space, cos we currently want the first name for emails,
 * so we err on the side of not pulling in middle names.
 *
 * TODO: this is always a bad idea, there is no correct way to split names.
 * Rework any templates or code that assumes a binomial.
 *
 * @param string $full_name
 *
 * @return array [first_name, last_name]
 */
function wmf_civicrm_janky_split_name( $full_name ) {
    $names = preg_split( '/\s+/', $full_name, 2 );
    if ( count( $names ) == 1 ) {
        $names[] = '';
    }
    return $names;
}

/**
 * Recalculates USD amounts of contributions between $start and $end
 * based on exchange rates in our database.  Useful if you spent three months
 * not retrieving the latest exchange rates.
 *
 * @param DateTime $start the date from which to start recalculation
 * @param DateTime $end the cutoff date
 * @param int $batch_size number of contributions to recalculate at once
 */
function wmf_civicrm_recalculate_contributions( $start, $end, $batch_size = 1000 ) {
	$api = civicrm_api_classapi();
	$query = "SELECT c.id, c.receive_date, c.total_amount, c.fee_amount,
c.net_amount, e.original_amount, e.original_currency
FROM civicrm_contribution c
JOIN wmf_contribution_extra e on e.entity_id = c.id
WHERE c.receive_date > %1
AND c.receive_date <= %2
AND c.id > %3
AND e.original_currency <> 'USD'
ORDER BY c.id ASC
LIMIT %4";
	$last_id = 0;
	while ( true ) {
		$dao = CRM_Core_DAO::executeQuery( $query, array(
			1 => array( $start->format( 'Ymd' ), 'Date' ),
			2 => array( $end->format( 'Ymd' ), 'Date' ),
			3 => array( $last_id, 'Integer' ),
			4 => array( $batch_size, 'Integer' )
		) );
		$batch = wmf_civicrm_dao_to_list( $dao );
		if ( empty( $batch ) ) {
			break;
		}

		foreach ( $batch as $contribution ) {
			$id = $contribution['id'];
			$original_amount = $contribution['original_amount'];
			$currency = $contribution['original_currency'];
			$total_amount = $contribution['total_amount'];

			if ( $id > $last_id ) {
				$last_id = $id;
			}

			if ( $original_amount == 0 || $total_amount == 0 ) {
				watchdog( 'recalculate_contributions', "Not recalculating contribution $id with zero original or total amount", null, WATCHDOG_DEBUG );
				continue;
			}
			if ( !preg_match( '/^[a-z][a-z][a-z]$/i', $currency ) ) {
				watchdog( 'recalculate_contributions', "Not recalculating contribution $id with nonsense currency $currency", null, WATCHDOG_DEBUG );
				continue;
			}

			// Approximate rate we originally used so we can correct the fee & net.
			$rate_used = $total_amount / $original_amount;
			try {
				$correct_rate = exchange_rate_convert( $currency, 1, strtotime( $contribution['receive_date'] ) );
			}
			catch ( ExchangeRatesException $ex ) {
				watchdog( 'recalculate_contributions', "Not recalculating contribution $id.  Cannot find rate for currency $currency", null, WATCHDOG_DEBUG );
				continue;
			}
			$recalculated_total = round( $correct_rate * $original_amount, 2 );
			$recalculated_fee = round( $contribution['fee_amount'] / $rate_used * $correct_rate, 2 );
			$recalculated_net = $recalculated_total - $recalculated_fee;

			$params = array(
				'id' => $contribution['id'],
				'total_amount' => $recalculated_total,
				'fee_amount' => $recalculated_fee,
				'net_amount' => $recalculated_net
			);

			watchdog(
				'recalculate_contributions',
				"Recalculating contribution $id, received on {$contribution['receive_date']}. " .
				"Original_amount: $original_amount, original_currency: $currency, " .
				"old total_amount: $total_amount, old fee_amount: {$contribution['fee_amount']}, " .
				"old net_amount: {$contribution['net_amount']}.  " .
				"New total_amount: $recalculated_total, new fee_amount: $recalculated_fee, " .
				"new net_amount: $recalculated_net.",
				null,
				WATCHDOG_DEBUG
			);

			if ( !$api->Contribution->Create( $params ) ) {
				throw new WmfException( 'recalculate_contributions', "Failed to update USD amount of contribution: $id, " . db_error() );
			}
		}
	}
}
