<?php
use SmashPig\Core\DataStores\QueueWrapper;

// include common functions
require_once(drupal_get_path('module', 'recurring_globalcollect') . '/recurring_globalcollect_common.inc');

/**
 * Implementation of hook_menu().
 */
function recurring_globalcollect_menu() {
  $items = [];

  $items['admin/config/recurring_globalcollect'] = [
    'title' => 'Recurring GlobalCollect Processor',
    'access arguments' => ['administer recurring_globalcollect'],
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => ['administer contribution_audit'],
  ];

  $items['admin/config/recurring_globalcollect/configure'] = [
    'title' => 'Configure',
    'access arguments' => ['administer recurring_globalcollect'],
    'description' => 'Configure message queue interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['recurring_globalcollect_settings'],
  ];

  $items['admin/config/recurring_globalcollect/search'] = [
    'title' => 'Search',
    'access arguments' => ['administer recurring_globalcollect'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['recurring_globalcollect_search_by_order_id_form'],
  ];

  $items['admin/config/recurring_globalcollect/test'] = [
    'title' => 'Test',
    'access arguments' => ['administer recurring_globalcollect'],
    'page callback' => 'recurring_globalcollect_test',
  ];

  return $items;
}

function recurring_globalcollect_test() {

  $return = 'No testing available at this time.';
  return $return;
}

/**
 * Implementation of hook_permission().
 */
function recurring_globalcollect_permission() {
  return [
    'administer recurring_globalcollect' => [
      'title' => t('Administer Recurring GlobalCollect'),
    ],
  ];
}

/**
 * Callback for menu path "admin/config/recurring_globalcollect".
 */
function recurring_globalcollect_settings() {
  $form = [];

  $defaultTestUrl = buildDefaultTestUrl();

  $form['recurring_globalcollect']['globalcollect_url'] = [
    '#maxlength' => 255,
    '#type' => 'textfield',
    '#title' => t('Global Collect Url'),
    '#required' => FALSE,
    '#default_value' => variable_get('globalcollect_url', $defaultTestUrl),
    '#description' => t('The url to the Global Collect Gateway.'),
  ];

  $form['recurring_globalcollect_merchant_id'] = [
    '#type' => 'textfield',
    '#title' => t('Global Collect Merchant ID'),
    '#required' => FALSE,
    '#default_value' => variable_get('recurring_globalcollect_merchant_id', 0),
  ];

  $form['recurring_globalcollect_failure_retry_rate'] = [
    '#type' => 'textfield',
    '#title' => t('Failure retry rate'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failure_retry_rate', 1),
    '#description' => t('Enter the number of days to wait until retrying.'),
  ];

  $form['recurring_globalcollect_failures_before_cancellation'] = [
    '#type' => 'textfield',
    '#title' => t('Failures before subscription is cancelled'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failures_before_cancellation', 3),
    '#description' => t('Enter the number of attempts to wait until the subscription is cancelled..'),
  ];

  $form['recurring_globalcollect_run_missed_days'] = [
    '#type' => 'textfield',
    '#title' => t('Catch up missed days'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_run_missed_days', 3),
    '#description' => t('Enter the number of days in the past to start batching payments that were missed in the past X days.'),
  ];

  $form['recurring_globalcollect_batch_max'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum number of payments to batch'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch_max', 100),
    '#description' => t('The maximum batch size cannot be overridden from drush.'),
  ];

  $form['recurring_globalcollect_batch'] = [
    '#type' => 'select',
    '#title' => t('Number of payments to process in the cron job. If set to 0, the cron job will do nothing.'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch', 0),
    '#description' => t('This may be overridden with: `drush rg --batch=10`'),
    '#options' => [
      0 => 0,
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
    ],
  ];

  return system_settings_form($form);
}

/**
 * Turn off fraud checking for this run.  We've already validated the donor to
 * some degree when starting the subscription.
 */
function recurring_globalcollect_disable_fraud_checks() {
  global $wgDonationInterfaceEnableCustomFilters,
         $wgDonationInterfaceEnableMinfraud,
         $wgDonationInterfaceEnableReferrerFilter,
         $wgDonationInterfaceEnableSourceFilter,
         $wgDonationInterfaceEnableIPVelocityFilter,
         $wgDonationInterfaceEnableSessionVelocityFilter;

  $wgDonationInterfaceEnableCustomFilters = FALSE;
  $wgDonationInterfaceEnableMinfraud = FALSE;
  $wgDonationInterfaceEnableReferrerFilter = FALSE;
  $wgDonationInterfaceEnableSourceFilter = FALSE;
  $wgDonationInterfaceEnableIPVelocityFilter = FALSE;
  $wgDonationInterfaceEnableSessionVelocityFilter = FALSE;
}

/**
 * recurring_globalcollect_batch_process
 *
 * This is the entry function for this module.
 *
 * This function is invoked here: drush_recurring_globalcollect()
 *
 * @see drush_recurring_globalcollect()
 *
 * Validation is performed here: drush_recurring_globalcollect_validate()
 * @see drush_recurring_globalcollect_validate()
 *
 * @param array $options
 * - $options['batch'] The number of contributions to process. If empty or not
 *   set or zero, no contributions will be processed.
 * - $options['date'] @uses strtotime()
 * - $options['url'] Used for testing and overriding the url
 */
function recurring_globalcollect_batch_process($options = []) {

  recurring_globalcollect_disable_fraud_checks();

  // The number of contributions to process
  if (array_key_exists('batch', $options)) {
    $batch = intval($options['batch']);
  }
  else {
    $batch = intval(variable_get('recurring_globalcollect_batch', 0));
  }

  $run_missed_days = (integer) variable_get('recurring_globalcollect_run_missed_days', 0);

  watchdog('recurring_globalcollect', 'Attempting to process up to ' . $batch . ' recurring contribution(s).');

  $contribution_batch = wmf_civicrm_get_next_sched_contribution($batch, 'now', $run_missed_days);
  watchdog(
    'recurring_globalcollect',
    'Query returned @count messages to process',
    ['@count' => count($contribution_batch)]
  );
  $result = recurring_globalcollect_batch_charge($contribution_batch, $options);

  $processed = count($result['succeeded']) + count($result['failed']);
  if ($processed > 0) {
    $message = "Processed $processed contribution(s).";
    if ($result['failed']) {
      $message .= " Encountered " . count($result['failed']) . " failures.";
    }
    watchdog('recurring_globalcollect', $message);
  }
  else {
    watchdog('recurring_globalcollect', 'No contributions processed.');
  }

  // Process retries
  watchdog('recurring_globalcollect', 'Attempting to retry up to ' . $batch . ' previously failed contribution(s).');
  $retry_batch = recurring_globalcollect_get_failure_retry_batch($batch, 'now', $run_missed_days);
  watchdog(
    'recurring_globalcollect',
    'Query returned @count messages to process',
    ['@count' => count($retry_batch)]
  );
  $result = recurring_globalcollect_batch_charge($retry_batch, $options);

  $processed = count($result['succeeded']) + count($result['failed']);
  if ($processed > 0) {
    $message = "Retried $processed contribution(s).";
    if ($result['failed']) {
      $message .= " Encountered " . count($result['failed']) . " failures.";
    }
    watchdog('recurring_globalcollect', $message);
  }
  else {
    watchdog('recurring_globalcollect', 'No retries processed.');
  }
}

/**
 * Remove one item from the queue and process it.
 *
 * @param  array $options
 *
 * $options:
 * - string  $date The date to process.
 *
 * You are not allowed to process future dates. This generates an error
 *
 * $options['date'] @uses strtotime()
 *
 * The default date to process is today.
 *
 * The default process is next_sched_contribution.
 *
 * If you pick an incorrect process, an error will be generated.
 *
 * @uses recurring_globalcollect_process_error()
 * @uses recurring_globalcollect_process_validate_options()
 *
 * @return  boolean  Returns false on error. Returns true if contributions were
 *   processed. Returns false if no contributions are ready to be processed.
 */
function recurring_globalcollect_batch_charge($contribution_batch, $options = []) {
  $succeeded = [];
  $failed = [];
  foreach ($contribution_batch as $contribution_recur) {
    try {
      recurring_globalcollect_charge($contribution_recur->id, $options);
      $succeeded[] = $contribution_recur;
    } catch (WmfException $e) {
      $failed[] = $contribution_recur;
      if (!$e->isNoEmail()) {
        wmf_common_failmail('recurring_globalcollect', '', $e, $contribution_recur);
      }
      if ($e->isFatal()) {
        break;
      }
    } catch (Exception $e) {
      $message = 'Batch processing aborted: ' . $e->getMessage();
      $e = new WmfException(WmfException::UNKNOWN, $message, ['contribution_recur' => $contribution_recur]);
      $failed[] = $contribution_recur;
      break;
    }
  }

  return [
    'succeeded' => $succeeded,
    'failed' => $failed,
  ];
}

/**
 * Connect to GlobalCollect and process recurring charge
 *
 * @param int $contribution_recur_id
 * @param array $options Accepts the following optional keys:
 *      contribution_tags - array of tags to associate with the contribution
 *
 * @throws WmfException if the payment fails or any other error occurs.
 */
function recurring_globalcollect_charge($contribution_recur_id, $options = []) {
  watchdog('recurring_globalcollect', "Processing recurring charge: {$contribution_recur_id}");

  $gotLock = _recurring_globalcollect_update_record_to_processing($contribution_recur_id);
  if (!$gotLock) {
    $message = t('Failed to mark record as processing');
    throw new WmfException(WmfException::CIVI_CONFIG, $message);
  }

  $subscription = (array) recurring_globalcollect_get_payment_by_id($contribution_recur_id);
  $transaction = WmfTransaction::from_unique_id($subscription['trxn_id']);
  $contribution_tracking_id = recurring_get_contribution_tracking_id([
    'txn_type' => 'subscr_payment',
    'subscr_id' => $subscription['trxn_id'],
    'payment_date' => strtotime("now"),
  ]);
  $values = [
    'amount' => $subscription['amount'],
    'effort_id' => $subscription['processor_id'] + 1,
    'order_id' => $transaction->gateway_txn_id,
    'currency' => $subscription['currency'],
    'payment_product' => '',
    'language' => 'en',
    'contribution_tracking_id' => $contribution_tracking_id,
    // Avoiding some more code.
    'referrer' => 'dummy',
  ];
  $adapter = DonationInterfaceFactory::createAdapter('globalcollect', $values);

  // FIXME hack.  This is getting overriden by sad.
  $adapter->addRequestData([
    'effort_id' => $subscription['processor_id'] + 1,
  ]);

  $transactionResponse = $adapter->do_transaction('Recurring_Charge');
  $result = PaymentResult::fromResults(
    $transactionResponse,
    $adapter->getFinalStatus()
  );

  if ($result->isFailed() || $result->getErrors()) {
    _recurring_globalcollect_update_record_failure($contribution_recur_id, $result->getErrors());
    throw new WmfException(WmfException::PAYMENT_FAILED, 'recurring charge failed', ['payment_result' => $result]);
  }

  // If success, add a record to the contribution table and send a thank you email.
  // Mark this donation as successful, and reschedule it for next month
  // This is done before anything else, otherwise any errors that occur while storing the contribution
  // record in civi might cause this subscription to end up in a weird state and not recur correctly.
  // If storing the donation in civi fails, that's not a big deal, we'll get the data eventually
  // by reconciling the data we get from the payment processor.
  _recurring_globalcollect_update_record_success($contribution_recur_id);

  $msg = recurring_globalcollect_create_message($contribution_recur_id);

  if (in_array('RecurringRestarted', $msg['contribution_tags'])) {
    // If we just added a 'RecurringRestarted' tag to the contribution, it's
    // because the recur record had a RecurringRestartedUncharged tag on it.
    // That tag has done its job and can now be removed.
    $recurTagId = civicrm_api3('Tag', 'getvalue', array(
      'name' => 'RecurringRestartedUncharged',
      'used_for' => 'civicrm_contribution_recur',
      'return' => 'id'
    ));
    civicrm_api3('EntityTag', 'delete', array(
      'tag_id' => $recurTagId,
      'entity_id' => $contribution_recur_id,
      'entity_table' => 'civicrm_contribution_recur'
    ));
  }
  QueueWrapper::push('donations', $msg);
}

/**
 * Create and return a message which is a payment on the given subscription
 *
 * @param int $contribution_recur_id Civi subscription record ID
 *
 * @return array queue message for a new payment
 */
function recurring_globalcollect_create_message($contribution_recur_id) {
  $contribution_recur = (array) recurring_globalcollect_get_payment_by_id($contribution_recur_id);
  $initial_contribution = wmf_civicrm_get_initial_recurring_contribution($contribution_recur_id);
  $recur_tags = wmf_civicrm_get_tag_names($contribution_recur_id, 'civicrm_contribution_recur');
  if (in_array('RecurringRestartedUncharged', $recur_tags)) {
    $contributionTags = ['RecurringRestarted'];
  } else {
    $contributionTags = [];
  }
  if (!$initial_contribution) {
    throw new WmfException(WmfException::INVALID_RECURRING, "No initial contribution for this subscription");
  }

  try {
    $transaction = WmfTransaction::from_unique_id($contribution_recur['trxn_id']);
  } catch (Exception $ex) {
    throw new WmfException(WmfException::INVALID_RECURRING, $ex->getMessage(), ['contribution_recur' => $contribution_recur]);
  }

  $msg = [
    // Copy stuff from the subscription, and increment the EFFORTID
    'amount' => $contribution_recur['amount'],
    'contact_id' => $contribution_recur['contact_id'],
    // FIXME: should use 'installments' column, not processor_id
    'effort_id' => $contribution_recur['processor_id'],
    'order_id' => $transaction->gateway_txn_id,
    'currency_code' => $contribution_recur['currency'],
    'payment_product' => '',
    'financial_type_id' => $initial_contribution['financial_type_id'],
    // Setting both until we are sure contribution_type_id is not being used anywhere.
    'contribution_type_id' => $initial_contribution['financial_type_id'],
    'payment_instrument_id' => $initial_contribution['payment_instrument_id'],
    'gateway' => 'globalcollect',
    'gross' => $contribution_recur['amount'],
    'currency' => $contribution_recur['currency'],
    'gateway_txn_id' => $transaction->gateway_txn_id . '-' . $contribution_recur['processor_id'],
    'payment_method' => 'cc',
    'payment_submethod' => '',
    'date' => time(),
    'contribution_tags' => $contributionTags,
    'contribution_recur_id' => $contribution_recur['id'],
    'recurring' => TRUE,

    //FIXME: ignored cos we already have a contact
    'email' => 'nobody@wikimedia.org',
  ];
  return $msg;
}

/**
 * Create the form to search for subscriptions by order id.
 * TODO: deprecate
 */
function recurring_globalcollect_search_by_order_id_form() {

  $form['submit'] = [
    '#value' => 'Search by order id',
    '#type' => 'submit',
  ];

  $form['order_id'] = [
    '#type' => 'textfield',
    '#title' => 'Order id',
    '#default_value' => '',
    '#required' => TRUE,
  ];

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 * Submits a form to search for subscriptions by order id.
 */
function recurring_globalcollect_search_by_order_id_form_submit($form, &$form_state) {

  $order_id = isset($form_state['values']['order_id']) ? (integer) $form_state['values']['order_id'] : 0;

  $record = _recurring_globalcollect_get_subscription_by_order_id($order_id);

  if ($record === FALSE) {

    $message = 'No results found.';

  }
  else {
    $display_name = isset($record['display_name']) ? $record['display_name'] : 'Unknown donor';
    $trxn_id = isset($record['trxn_id']) ? $record['trxn_id'] : '';
    $cid = isset($record['contact_id']) ? $record['contact_id'] : '';

    // Create a link to the recurring contribution for the donor.
    $link = '<a href="?q=civicrm/contact/view&reset=1&selectedChild=contribute&cid=' . urlencode($cid) . '#Contributions">' . htmlspecialchars($display_name) . '</a>';
    $message = 'Found the contact [' . $link . '] for the order id [ ' . $order_id . ' ] and with the transaction id [ ' . htmlspecialchars($trxn_id) . ' ]';
  }

  drupal_set_message($message);
}

/**
 * Are there any recurring contributions with next_dates that are dubious.
 *
 * The next date, for monthly contributions, should be one month after
 * the last payment, give or take a couple of days for month length weirdness.
 *
 * We also accept it if it is more than 28 days ahead - this could happen
 * if we are waiting for the audit file to fill in the gaps.
 *
 * If there are we might not want to run the charges until we have checked them
 * out.
 *
 * Only check 2016+ transactions (since those are currently clean) and
 * exclude Coinbase (not currently clean).
 *
 * @return bool
 */
function is_found_globalcollect_invalid_next_sched_dates() {
  $query = "
  SELECT count(*) FROM (
    SELECT
    DATEDIFF(DATE_ADD(DATE(max(receive_date) ), INTERVAL 1 month) , DATE(next_sched_contribution_date)) as date_diff
    FROM civicrm_contribution_recur cr
    LEFT JOIN civicrm_contribution c  on c.contribution_recur_id = cr.id
    WHERE end_date IS NULL
    AND cr.contribution_status_id NOT IN (3, 4, 15)
    AND c.trxn_id LIKE 'RECURRING GLOBALCOLLECT%'
    AND next_sched_contribution_date > '2016-01-01'
    AND frequency_unit = 'month' AND frequency_interval = 1
    GROUP BY cr.id DESC
   ) as inn
  WHERE date_diff NOT BETWEEN -5 AND 5 AND date_diff > -28
 ";

  $count = CRM_Core_DAO::singleValueQuery($query);
  return !empty($count);
}
