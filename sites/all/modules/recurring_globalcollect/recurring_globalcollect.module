<?php
// include common functions
require_once( drupal_get_path( 'module', 'recurring_globalcollect' ) . '/recurring_globalcollect_common.inc' );

/**
 * Implementation of hook_menu().
 */
function recurring_globalcollect_menu() {
  $items = array();
  
  $items['admin/config/recurring_globalcollect'] = array(
    'title' => 'Recurring GlobalCollect Processor',
    'access arguments' => array('administer recurring_globalcollect'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer contribution_audit'),
  );

  $items['admin/config/recurring_globalcollect/configure'] = array(
    'title' => 'Configure',
    'access arguments' => array('administer recurring_globalcollect'),
    'description' => 'Configure message queue interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recurring_globalcollect_settings'),
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function recurring_globalcollect_permission() {
  return array(
    'administer recurring_globalcollect' => array(
      'title' => t('Administer Recurring GlobalCollect'),
    ),
  );
}

/**
 * Callback for menu path "admin/config/recurring_globalcollect".
 */
function recurring_globalcollect_settings() {
  $form = array();

  $form[ 'recurring_globalcollect' ][ 'globalcollect_url' ] = array(
    '#maxlength' => 255,
    '#type' => 'textfield',
    '#title' => t('Global Collect Url'),
    '#required' => FALSE,
    '#default_value' => variable_get('globalcollect_url', 'https://localhost.net/'),
    '#description' => t( 'The url to the Global Collect Gateway.' ),
  );

  $form[ 'recurring_globalcollect' ][ 'localhost_test_url' ] = array(
    '#maxlength' => 255,
    '#type' => 'textfield',
    '#title' => t('Default Testing Url'),
    '#required' => FALSE,
    '#default_value' => variable_get('localhost_test_url', 'https://localhost.net/'),
    '#description' => t( 'The url to the local server to test the connection. This should point to your CiviCRM host.' ),
  );
  
  // Get the path of the file to make sure it is installed.
  $standalone_globalcollect_adapter_path = variable_get('standalone_globalcollect_adapter_path', null);

  // Flag to tell the user to install the library
  $standalone_globalcollect_adapter_installed = is_dir( $standalone_globalcollect_adapter_path ) ? '<span style="color:green;">Installed</span>' : '<span style="color:red;">Please install</span>';

  $form['standalone_globalcollect_adapter_path'] = array(
    '#type' => 'textfield',
    '#title' => t('StandaloneGlobalCollectAdapter Path'),
    '#required' => TRUE,
    '#default_value' => $standalone_globalcollect_adapter_path,
    '#description' => t($standalone_globalcollect_adapter_installed . ' Link: ') . l(t('Current version of payment_library'), "https://svn.wikimedia.org/viewvc/wikimedia/trunk/fundraising-misc/payment_library/"),
  );

  $form['recurring_globalcollect_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Global Collect Merchant ID'),
    '#required' => FALSE,
    '#default_value' => variable_get('recurring_globalcollect_merchant_id', 0),
  );

  $form['recurring_globalcollect_failure_retry_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure retry rate'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failure_retry_rate', 1),
    '#description' => t('Enter the number of days to wait until retrying.'),
  );

  $form['recurring_globalcollect_failures_before_cancellation'] = array(
    '#type' => 'textfield',
    '#title' => t('Failures before subscription is cancelled'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failures_before_cancellation', 3),
    '#description' => t('Enter the number of attempts to wait until the subscription is cancelled..'),
  );

  $form['recurring_globalcollect_run_missed_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Catch up missed days'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_run_missed_days', 3),
    '#description' => t('Enter the number of days in the past to start batching payments that were missed in the past X days.'),
  );

  $form['recurring_globalcollect_batch_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of payments to batch'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch_max', 100),
    '#description' => t('The maximum batch size cannot be overridden from drush.'),
  );

  $form['recurring_globalcollect_batch'] = array(
    '#type' => 'select',
    '#title' => t('Number of payments to process in the cron job. If set to 0, the cron job will do nothing.'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch', 0),
    '#description' => t('This may be overridden with: `drush rg --batch=10`'),
    '#options' => array(
      0 => 0,
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
    ),
  );
  
  return system_settings_form($form);
}
