<?php

require_once 'offline2civicrm.common.inc';

use wmf_communication\Templating;

/**
 * Implementation of hook_menu().
 */
function offline2civicrm_menu() {
  $items = array();

  $items['admin/config/offline2civicrm'] = array(
    'title' => 'Offline to CiviCRM',
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  /*
  TODO
  $items['admin/config/offline2civicrm/settings'] = array(
    'title' => 'Offline to CiviCRM',
    'description' => t('Configure offline import interface.'),
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_settings'),
  );
  */

  $items['admin/import_checks'] = array(
    'title' => 'Import Checks',
    'access arguments' => array('offline2civicrm bulk import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_import_checks_form'),
  );

  $items['import_output'] = array(
    'title' => 'Import Output',
    'access arguments' => array('offline2civicrm bulk import'),
    'page callback' => 'offline2civicrm_download_csv',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function offline2civicrm_permission() {
  return array(
    'administer offline2civicrm' => array(
      'title' => t("Administer offline2civicrm"),
    ),
    'offline2civicrm bulk import' => array(
      'title' => t("Import batch files with offline2civicrm"),
    ),
  );
}

/**
 * Callback for menu path "admin/config/offline2civicrm".
 */
function offline2civicrm_settings() {
  $form = array();

  return system_settings_form($form);
}

function offline2civicrm_import_checks_form($form, &$form_state) {
  $dir = drupal_get_path('module', 'offline2civicrm');
  drupal_add_js($dir . '/upload_form.js');

  $log_events = ChecksImportLog::recentEvents();
  $headers = array('Time', 'Who', 'Done');
  $rows = array();
  foreach ($log_events as $event) {
    $rows[] = array(
      $event->time,
      $event->who,
      $event->done,
    );
  }
  $log_html = theme_table(array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => "No events yet.",
      'attributes' => array(),
      'caption' => t('Latest import events'),
      'colgroups' => array(),
      'sticky' => TRUE,
    )) . theme('pager');
  $form['#tree'] = TRUE;
  $form['#validate'] = array('offline2civicrm_import_checks_form_validate');

  $form['import_upload_file'] = array(
    '#title' => t('Upload checks file'),
    '#type' => 'file',
  );
  $form['import_upload_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  // Will be replaced by import specific fields.
  $form['offline2civicrm_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Import specific fields',
    '#prefix' => '<div id="offline2civicrm_settings">',
    '#suffix' => '</div>',
  );
  if (isset($form_state['values'])) {
    $form['offline2civicrm_settings'] = array_merge($form['offline2civicrm_settings'], offline2civicrm_import_fields($form, $form_state));
  }

  $form['offline2civicrm_settings']['import_upload_format'] = array(
    '#title' => t('File format'),
    '#type' => 'radios',
    '#default_value' => 'generic_ind',
    '#options' => array(
      'benevity' => t('Benevity'),
      'citibank' => t('Citibank'),
      'engage' => t('Engage'),
      'coinbase' => t('Coinbase Merchant Orders'),
      'foreign_checks' => t('Foreign Checks'),
      'generic_ind' => t('Generic Individuals'),
      'generic_org' => t('Generic Organizations'),
      'jpmorgan' => t('JP Morgan'),
      'paypal' => t('PayPal EFT'),
      'square' => t('Square'),
      'stripe' => t('Stripe'),
      'trilogy' => t('Trilogy'),
    ),
    '#ajax' => array(
      'callback' => 'offline2civicrm_import_ajax',
      'wrapper' => 'offline2civicrm_settings',
      'method' => 'replace',
      'event' => 'change',
    ),
  );

  $form['log'] = array(
    '#markup' => $log_html,
  );

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  return $form;
}

/**
 * Custom callback to build form fields.
 */
function offline2civicrm_import_ajax($form, &$form_state) {
  return $form['offline2civicrm_settings'];
}

/**
 * Custom callback to build form fields.
 */
function offline2civicrm_import_fields($form, &$form_state) {
  $values = $form_state['values'];
  $importer = offline2civicrm_get_importer_class($values['offline2civicrm_settings']['import_upload_format'], NULL);
  return $importer->getImportFields();
}

/**
 * Download a results csv.
 *
 * @param $file_name
 */
function offline2civicrm_download_csv($file_name) {
  global $user;
  if (!preg_match('/\.' . $user->uid . '$/', $file_name)) {
    return drupal_access_denied();
  }
  $fileURI = 'temporary://' . $file_name . '.csv';
  if ($file_name && file_exists($fileURI)) {
    file_transfer($fileURI, array(
      'Content-Type' => 'text/csv',
      'Content-Disposition' => 'attachment; filename="' . $file_name . '.csv"',
    ));
  }
  else {
    return drupal_access_denied();
  }
}

/**
 * Validate form input.
 * @param $form
 * @param $form_state
 */
function offline2civicrm_import_checks_form_validate($form, $form_state) {
  $additionalFields = offline2civicrm_get_gateway_specific_fields($form_state);
  $importer = offline2civicrm_get_importer_class($form_state['values']['offline2civicrm_settings']['import_upload_format'], '', $additionalFields);
  try {
    $importer->validateFormFields($additionalFields);
  }
  catch (Exception $e) {
    form_set_error(t('Invalid form data'), $e->getMessage());
  }
}

function offline2civicrm_import_checks_form_submit($form, $form_state) {
  wmf_common_create_smashpig_context('offline2civicrm');
  if (!empty($form_state['values']['import_upload_submit'])) {
    try {
      $validators = array(
        'file_validate_extensions' => array('csv'),
      );
      $file = file_save_upload('import_upload_file', $validators);
      if (!$file) {
        throw new Exception(t("Form upload failed!"));
      }

      // This workaround... does not always work.  Will be deprecated in Civi 4.3
      civicrm_initialize();
      $smellyTmp = CRM_Core_TemporaryErrorScope::useException();
      $additionalFields = offline2civicrm_get_gateway_specific_fields($form_state);

      $importer = offline2civicrm_get_importer_class($form_state['values']['offline2civicrm_settings']['import_upload_format'], $file->uri, $additionalFields);
      $messages = $importer->import();
      drupal_set_message((implode(' ', $messages)));
    }
    catch (WmfException $ex) {
      $message = t("Import error: !err", array('!err' => $ex->getMessage()));
      form_set_error('import_upload_file', $message);
      ChecksImportLog::record($message);
    }
    catch (Exception $ex) {
      $message = t("Unknown import error: !err", array('!err' => $ex->getMessage()));
      form_set_error('import_upload_file', $message);
      ChecksImportLog::record($message);
    }
    if ($file) {
      file_delete($file, TRUE);
    }
  }
}

/**
 * @param $form_state
 *
 * @return array
 */
function offline2civicrm_get_gateway_specific_fields($form_state) {
  $additionalFields = array_diff_key($form_state['values']['offline2civicrm_settings'], array('import_upload_format' => TRUE));
  return $additionalFields;
}

/**
 * Get the class for the import.
 *
 * @param string $uploadFormat
 * @param string $fileUri
 * @param array $additionalFields
 *
 * @return \ChecksFile
 *
 * @throws \Exception
 */
function offline2civicrm_get_importer_class($uploadFormat, $fileUri, $additionalFields = array()) {
  switch ($uploadFormat) {

    case 'citibank':
      return new CitibankFile($fileUri, $additionalFields);
      break;

    case 'engage':
      return new EngageChecksFile($fileUri, $additionalFields);

    case 'coinbase':
      return new CoinbaseFile($fileUri, $additionalFields);

    case 'generic_ind':
      return new WmfImportFile($fileUri, $additionalFields);

    case 'generic_org':
      return new WmfOrgImportFile($fileUri, $additionalFields);

    case 'benevity':
      return new BenevityFile($fileUri, $additionalFields);

    case 'paypal':
      return new PayPalChecksFile($fileUri, $additionalFields);

    case 'jpmorgan':
      return new JpMorganFile($fileUri, $additionalFields);

    case 'foreign_checks':
      return new ForeignChecksFile($fileUri, $additionalFields);

    case 'square':
      return new SquareFile($fileUri, $additionalFields);

    case 'stripe':
      return new StripeFile($fileUri, $additionalFields);

    case 'trilogy':
      return new TrilogyFile($fileUri, $additionalFields);

    default:
      throw new Exception('Bad file format selection');
  }

}
