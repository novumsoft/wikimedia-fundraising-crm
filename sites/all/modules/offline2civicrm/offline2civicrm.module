<?php

require_once 'offline2civicrm.common.inc';

use wmf_communication\Templating;

/**
 * Implementation of hook_menu().
 */
function offline2civicrm_menu() {
  $items = array();
  
  $items['admin/config/offline2civicrm'] = array(
    'title' => 'Offline to CiviCRM',
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  /*
  TODO
  $items['admin/config/offline2civicrm/settings'] = array(
    'title' => 'Offline to CiviCRM',
    'description' => t('Configure offline import interface.'),
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_settings'),
  );
  */

  $items['admin/import_checks'] = array(
    'title' => 'Import Checks',
    'access arguments' => array('offline2civicrm bulk import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_import_checks_form'),
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function offline2civicrm_permission() {
  return array(
    'administer offline2civicrm' => array(
      'title' => t("Administer offline2civicrm"),
    ),
    'offline2civicrm bulk import' => array(
      'title' => t("Import batch files with offline2civicrm"),
    ),
  );
}

/**
 * Callback for menu path "admin/config/offline2civicrm".
 */
function offline2civicrm_settings() {
  $form = array();
  
  return system_settings_form($form);
}

function offline2civicrm_import_checks_form() {
  $dir = drupal_get_path( 'module', 'offline2civicrm' );
  drupal_add_js( $dir . '/upload_form.js' );

  $log_events = ChecksImportLog::recentEvents();
  $headers = array( 'Time', 'Who', 'Done' );
  $rows = array();
  foreach ( $log_events as $event ) {
    $rows[] = array(
      $event->time,
      $event->who,
      $event->done,
    );
  }
  $log_html = theme_table( array(
    'header' => $headers,
    'rows' => $rows,
    'empty' => "No events yet.",
    'attributes' => array(),
    'caption' => t( 'Latest import events' ),
    'colgroups' => array(),
    'sticky' => true,
  ) ).theme('pager');

  $form['import_upload_file'] = array(
    '#title' => t( 'Upload checks file' ),
    '#type' => 'file',
  );
  $form['import_upload_submit'] = array(
    '#type' => 'submit',
    '#value' => t( 'Upload' ),
  );
  $form['import_upload_format'] = array(
    '#title' => t( 'File format' ),
    '#type' => 'radios',
    '#default_value' => 'azl',
    '#options' => array(
        'azl' => t( 'AZ Lockbox' ),
        'paypal' => t( 'EFT donations' ),
        'jpmorgan' => t( 'JP Morgan' ),
    ),
  );
  $form['log'] = array(
    '#markup' => $log_html,
  );

  $form['#attributes'] = array( 'enctype' => "multipart/form-data" );

  return $form;
}

function offline2civicrm_import_checks_form_submit( $form, $form_state ) {
  if ( !empty( $form_state['values']['import_upload_submit'] ) ) {
    try {
      $validators = array(
        'file_validate_extensions' => array('csv'),
      );
      $file = file_save_upload( 'import_upload_file', $validators );
      if ( !$file ) {
        throw new Exception( t( "Form upload failed!" ) );
      }

      // This workaround... does not always work.  Will be deprecated in Civi 4.3
      civicrm_initialize();
      $smellyTmp = CRM_Core_TemporaryErrorScope::useException();

      switch ( $form_state['values']['import_upload_format'] ) {
      case 'azl':
        $importer = new AzlChecksFile( $file->uri );
        break;
      case 'paypal':
        $importer = new PayPalChecksFile( $file->uri );
        break;
      case 'jpmorgan':
        $importer = new JpMorganFile( $file->uri );
        break;
      default:
        throw new Exception( 'Bad file format selection' );
      }
      $importer->import();
      drupal_set_message( "Successful import!" );
    }
    catch ( WmfException $ex ) {
      $message = t( "Import error: !err", array( '!err' => $ex->getMessage() ) );
      form_set_error( 'import_upload_file', $message );
      ChecksImportLog::record( $message );
    }
    catch ( Exception $ex ) {
      $message = t( "Unknown import error: !err", array( '!err' => $ex->getMessage() ) );
      form_set_error( 'import_upload_file', $message );
      ChecksImportLog::record( $message );
    }
    if ( $file ) {
      file_delete( $file, true );
    }
  }
}

/**
 * This hook gets called after a contribution is added via the queue consumer.
 * If the contribution was a check, it adds the check to a "Review" group for manual review
 * by the Development/Major Gifts team.
 *
 * Implementation of hook_queue2civicrm_import
 *
 * @param $contribution_info
 */
function offline2civicrm_queue2civicrm_import( $contribution_info ){

  static $group;
  $group_name = "Imported checks to review";

  // check for the required keys
  if( !array_key_exists( "msg", $contribution_info )
    || !array_key_exists( "gateway", $contribution_info['msg'] )
    || !array_key_exists( "contact_id", $contribution_info )
  ){
    return;
  }

  //FIXME: we are not using any such gateway.  Instead, look for non-null custom 'check number' field.  QA this code path before enabling.
  if( strtoupper( $contribution_info['msg']['gateway'] ) == "CHECK"  ){
    // add the transactions to the check import group for review
    watchdog( 'offline2civicrm', "Adding CHECK to group $group_name" );

    // if the group has not already been retrieved, go and get it
    if( !isset( $group ) ){
      $group_tmp = civicrm_api( "Group", "Get", array(
        'version' => '3',
        'title' => $group_name
      ));

      // TODO: use the wmf_common API checker when it exists
      if( is_array( $group_tmp ) && array_key_exists( "is_error", $group_tmp ) && $group_tmp['is_error'] == "0" ){
        if( array_key_exists( "count", $group_tmp ) && $group_tmp['count'] > 0 ){
          $group = $group_tmp['values'][ $group_tmp['id'] ];
          watchdog( 'offline2civicrm', "Found group \"$group_name\" with id=" . $group_tmp['id'] );
        } else {
          // we need to create the group
          $group_tmp = civicrm_api( "Group", "Create", array(
            'version' => '3',
            'title' => $group_name
          ));

          if( is_array( $group_tmp ) && array_key_exists( "is_error", $group_tmp ) && $group_tmp['is_error'] == "0" ){
            $group = $group_tmp['values'][ $group_tmp['id'] ];
            watchdog( 'offline2civicrm', "Group created for \"$group_name\" with id=" . $group_tmp['id'] );
          } else {
            watchdog( 'offline2civicrm', 'Could not retrieve or create group for checks' . print_r( $group_tmp, TRUE ) );
          }
        }
      } else {
        watchdog( 'offline2civicrm', 'Could not retrieve group for checks' . print_r( $group_tmp, TRUE ) );
        return;
      }
    }

    // add the contact for the imported check into the group
    $group_contact = civicrm_api( "GroupContact", "Create", array(
      "version" => "3",
      "group_id" => $group['id'],
      "contact_id" => $contribution_info['contact_id']
    ));

    // TODO: use the wmf_common API checker when it exists
    if( is_array( $group_contact ) && array_key_exists( "is_error", $group_contact ) && $group_contact['is_error'] == "0" ){
      watchdog( 'offline2civicrm', "Successfully added GroupContact:" . print_r( $group_contact, true ) );
    } else {
      watchdog( 'offline2civicrm', "FAILED to add GroupContact:" . print_r( $group_contact, true ) );
    }
    return;
  }
  // do nothing for non-checks
}
