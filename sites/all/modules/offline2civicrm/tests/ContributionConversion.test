<?php

module_load_include( 'php', 'queue2civicrm', 'tests/simpletest/BaseTestCase' );

class ContributionConversionTest extends BaseTestCase {
    public static function getInfo() {
        return array(
            'name' => 'ContributionConversion',
            'group' => 'Wikimedia',
            'description' => 'Convert single contributions to recurring',
        );
    }

    public function setUp() {
        parent::setUp();

        $api = civicrm_api_classapi();
        $api->Contact->Create( array(
            'contact_type' => 'Individual',
            'email' => 'foo@example.com',
            'version' => 3,
        ) );
        $this->contact_id = $api->id;

        $this->gateway_txn_id = "NaN-" . mt_rand();
        $this->transaction = WmfTransaction::from_unique_id( "GLOBALCOLLECT {$this->gateway_txn_id}" );

        $api->Contribution->Create( array(
            'contact_id' => $this->contact_id,
            'trxn_id' => $this->transaction->get_unique_id(),
            'contribution_type' => 'Cash',
            'total_amount' => '20.01',
            'receive_date' => wmf_common_date_unix_to_sql( time() ),
            'version' => 3,
        ) );
        $this->contribution_id = $api->id;

        wmf_civicrm_set_custom_field_values( $this->contribution_id, array(
            'original_amount' => '20.01',
            'original_currency' => 'USD',
        ) );
    }

    public function tearDown() {
        $api = civicrm_api_classapi();

        $api->Contribution->Delete( array(
            'id' => $this->contribution_id,
            'version' => 3,
        ) );

        $api->Contact->Delete( array(
            'id' => $this->contact_id,
            'version' => 3,
        ) );

        parent::tearDown();
    }

    public function testMakeRecurring() {
        ContributionConversion::makeRecurring( $this->transaction );

        $contributions = wmf_civicrm_get_contributions_from_gateway_id( $this->transaction->gateway, $this->transaction->gateway_txn_id );
        $this->assertNotNull( $contributions[0]['contribution_recur_id'],
            "Became a recurring contribution" );
    }

    public function testMakeRecurringCancelled() {
        ContributionConversion::makeRecurring( $this->transaction, true );

        $contributions = wmf_civicrm_get_contributions_from_gateway_id( $this->transaction->gateway, $this->transaction->gateway_txn_id );

        $api = civicrm_api_classapi();
        $api->ContributionRecur->Get( array(
            'id' => $contributions[0]['contribution_recur_id'],

            'version' => 3,
        ) );
        $contribution_recur = $api->values[0];
        $this->assertNotNull( $contribution_recur->cancel_date,
            "Marked as cancelled" );
    }
}
