<?php

use wmf_communication\Mailer;
use wmf_communication\Templating;
use wmf_communication\Translation;
use Html2Text\Html2Text;

require_once drupal_get_path( 'module', 'wmf_civicrm' ) . '/civicrm_api_check.inc';
require_once drupal_get_path( 'module', 'wmf_common' ) . '/MessageFile.php';

/**
 * Implements hook_permission
 */
function thank_you_permission() {
  return array(
    'administer thank you' => array(
      'title' => t('Administer Thank-You'),
    ),
  );
}

function thank_you_menu() {
  $items = array();
  
  $items['admin/config/thank_you'] = array(
    'title' => 'Thank you settings',
    'access arguments' => array('administer thank you'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/thank_you/configure'] = array(
    'title' => 'Configure thank you module',
    'description' => 'Configure thank you note options.',
    'access arguments' => array('administer thank you'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thank_you_settings_form'),
  );

   $items['admin/config/thank_you/test_email'] = array(
     'title' => 'Test thank you emails',
     'description' => 'Send a test letter',
     'access callback' => true,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('thank_you_send_test'),
   );

  return $items;
}

/**
 * Send a test email
 */
function thank_you_send_test() {
	// allow the user to specify the email address to which to send the test email
	$form['thank_you_test_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Send test email to'),
		'#required' => TRUE
	);

	// load the available languages to test
	// TODO: add a staging list so that one can test before enabling
	$langs = array();
	foreach( glob( __DIR__ . "/templates/html/thank_you.*.html") as $lang ){
		$lang = substr( $lang, strrpos( $lang, '/' ) + 1 );
		$lang = substr( $lang, strpos( $lang, '.' ) + 1 );
		$lang = substr( $lang, 0, strpos( $lang, '.' ) );
		$langs[$lang] = $lang;
	}
	$langs["all"] = "- ALL -";
	ksort($langs);

	// allow the user to select the language to test
	$form['thank_you_test_language'] = array(
		'#type' => 'select',
		'#title' => t('Thank you message language'),
		'#required' => TRUE,
		'#default_value' => 'en',
		'#options' => $langs,
	);

	$form['thank_you_test_recurring'] = array(
		'#type' => 'checkbox',
		'#title' => t('Recurring donation?'),
		'#default_value' => false,
	);

	$form['submit'] = array(
		'#value' => 'Send test email',
		'#type' => 'submit'
	);

	return $form;
}

function thank_you_send_test_submit( $form_id, $form_values ) {
	if ( !is_array( $form_values ) ){
		// well, something here is broken
		drupal_set_message("Test thank you email failed.", 'error');
		return false;
	}
	elseif ( ! ( array_key_exists( 'values', $form_values ) &&
				 array_key_exists( 'thank_you_test_email', $form_values[ 'values' ] ) &&
				 array_key_exists( 'thank_you_test_language', $form_values[ 'values' ] ) ) ){
		// we need something to test
		drupal_set_message("Test thank you email missing required settings.", 'error');
	}

	$email = $form_values['values']['thank_you_test_email'];

	civicrm_initialize( true );

	$contact = civicrm_api("Contact","Get", array (
		'version' =>'3',
		'email' => $email,
		'sequential' => 1
	));
	// check for errors in the API result
	if ( !WMFCiviAPICheck::check_api_result( $contact ) ){
		drupal_set_message("Test thank you email failed on contact lookup for that email address." .
			"(A contact associated with that email address must exist in the database)", 'error');
		return false; // massive fail
	}

	if( !( $contact = WMFCiviAPICheck::check_api_simplify( $contact, null, true ) ) ){
		drupal_set_message("Test thank you email failed on contact simplification for that email address.", 'error');
		return false; // massive fail
	}

	$contribution = civicrm_api("Contribution","get", array (
		'version' =>'3',
		'contact_id' => $contact[ 'contact_id' ],
		'sequential' => 1
	));

	// check for errors in the API result
	if ( !WMFCiviAPICheck::check_api_result( $contribution ) ){
		drupal_set_message("Test thank you email failed on contribution lookup for that email address." .
			"(A contribution associated with that email address must exist in the database)", 'error');
		return false; // massive fail
	}

	if( !( $contribution = WMFCiviAPICheck::check_api_simplify( $contribution, null, true ) ) ){
		drupal_set_message("Test thank you email failed on contribution simplification for that email address.", 'error');
		return false; // massive fail
	}

	if ( $form_values["values"]["thank_you_test_language"] == "all" ){
		$langs = array();
		foreach( glob( __DIR__ . "/templates/html/thank_you.*.html") as $lang ){
			$lang = substr( $lang, strrpos( $lang, '/' ) + 1 );
			$lang = substr( $lang, strpos( $lang, '.' ) + 1 );
			$lang = substr( $lang, 0, strpos( $lang, '.' ) );
			$langs[$lang] = $lang;
		}

		foreach ( $langs as $l ){
			watchdog(
				'thank_you',
				"Starting thank_you test send to {$form_values['values']['thank_you_test_email']} in $l",
				array(),
				WATCHDOG_INFO
			);
			if ( true === thank_you_send( $contribution[ 'contribution_id' ],
				array(
					 "language" => $l,
					 "email" => $form_values['values']['thank_you_test_email'],
					 "recurring" => $form_values['values']['thank_you_test_recurring']
				) ) ){
				drupal_set_message("Test thank you email sent to " . $contact['email'] . " in " .
					$l, 'info');
			} else {
				drupal_set_message("Test thank you email FAILED to " . $contact['email'] . " in " .
					$l, 'error');
			}
		}
		return true;
	}

	if ( true === thank_you_send( $contribution[ 'contribution_id' ],
						 array(
							  "language" => $form_values['values']['thank_you_test_language'],
							  "email" => $form_values['values']['thank_you_test_email'],
							  "recurring" => $form_values['values']['thank_you_test_recurring']
						 ) ) ){
		drupal_set_message("Test thank you email sent to " . $contact['email'] . " in " .
						   $form_values['values']['thank_you_test_language'], 'info');
	} else {
		drupal_set_message("Test thank you email FAILED to " . $contact['email'] . " in " .
						   $form_values['values']['thank_you_test_language'], 'error');
	}
	return true;
}

// This function should encompass the entire process
function thank_you_send( $contribution_id, $test=null ) {
	civicrm_initialize( true );
	$contribution = civicrm_api("Contribution","get",
		array (
			  'version' =>'3',
			  'contribution_id' => $contribution_id
		));

	// check that the API result is a valid contribution result
	if( !WMFCiviAPICheck::check_api_contribution( $contribution, $contribution_id ) ){
		// the API result is bad
		watchdog('thank_you', 'Could not retrieve contribution record for: ' . $contribution_id . '<pre>' . print_r( $contribution, true ) . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	// go ahead and remove the extra layer of indirection to make it easier to use
	$simplified = WMFCiviAPICheck::check_api_simplify( $contribution, $contribution_id );
	if( !$simplified ){
		// simplification failed
		watchdog('thank_you', 'Could not simplify contribution record for: ' . $contribution_id . '<pre>' . print_r( $contribution, true )  . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	$contribution = $simplified;

	// get the information for the associated contact
	$contact = civicrm_api("Contact","get",
		array (
			  'version' =>'3',
			  'id' => $contribution[ 'contact_id' ],
			  'return' => "display_name,first_name,last_name,email,preferred_language"
		));

	// check that the API result is a valid contact result
	if( !WMFCiviAPICheck::check_api_contact( $contact, $contribution[ 'contact_id' ] ) ){
		// the API result is bad
		watchdog('thank_you', 'Could not retrieve contact record for: ' . $contribution['contact_id'] . '<pre>' . print_r( $contact, true )  . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	// go ahead and remove the extra layer of indirection to make it easier to use
	$simplified = WMFCiviAPICheck::check_api_simplify( $contact, $contribution[ 'contact_id' ] );
	if( !$simplified ){
		// simplification failed
		watchdog('thank_you', 'Could not simplify contact record for: ' . $contribution['contact_id']. '<pre>' . print_r( $contact, true ). '</pre>', array(), WATCHDOG_ERROR);
	}
	$contact = $simplified;

	// check for contacts without an email address
	if ( !array_key_exists( 'email', $contact ) ){
		watchdog('thank_you', 'No email address found. Processing as anonymous.', array(), WATCHDOG_INFO);

		// update the field with the anonymous flag and set the TY date to the epoch
		if( thank_you_update_ty_date( $contribution, true ) ){
			// GTFO so we can keep processing donations
			return true;
		}
		else{
			watchdog('thank_you', 'Updating contribution record for no-op TY msg send FAILED for: !contribution_id',
				array( '!contribution_id' => $contribution_id ), WATCHDOG_INFO
			);
			// we didn't want to send one anyway, so in the current workflow, this is fine
			return true;
		}
	}

	// only check the following if this is not a test
	if ( is_null( $test ) ){
		// don't send a Thank You email if one has already been sent
		if (array_key_exists('thankyou_date', $contribution) && is_numeric($contribution['receive_date']) && $contribution['receive_date'] > 0 ) {
			watchdog('thank_you', 'Thank you email already sent for this transaction.', array(), WATCHDOG_INFO);
			return false;
		}
		// only send a Thank You email if we are within the specified window
		if (strtotime($contribution['receive_date']) < time() - 86400 * variable_get('thank_you_days', 14)) {
			watchdog('thank_you', 'Contribution is older than limit, ignoring.', array(), WATCHDOG_INFO);
			return false;
		}
	}

	$language = 'en';
	$country = 'XX';

	$locale = explode('_', $contact['preferred_language']);
	if( count( $locale ) == 2 ){
		$language = trim( $locale[0] );
		$country = trim( $locale[1] );
	}
	elseif( count( $locale ) == 1 ){
		// this be a language
		$language = $locale[0];
	}

	if( isset( $test ) ){
		$language = $test['language'];

		if( $test['recurring'] ){
			$contribution['trxn_id'] = 'RECURRING ' . $contribution['trxn_id'];
		}
	}

	// @todo there is a lot more that we could do to determine the right language and
	// country, but it is out of scope for the current implementation
	// e.g. use contribution_tracking fields or drill down address


	$email = array(
		'from_name' => variable_get( 'thank_you_from_name', 'Wikimedia Foundation' ),
		'from_address' => variable_get( 'thank_you_from_address', 'donate@wikimedia.org' ),

		'to_name' => $contact['display_name'],
		'to_address' => $contact['email'],

		'subject' => variable_get( 'thank_you_subject', 'Thank you from the Wikimedia Foundation' ),
	);

	$email['html'] = thank_you_render( $contribution, $contact, $language, $country );

	if( $email['html'] == false ){
		watchdog( 'thank_you', "HTML rendering of template failed in {$language}_{$country}.", array(), WATCHDOG_ERROR );
		wmf_common_failmail( 'thank_you', "FAILED TO RENDER HTML EMAIL\n" . __FUNCTION__ . "\n\n" . print_r($contribution, true) . print_r($contact, true), array() );
		return false;
	}

	$converter = new Html2Text( $email['html'], false, array( 'do_links' => 'table' ) );
	$email['plaintext'] = $converter->get_text();

	if( $email['plaintext'] == false ){
		watchdog( 'thank_you', "Text rendering of template failed in {$language}_{$country}.", array(), WATCHDOG_ERROR );
		wmf_common_failmail( 'thank_you', "FAILED TO RENDER PLAINTEXT EMAIL\n" . __FUNCTION__ . "\n\n" . print_r($contribution, true) . print_r($contact, true), array() );
		return false;
	}

	$subj_msg = "donate_interface-email-subject";
	$email['subject'] = Translation::get_translated_message( $subj_msg, $language );

	$mailer = Mailer::getDefault();

	$email['reply_to'] = 'bounce-' . str_replace( '@', '=', $email['to_address'] ) . '@donate.wikimedia.org';

	try {

		if ( $test ) {
			$email['to_address'] = $test['email'];
			$email['subject'] = "[Test TY - {$test['language']}] {$email['subject']}";
		}
		watchdog("thank_you", "Sending ty email to: " . $email['to_address'], array(), WATCHDOG_INFO);

		$email_success = $mailer->send( $email );

	} catch (phpmailerException $e) {
        //TODO: don't assume phpmailer

		$debug = array_merge( $email, array( "html" => '', "plaintext" => '' ) );
		watchdog('thank_you', 'Sending thank you message failed in phpmailer for contribution: ' .
			$contribution_id . '<pre>' . check_plain(print_r($debug, TRUE)) . "\n\n" .
			$e->errorMessage() . '</pre>', array(), WATCHDOG_ERROR);

		if( strpos( $e->errorMessage(), "Invalid address:" ) === false ){
			watchdog( 'thank_you', "PhpMailer died unexpectedly: {$e->errorMessage()} at {$e->getTraceAsString()}", array(), WATCHDOG_ERROR );
			wmf_common_failmail( 'thank_you', "UNHANDLED PHPMAILER EXCEPTION SENDING THANK YOU MESSAGE\n" . __FUNCTION__ . "\n\n" . $e->errorMessage() . "\n\n" . $e->getTraceAsString(), $debug );

			if( variable_get( "thank_you_async_send", false ) ){
				// we are not sending as part of q2c, so abort abort abort
				watchdog( "thank_you", "HALTING the processing of thank you emails", array(), WATCHDOG_ERROR );
				exit( 1 );
			}

			return false;
		}

		$email_success = false;
		// fall through and set thankyou_date to epoch

	} catch (Exception $e) {
		$debug = array_merge( $email, array( "html" => '', "plaintext" => '' ) );
		watchdog('thank_you', 'Sending thank you message failed with generic exception for contribution: ' .
			$contribution_id . '<pre>' . check_plain(print_r($debug, TRUE)) . "\n\n" .
			$e->getMessage() . '</pre>', array(), WATCHDOG_ERROR);

		wmf_common_failmail( 'thank_you', "UNHANDLED EXCEPTION SENDING THANK YOU MESSAGE\n" . __FUNCTION__ . "\n\n" . $e->getMessage() . "\n\n" . $e->getTraceAsString(), $debug );

		if( variable_get( "thank_you_async_send", false ) ){
			// we are not sending as part of q2c, so abort abort abort
			watchdog( "thank_you", "HALTING the processing of thank you emails", array(), WATCHDOG_ERROR );
			exit( 1 );
		}

		return false;
	}
	if ( $email_success && is_null( $test ) ) {
		watchdog('thank_you', "Thank you mail sent successfully for contribution id: $contribution_id to " . $email['to_address'], array(), WATCHDOG_INFO);

		if( thank_you_update_ty_date( $contribution ) ){
			watchdog('thank_you', 'Thank you date successfully updated for contribution id: ' . $contribution_id, array(), WATCHDOG_INFO);
		}
		else {
			watchdog('thank_you', 'Updating successful TY send failed: ' . $contribution_id, array(), WATCHDOG_ERROR);
		}
	} elseif ( !$email_success ){
		watchdog('thank_you', "Thank you mail failed for contribution id: $contribution_id to " . $email['to_address'], array(), WATCHDOG_ERROR);
		thank_you_update_ty_date( $contribution, true );
		watchdog('thank_you', "Thank you date set to epoch for contribution id: $contribution_id to " . $email['to_address'], array(), WATCHDOG_INFO);
	}

	return true;
}

function thank_you_update_ty_date( $contribution, $anonymous=false ){

	$params = array(
		'version' => '3',
		'id' => $contribution[ 'contribution_id' ],
		'contribution_id' => $contribution[ 'contribution_id' ],
		'thankyou_date' => wmf_common_date_unix_to_civicrm( time() ),
	);

	if( $anonymous ){
		// we can't send a TY if it was an anonymous donation or we don't have an email
		// address, but we want to mark it as such
		$params['thankyou_date'] = "1970-01-01 00:00:00";

		watchdog('thank_you', 'Updating TY send date to: ' . $params['thankyou_date'], array(), WATCHDOG_INFO);

		return wmf_civicrm_set_thankyou_date_to_epoch( $contribution[ 'contribution_id' ] );
	}

	watchdog('thank_you', 'Updating TY send date to: ' . $params['thankyou_date'], array(), WATCHDOG_INFO);

	// the update function seems to not work for Contribution and the insert
	// updates when a contribution_id is passed
	$result = civicrm_api( "Contribution", "create", $params );

	if( WMFCiviAPICheck::check_api_contribution( $result, $contribution['contribution_id'] ) ){
		return true;
	}

	watchdog('thank_you', 'Updating successful TY send failed with details: ' . print_r( $result, true ), array(), WATCHDOG_ERROR);

	return false;
}

function thank_you_settings_form() {
  $form = array();

	$form['thank_you_unsubscribe_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Base URL for the unsubscribe page'),
		'#required' => TRUE,
		'#default_value' => variable_get('thank_you_unsubscribe_url', ''),
	);

  $form['thank_you_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('From name (default)'),
    '#default_value' => variable_get('thank_you_from_name', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_from_address'] = array(
    '#type' => 'textfield',
    '#title' => t('From address'),
    '#default_value' => variable_get('thank_you_from_address', ''),
    '#required' => TRUE,
  );

  $form['thank_you_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Days before considering transaction too old to automatically thank'),
    '#default_value' => variable_get('thank_you_days', 14),
    '#required' => TRUE,
  );

	$form['thank_you_batch'] = array(
		'#type' => 'select',
		'#title' => t('Cron batch size'),
		'#required' => TRUE,
		'#default_value' => variable_get('thank_you_batch', 0),
		'#options' => array(
			0 => '0 (Disable)',
			1 => 1,
			5 => 5,
			10 => 10,
			20 => 20,
			30 => 30,
			40 => 40,
			50 => 50,
			75 => 75,
			100 => 100,
			150 => 150,
			200 => 200,
			250 => 250,
			300 => 300,
			350 => 350,
			400 => 400,
			450 => 450,
			500 => 500,
			550 => 550,
			600 => 600,
			650 => 650,
			700 => 700,
		),
	);

	// this is still in use
  $form['thank_you_onestep_unsubscribe'] = array(
    '#type' => 'radios',
    '#title' => t('Unsubscription Confirmation'),
    '#required' => TRUE,
	'#options' => array(
	   "false" => t('Require confirmation'),
	   "true" => t('Do not require confirmation'),
	),
    '#default_value' => variable_get('thank_you_onestep_unsubscribe', 'false'),
  );

	$form['thank_you_async_send'] = array(
		'#type' => 'radios',
		'#title' => t('Thank you mail sending'),
		'#required' => TRUE,
		'#options' => array(
			false => t('Send TY email on queue consumption'),
			true => t('Send TY email asynchronously'),
		),
		'#default_value' => variable_get('thank_you_async_send', false),
	);

  return system_settings_form($form);
}

function thank_you_queue2civicrm_import( $contribution_info ) {

  static $async;
  if( !isset( $async ) ){
    $async = variable_get( "thank_you_async_send", false );
  }
  if( $async ){
    return;
  }

  $contribution_id = $contribution_info[ 'contribution_id' ];
  watchdog('thank_you', 'Calling thank you function for contribution: ' . $contribution_id, WATCHDOG_INFO );
  thank_you_send( $contribution_id );
}

function thank_you_recurring_globalcollect( $contribution_info ) {
	thank_you_queue2civicrm_import( $contribution_info );
}

function thank_you_batch_process(){
	// the following variables should be set in the module settings, not here
	$days = variable_get( 'thank_you_days', false );
	$batch = variable_get( 'thank_you_batch', false );

	if ( !$days ) {
		watchdog( "thank_you", "Number of days to send thank you mails not configured", array(), WATCHDOG_ERROR );
        return;
	}
	if ( !is_numeric( $batch ) ) {
		watchdog( "thank_you", "Thank you mail batch size not configured", array(), WATCHDOG_ERROR );
        return;
	}

	watchdog( "thank_you", "Attempting to send $batch thank you mails for contributions from the last $days days.", array(), WATCHDOG_INFO );

	$dbs = wmf_civicrm_get_dbs();
	$dbs->push( 'civicrm' );

	$ty_query = <<<EOT
		SELECT id, trxn_id
		FROM {civicrm_contribution}
		WHERE
			receive_date > DATE_SUB( NOW(), INTERVAL :interval DAY ) AND
			thankyou_date IS NULL
		ORDER BY id ASC LIMIT {$batch};
EOT;

	$result = db_query( $ty_query, array( ':interval' => $days ) );

	$count = 0;

	foreach( $result as $contribution ) {
		watchdog(
			"thank_you",
			"Attempting to send thank you mail for contribution {$contribution->id}, {$contribution->trxn_id}",
			array(),
			WATCHDOG_INFO
		);

		thank_you_send( $contribution->id );

		++$count;
	}

	watchdog( "thank_you", "Sent $count thank you emails ", array(), WATCHDOG_INFO );
}


/**
 *
 *
 * @param $contribution array simplified result of a CiviCRM Contribution API lookup
 * @param $contact array simplified result of a CiviCRM Contribution API lookup
 * @param $language
 */
function thank_you_render( $contribution, $contact, $language='en', $country='XX' ) {

    if( !is_array( $contribution ) || !is_array( $contact ) ) {
        return false;
    }

    $transaction = WmfTransaction::from_unique_id( $contribution['trxn_id'] );
    $recurring = $transaction->is_recurring;

    // go ahead and include the missed donations text until 17 May 2012
    // for Recurring GlobalCollect transactions
    $misseddonations = $transaction->gateway === "globalcollect"
            and $transaction->is_recurring
            and time() < mktime( 0, 0, 0, 5, 17, 2012);

	$unsub_params = array(
		"p" => "thankyou",
		"c" => $contribution['id'],
		"e" => $contact['email'],
		"h" => sha1( $contribution['id'] . $contact['email'] . WMF_UNSUB_SALT ),
		"uselang" => $language,
	);

	// Format the datestamp
	$date = strtotime( $contribution['receive_date'] );
	if ( $country === 'US' && strftime( "%m-%d" ) === '01-01' ) {
		// For tax reasons, any donation made in the US on Jan 1 UTC should have a timestring in HST
		$contribution['receive_date'] = strftime( "%Y-%m-%d", $date - ( 60 * 60 * 10 ) );
	} else {
		$contribution['receive_date'] = strftime( "%Y-%m-%d", $date);
	}

    $params = array(
        "contact" => $contact,
        "contribution" => $contribution,
        "recurring" => $recurring,
        "misseddonations" => $misseddonations,
        "unsubscribe_link" => variable_get( 'thank_you_unsubscribe_url', '' ) . '?' . http_build_query( $unsub_params, '', '&' ),
		"language" => $language,
		"country" => $country,
		"locale" => "{$language}_{$country}",
    );

    $template = new Templating(
        drupal_get_path( 'module', 'thank_you' ) . DIRECTORY_SEPARATOR . 'templates',
        "thank_you",
        $language,
        $params
    );

    return $template->render( 'html' );
}

class ThankYouException extends Exception{};
