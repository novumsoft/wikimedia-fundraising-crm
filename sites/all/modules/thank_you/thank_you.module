<?php

use wmf_communication\CiviMailStore;
use wmf_communication\CiviMailingInsertException;
use wmf_communication\CiviMailingMissingException;
use wmf_communication\CiviQueueInsertException;
use wmf_communication\Mailer;
use wmf_communication\Templating;
use wmf_communication\Translation;

// TODO:
// * use more exceptions in place of watchdog/return false
// * encapsulate template params structure and validation
// * implement 'specials' contingency passthru
// * reconsider need for twig extensions, we already do calculated values
// * give template fragments a named key rather than using integers

/**
 * Implements hook_permission
 */
function thank_you_permission() {
  return array(
    'administer thank you' => array(
      'title' => t('Administer Thank-You'),
    ),
  );
}

function thank_you_menu() {
  $items = array();

  $items['admin/config/thank_you'] = array(
    'title' => 'Thank you settings',
    'access arguments' => array('administer thank you'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/thank_you/configure'] = array(
    'title' => 'Configure thank you module',
    'description' => 'Configure thank you note options.',
    'access arguments' => array('administer thank you'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thank_you_settings_form'),
  );

   $items['admin/config/thank_you/test'] = array(
     'title' => 'Send test thank-yous',
     'description' => 'Send a test letter',
     'access arguments' => array('access content'),
     'page callback' => 'drupal_get_form',
     'page arguments' => array('thank_you_send_test_form'),
   );

  return $items;
}

/**
 * Send a test email
 */
function thank_you_send_test_form() {
    global $language, $user;
    $user_lc = ( $user->language ? $user->language : $language->language );

	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Donor\'s name'),
		'#required' => FALSE,
		'#default_value' => 'Testy McTestersen',
	);

	$form['recipient_address'] = array(
		'#type' => 'textfield',
		'#title' => t('Send test email to'),
        '#default_value' => $user->mail,
		'#required' => TRUE,
	);

	$form['from_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Sender\'s name'),
        '#default_value' => 'Thank-you Testmeister',
		'#required' => TRUE,
	);

	$form['from_address'] = array(
		'#type' => 'textfield',
		'#title' => t('Sender\'s email address'),
        '#default_value' => 'webmaster@local.localhost',
		'#required' => TRUE,
	);

	// load the available languages to test
	// TODO: add a staging list so that one can test before enabling
    // TODO elsewhere: these locales should be in canonical form
	$langs = array();
	foreach( glob( __DIR__ . "/templates/html/thank_you.*.html") as $lang ){
		$lang = substr( $lang, strrpos( $lang, '/' ) + 1 );
		$lang = substr( $lang, strpos( $lang, '.' ) + 1 );
		$lang = substr( $lang, 0, strpos( $lang, '.' ) );
		$langs[$lang] = $lang;
	}
	$langs["all"] = "- ALL -";
	ksort($langs);

	$form['locale'] = array(
		'#type' => 'select',
		'#title' => t('Thank you message language or locale'),
        # TODO: parse a locale in whatever format
		'#description' => t('Examples: "en" or "pt-BR".  The special "all" jackpot will win you a thank-you letter in each supported language.'),
		'#required' => TRUE,
		'#default_value' => $user_lc,
		'#options' => $langs,
	);

    $form['currency'] = array(
		'#type' => 'textfield',
		'#title' => t('Donation currency'),
		'#description' => t('Use the three-digit <a target="_blank" href="http://en.wikipedia.org/wiki/ISO_4217#Active_codes">ISO code</a>.'),
        '#default_value' => 'EUR',
		'#required' => TRUE,
	);

    $form['amount'] = array(
		'#type' => 'textfield',
		'#title' => t('Donation amount'),
        '#default_value' => '1.99',
		'#required' => TRUE,
	);

    # TODO: optional day picker added using unobtrusive js
	$form['receive_date'] = array(
		'#type' => 'textfield',
		'#title' => t('When do we say this donation took place?'),
		'#description' => t('Enter using any date format, or the day picker'),
		'#default_value' => date( DateTime::ISO8601 ),
	);

	$form['transaction_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Transaction ID'),
		'#description' => t('Some kind of key we would use to find your records, example: "CNTCT-1234"'),
		'#default_value' => 'TEST-' . mt_rand(),
	);

	$form['recurring'] = array(
		'#type' => 'checkbox',
		'#title' => t('Is a recurring donation?'),
		'#default_value' => false,
	);

	$form['contribution_tags'] = array(
		'#type' => 'textfield',
		'#title' => t('Contribution Tags'),
		'#description' => t('Comma or space-separated list of contribution tags, like "RecurringRestarted"'),
		'#default_value' => '',
	);

	$form['submit'] = array(
		'#value' => 'Send test email',
		'#type' => 'submit'
	);

	return $form;
}

/**
 * TODO: document what code and configuration this test covers, and which it does not
 */
function thank_you_send_test_form_submit( $form_id, $form_values ) {
	civicrm_initialize();
	$params = $form_values['values'];

    # Massage the params a bit
    $names = preg_split( '/ +/', $params['name'], 2, PREG_SPLIT_NO_EMPTY );
    if (count($names) == 2) {
        list( $params['first_name'], $params['last_name'] ) = $names;
    } else {
        $params['first_name'] = $params['last_name'] = '';
    }

    $params['unsubscribe_link'] = build_unsub_link( -1, $params['recipient_address'], $params['locale'] );

    // Turn a comma space separated list into an array
    if ( array_key_exists( 'contribution_tags', $params ) ) {
        $params['contribution_tags'] = preg_split('/[\s,]+/', $params['contribution_tags']);
    }

	if ( $params['locale'] === "all" ) {
		$langs = array();
		foreach( glob( __DIR__ . "/templates/html/thank_you.*.html") as $lang ){
			$lang = substr( $lang, strrpos( $lang, '/' ) + 1 );
			$lang = substr( $lang, strpos( $lang, '.' ) + 1 );
			$lang = substr( $lang, 0, strpos( $lang, '.' ) );
			$langs[$lang] = $lang;
		}

		foreach ( $langs as $lc ) {
            $params['locale'] = $lc;
            thank_you_send_test( $params );
		}
	} else {
        thank_you_send_test( $params );
    }

	return true;
}

function thank_you_get_languages() {
    return array_map(
        function ( $path ) {
            return preg_replace( '/^.+[.]([^.]+)[.]html$/', '\1', $path );
        },
        glob( __DIR__ . '/templates/html/thank_you.*.html' )
    );
}

function thank_you_send_test( $params ) {
    watchdog( 'thank_you', "Starting thank_you test send to {$params['recipient_address']} in {$params['locale']}", array(), WATCHDOG_INFO );

    if ( thank_you_send_mail( $params ) ) {
        drupal_set_message( "Test thank you email sent to {$params['recipient_address']} in {$params['locale']}", 'info' );
    } else {
        drupal_set_message( "FAILED to send test thank you email to {$params['recipient_address']} in {$params['locale']}.", 'error' );
    }
}

/**
 * Send a TY letter, and do bookkeeping on the Civi records
 * TODO: rewrite the civi api stuff to work like other code
 */
function thank_you_for_contribution( $contribution_id ) {
	civicrm_initialize( true );
	$contribution = civicrm_api("Contribution","get",
		array (
			  'version' =>'3',
			  'contribution_id' => $contribution_id
		));

	// check that the API result is a valid contribution result
	if( !WMFCiviAPICheck::check_api_contribution( $contribution, $contribution_id ) ){
		// the API result is bad
		watchdog('thank_you', 'Could not retrieve contribution record for: ' . $contribution_id . '<pre>' . print_r( $contribution, true ) . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	// go ahead and remove the extra layer of indirection to make it easier to use
	$simplified = WMFCiviAPICheck::check_api_simplify( $contribution, $contribution_id );
	if( !$simplified ){
		// simplification failed
		watchdog('thank_you', 'Could not simplify contribution record for: ' . $contribution_id . '<pre>' . print_r( $contribution, true )  . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	$contribution = $simplified;

    // don't send a Thank You email if one has already been sent
    if ( !empty($contribution['thankyou_date']) ) {
        watchdog('thank_you', 'Thank you email already sent for this transaction.', array(), WATCHDOG_INFO);
        return false;
    }
    // only send a Thank You email if we are within the specified window
    if (strtotime($contribution['receive_date']) < time() - 86400 * variable_get('thank_you_days', 14)) {
        watchdog('thank_you', 'Contribution is older than limit, ignoring.', array(), WATCHDOG_INFO);
        return false;
    }

	// get the information for the associated contact
	$contact = civicrm_api("Contact","get",
		array (
			  'version' =>'3',
			  'id' => $contribution[ 'contact_id' ],
			  'return' => "display_name,first_name,last_name,email,preferred_language"
		)
    );

	// check that the API result is a valid contact result
	if( !WMFCiviAPICheck::check_api_contact( $contact, $contribution[ 'contact_id' ] ) ){
		// the API result is bad
		watchdog('thank_you', 'Could not retrieve contact record for: ' . $contribution['contact_id'] . '<pre>' . print_r( $contact, true )  . '</pre>', array(), WATCHDOG_ERROR);
		return false;
	}
	// go ahead and remove the extra layer of indirection to make it easier to use
	$simplified = WMFCiviAPICheck::check_api_simplify( $contact, $contribution[ 'contact_id' ] );
	if( !$simplified ){
		// simplification failed
		watchdog('thank_you', 'Could not simplify contact record for: ' . $contribution['contact_id']. '<pre>' . print_r( $contact, true ). '</pre>', array(), WATCHDOG_ERROR);
	}
	$contact = $simplified;

    // check for contacts without an email address
    if ( empty( $contact['email'] ) or $contact['email'] === 'nobody@wikimedia.org' ) {
        watchdog('thank_you', 'No email address found. Processing as anonymous.', array(), WATCHDOG_INFO);
        wmf_civicrm_set_no_thank_you( $contribution['contribution_id'], 'anonymous' );
        return true;
    }

    $custom_values = wmf_civicrm_get_custom_values( $contribution_id, array(
        'no_thank_you',
        'original_amount',
        'original_currency',
    ) );

    if ( $custom_values['no_thank_you'] ) {
        watchdog('thank_you', "Contribution has been marked no_thank_you={$custom_values['no_thank_you']}, skipping.", array(), WATCHDOG_INFO);
        return false;
    }

    $amount = $custom_values['original_amount'];
    $currency = $custom_values['original_currency'];

    // Use settlement currency if the original currency is virtual, for tax reasons.
    if ( $custom_values['original_currency'] === 'BTC' ) {
        $amount = $contribution['total_amount'];
        $currency = $contribution['currency'];
    }

    $is_recurring = false;
    try {
        $transaction = WmfTransaction::from_unique_id( $contribution['trxn_id'] );
        $is_recurring = $transaction->is_recurring;
    } catch ( WmfException $ex ) {
        watchdog( 'thank_you', $ex->getMessage(), NULL, WATCHDOG_NOTICE );
    }

    $locale = $contact['preferred_language'];
    if ( !$locale or substr( $locale, 0, 1 ) === '_' ) {
        watchdog( 'thank_you', "Donor language unknown.  Defaulting to English...", NULL, WATCHDOG_INFO );
        $locale = 'en';
    }
    $locale = wmf_common_locale_civi_to_mediawiki( $locale );

    $params = array(
        'amount' => $amount,
        'contact_id' => $contact['id'],
        'currency' => $currency,
        'first_name' => $contact['first_name'],
		'from_name' => variable_get( 'thank_you_from_name', 'Wikimedia Foundation' ),
		'from_address' => variable_get( 'thank_you_from_address', 'donate@wikimedia.org' ),
        'last_name' => $contact['last_name'],
        'locale' => $locale,
        'name' => $contact['display_name'],
        'receive_date' => $contribution['receive_date'],
        'recipient_address' => $contact['email'],
        'recurring' => $is_recurring,
        'transaction_id' => "CNTCT-{$contact['id']}",
        'unsubscribe_link' => build_unsub_link( $contribution['id'], $contact['email'], $locale ),
        'contribution_tags' => wmf_thank_you_get_tag_names($contribution_id),
    );

    $success = thank_you_send_mail( $params );

    if ( $success ) {
		watchdog('thank_you', "Thank you mail sent successfully for contribution id: $contribution_id to " . $params['recipient_address'], array(), WATCHDOG_INFO);
        thank_you_update_ty_date( $contribution );
    } else {
		watchdog('thank_you', "Thank you mail failed for contribution id: $contribution_id to " . $params['recipient_address'], array(), WATCHDOG_ERROR);
        wmf_civicrm_set_no_thank_you( $contribution_id, 'failed' );
    }
}

/**
 * Get entity tag names.
 *
 * @param int $entity_id
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function wmf_thank_you_get_tag_names($entity_id) {
  $entityTags = civicrm_api3('EntityTag', 'get', array(
    // Hard code entity table for now.
    'entity_table' => 'civicrm_contribution',
    'entity_id' => $entity_id
  ));
  $tags = civicrm_api3('EntityTag', 'getoptions', array('field' => 'tag_id'));
  $tag_names = array();
  foreach ($entityTags['values'] as $id => $entityTag) {
    $tag_names[] = $tags['values'][$entityTag['tag_id']];
  }
  return $tag_names;
}

function thank_you_update_ty_date( $contribution ) {

	$params = array(
		'version' => '3',
		'id' => $contribution[ 'contribution_id' ],
		'contribution_id' => $contribution[ 'contribution_id' ],
		'thankyou_date' => wmf_common_date_unix_to_civicrm( time() ),
	);

	watchdog('thank_you', 'Updating TY send date to: ' . $params['thankyou_date'], array(), WATCHDOG_INFO);

	// the update function seems to not work for Contribution and the insert
	// updates when a contribution_id is passed
	$result = civicrm_api( "Contribution", "create", $params );

	if( WMFCiviAPICheck::check_api_contribution( $result, $contribution['contribution_id'] ) ){
		return true;
	}

	watchdog('thank_you', 'Updating successful TY send failed with details: ' . print_r( $result, true ), array(), WATCHDOG_ERROR);

	return false;
}

/**
 * Just send the letter
 */
function thank_you_send_mail( $params ) {
    $require_params = array(
        'amount',
        'currency',
        'from_name',
        'from_address',
        'locale',
        'receive_date',
        'recipient_address',
        'recurring',
        'transaction_id',
        'unsubscribe_link',
    );

    $missing = array();
    foreach ( $require_params as $key ) {
        if ( !isset( $params[$key] ) or $params[$key] === '' ) {
            $missing[] = $key;
        }
	}
    if ( $missing ) {
        $as_list = implode( ', ', $missing );
        watchdog( 'thank_you', "Missing stuff from the TY params: {$as_list} " . check_plain(print_r( $params, true )), array(), WATCHDOG_ERROR );
        wmf_common_failmail( 'thank_you', "FAILED TO RENDER HTML EMAIL because of missing parameters {$as_list} in " . __FUNCTION__, $params );
        return false;
    }

	$email = array(
		'from_name' => $params['from_name'],
		'from_address' => $params['from_address'],

		'to_name' => $params['name'],
		'to_address' => $params['recipient_address'],

		'subject' => variable_get( 'thank_you_subject', 'Thank you from the Wikimedia Foundation' ),

		'locale' => $params['locale'],
	);

	$email['html'] = thank_you_render( $params );

	if( $email['html'] == false ){
		watchdog( 'thank_you', "HTML rendering of template failed in {$params['locale']}.", array(), WATCHDOG_ERROR );
		wmf_common_failmail( 'thank_you', "FAILED TO RENDER HTML EMAIL in " . __FUNCTION__, $params );
		return false;
	}

	$email['subject'] = thank_you_get_subject( $params['locale'] );

	$mailer = Mailer::getDefault();

	$civi_queue_record = null;
	$create_civi_mail = variable_get( 'thank_you_add_civimail_records', 'false' );
	$rate = variable_get( 'thank_you_civimail_rate', 1.0 );
	if ( $create_civi_mail === 'true' && mt_rand(0, 10000) <= $rate * 10000 && isset( $params['contact_id'] ) ) {
		$civi_queue_record = thank_you_add_civi_queue(
			$email['to_address'],
			$params['contact_id'],
			$email['subject'],
			$email['html']
		);
	}

	if ( $civi_queue_record ) {
		$email['reply_to'] = $civi_queue_record->getVerp();
	} else {
		$email['reply_to'] = 'bounce-' . str_replace( '@', '=', $email['to_address'] ) . '@donate.wikimedia.org';
	}

	try {

		watchdog("thank_you", "Sending ty email to: " . $email['to_address'], array(), WATCHDOG_INFO);

		$email_success = $mailer->send(
			$email,
			array( 'List-Unsubscribe' => '<' . $params['unsubscribe_link'] . '>' )
		);

		if ( $civi_queue_record ) {
			$civi_queue_record->markDelivered();
		}

        return $email_success;
	} catch (phpmailerException $e) {
        //TODO: don't assume phpmailer
		//TODO: something with the CiviMail queue record to indicate it failed;
		$debug = array_merge( $email, array( "html" => '', "plaintext" => '' ) );
		watchdog('thank_you', 'Sending thank you message failed in phpmailer for contribution: ' .
			'<pre>' . check_plain(print_r($params, TRUE)) . "\n\n" .
			$e->errorMessage() . '</pre>', array(), WATCHDOG_ERROR);

		if( strpos( $e->errorMessage(), "Invalid address:" ) === false ){
			watchdog( 'thank_you', "PhpMailer died unexpectedly: {$e->errorMessage()} at {$e->getTraceAsString()}", array(), WATCHDOG_ERROR );
			wmf_common_failmail( 'thank_you', "UNHANDLED PHPMAILER EXCEPTION SENDING THANK YOU MESSAGE\n" . __FUNCTION__ . "\n\n" . $e->errorMessage() . "\n\n" . $e->getTraceAsString(), $debug );
		}

        return false;
	} catch (Exception $e) {
		$debug = array_merge( $email, array( "html" => '', "plaintext" => '' ) );
		watchdog('thank_you', 'Sending thank you message failed with generic exception for contribution: ' .
			'<pre>' . check_plain(print_r($params, TRUE)) . "\n\n" .
			check_plain(print_r($debug, TRUE)) . "\n\n" .
			$e->getMessage() . '</pre>', array(), WATCHDOG_ERROR);

		wmf_common_failmail( 'thank_you', "UNHANDLED EXCEPTION SENDING THANK YOU MESSAGE\n" . __FUNCTION__ . "\n\n" . $e->getMessage() . "\n\n" . $e->getTraceAsString(), $debug );

		return false;
	}
}

/**
 * Gets the template name and revision number from an html comment
 *
 * @param string $html HTML source of the thank you email
 *
 * @returns array, 'revision' contains rev no, 'name' contains template name
 *
 * @throws TemplateInfoMissingException if comment is not found
 */
function thank_you_get_template_info( $html ) {
	$matches = array();
	$info = null;
	if ( preg_match( '/<!-- TI_BEGIN(.+)TI_END -->/', $html, $matches ) ) {
		$info = json_decode( $matches[1] );
	}
	if ( $info === null ) {
		throw new TemplateInfoMissingException();
	}
	return $info;
}

/**
 * Add record of the sent email to CiviMail
 *
 * @param string $email recipient address
 * @param $contact_id recipient contact id
 * @param string $subject subject header to insert in case of missing mailing
 * @param string $html HTML email body, which should have a template info comment
 * @return CiviMailQueueRecord mail queue record with VERP header
 */
function thank_you_add_civi_queue( $email, $contact_id, $subject, $html ) {
	$civi_mailing = null;
	$civi_queue_record = null;
	$civimail_store = new CiviMailStore();
	try {
		$template_info = thank_you_get_template_info( $html );
		try {
			$civi_mailing = $civimail_store->getMailing( 'thank_you', $template_info->name, $template_info->revision );
		}
		catch ( CiviMailingMissingException $e ) {
			watchdog( 'thank_you', 'Could not find mailing record for email with subject ' . $subject, WATCHDOG_INFO );
			$civi_mailing = $civimail_store->addMailing( 'thank_you', $template_info->name, 'missing body', $subject, $template_info->revision );
		}
		$civi_queue_record = $civimail_store->addQueueRecord( $civi_mailing, $email, $contact_id );
		$civimail_store->addActivity( $civi_queue_record, $subject, $html );
	}
	catch ( TemplateInfoMissingException $e ) {
		watchdog( 'thank_you', 'Could not find template info comment in thank you email template with subject ' . $subject, WATCHDOG_INFO );
	}
	catch ( CiviQueueInsertException $e ) {
		watchdog( 'thank_you', 'CiviMail queue insert failed: ' . $e->getMessage(), WATCHDOG_INFO );
	}
	catch ( CiviMailingInsertException $e ) {
		watchdog( 'thank_you', 'Could not insert fallback mailing: ' . $e->getMessage(), WATCHDOG_INFO );
	}
	return $civi_queue_record;
}
/**
 * Get the translated email subject
 */
function thank_you_get_subject( $locale ) {
	$subj_msg = "donate_interface-email-subject";
	return Translation::get_translated_message( $subj_msg, $locale );
}

function thank_you_settings_form() {
  $form = array();

	$form['thank_you_unsubscribe_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Base URL for the unsubscribe page'),
		'#required' => TRUE,
		'#default_value' => variable_get('thank_you_unsubscribe_url', ''),
	);

  $form['thank_you_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('From name (default)'),
    '#default_value' => variable_get('thank_you_from_name', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_from_address'] = array(
    '#type' => 'textfield',
    '#title' => t('From address'),
    '#default_value' => variable_get('thank_you_from_address', ''),
    '#required' => TRUE,
  );

  $form['thank_you_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Days before considering transaction too old to automatically thank'),
    '#default_value' => variable_get('thank_you_days', 14),
    '#required' => TRUE,
  );

	$form['thank_you_batch'] = array(
		'#type' => 'select',
		'#title' => t('Cron batch size'),
		'#required' => TRUE,
		'#default_value' => variable_get('thank_you_batch', 0),
		'#options' => array(
			0 => '0 (Disable)',
			1 => 1,
			5 => 5,
			10 => 10,
			20 => 20,
			30 => 30,
			40 => 40,
			50 => 50,
			75 => 75,
			100 => 100,
			150 => 150,
			200 => 200,
			250 => 250,
			300 => 300,
			350 => 350,
			400 => 400,
			450 => 450,
			500 => 500,
			550 => 550,
			600 => 600,
			650 => 650,
			700 => 700,
		),
	);

	// this is still in use
  $form['thank_you_onestep_unsubscribe'] = array(
    '#type' => 'radios',
    '#title' => t('Unsubscription Confirmation'),
    '#required' => TRUE,
	'#options' => array(
	   "false" => t('Require confirmation'),
	   "true" => t('Do not require confirmation'),
	),
    '#default_value' => variable_get('thank_you_onestep_unsubscribe', 'false'),
  );

  $form['thank_you_add_civimail_records'] = array(
    '#type' => 'radios',
    '#title' => t('Track thank you emails to CiviMail'),
    '#required' => TRUE,
	'#options' => array(
	   "false" => t('Do not create CiviMail records'),
	   "true" => t('Create CiviMail records'),
	),
    '#default_value' => variable_get('thank_you_add_civimail_records', 'false'),
  );

  $form['thank_you_civimail_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('CiviMail sample rate, from 0 (never) to 1 (always)'),
    '#default_value' => variable_get('thank_you_civimail_rate', 1),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function thank_you_batch_process(){
	civicrm_initialize();
	// the following variables should be set in the module settings, not here
	$days = variable_get( 'thank_you_days', false );
	$batch = variable_get( 'thank_you_batch', false );

	if ( !$days ) {
		watchdog( "thank_you", "Number of days to send thank you mails not configured", array(), WATCHDOG_ERROR );
        return;
	}
	if ( !is_numeric( $batch ) ) {
		watchdog( "thank_you", "Thank you mail batch size not configured", array(), WATCHDOG_ERROR );
        return;
	}

	watchdog( "thank_you", "Attempting to send $batch thank you mails for contributions from the last $days days.", array(), WATCHDOG_INFO );

	$dbs = wmf_civicrm_get_dbs();
	$dbs->push( 'civicrm' );

	$ty_query = <<<EOT
		SELECT civicrm_contribution.id, trxn_id
		FROM civicrm_contribution
		JOIN wmf_contribution_extra
			ON wmf_contribution_extra.entity_id = civicrm_contribution.id
		WHERE
			receive_date > DATE_SUB( NOW(), INTERVAL :interval DAY ) AND
			thankyou_date IS NULL AND
			no_thank_you IS NULL
		ORDER BY id ASC LIMIT {$batch};
EOT;

	$result = db_query( $ty_query, array( ':interval' => $days ) );

	$count = 0;

	foreach( $result as $contribution ) {
		watchdog(
			"thank_you",
			"Attempting to send thank you mail for contribution ID [{$contribution->id}], trxn_id [{$contribution->trxn_id}]",
			array(),
			WATCHDOG_INFO
		);

		thank_you_for_contribution( $contribution->id );

		++$count;
	}

	watchdog( "thank_you", "Sent $count thank you emails ", array(), WATCHDOG_INFO );
}


/**
 *
 *
 * @param $params template parameters
 */
function thank_you_render( $params ) {

	// Format the datestamp
	$date = strtotime( $params['receive_date'] );

    // For tax reasons, any donation made in the US on Jan 1 UTC should have a timestring in HST.
    // So do 'em all that way.
    $params['receive_date'] = strftime( "%Y-%m-%d", $date - ( 60 * 60 * 10 ) );

    $template = new Templating(
        drupal_get_path( 'module', 'thank_you' ) . DIRECTORY_SEPARATOR . 'templates',
        "thank_you",
        $params['locale'],
        $params
    );

    $page_content = $template->render( 'html' );
    $page_content = str_replace( '<p></p>', '', $page_content );
    return $page_content;
}

function build_unsub_link( $contributionId, $emailAddr, $language ) {
    # TODO: transform locale to a MediaWiki language code
	$unsub_params = array(
		"p" => "thankyou",
		"c" => $contributionId,
		"e" => $emailAddr,
		"h" => sha1( $contributionId . $emailAddr . WMF_UNSUB_SALT ),
		"uselang" => $language,
	);

	return variable_get( 'thank_you_unsubscribe_url', '' ) . '?' . http_build_query( $unsub_params, '', '&' );
}

class ThankYouException extends Exception {}
class TemplateInfoMissingException extends Exception {}
