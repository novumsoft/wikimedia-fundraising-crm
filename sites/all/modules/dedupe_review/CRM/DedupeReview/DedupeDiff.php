<?php

use cogpowered\FineDiff\Diff as DiffMatcher;
use cogpowered\FineDiff\Render\Html as HtmlDiffRenderer;

/**
 * Render the difference between contacts
 */
class CRM_DedupeReview_DedupeDiff {
    const DIFFERENCE_THRESHOLD = 0.5;
    const SEPARATOR_CHAR = '&bull;';

    /**
     * Calculate a diff between contacts
     *
     * @param CRM_Core_DAO $old_contact
     * @param CRM_Core_DAO $new_contact
     *
     * @return array:
     *       string name: html diff between names
     *       string address: html diff between street addresses
     *       string email: html diff between emails
     *       string country: html diff between countries
     *       string language: html diff between languages
     *       string contributions: html listing of old and new contributions
     */
    static function diff( $old_contact, $new_contact ) {
        $old_contribs = implode( ' ', array_map( function( $contribution ) {
                return $contribution->contribution_source;
            }, $old_contact->contributions ) );
        $new_contribs = implode( ' ', array_map( function( $contribution ) {
                return $contribution->contribution_source;
            }, $new_contact->contributions ) );

        return array(
            'email' => CRM_DedupeReview_DedupeDiff::charDiff( $old_contact->email, $new_contact->email ),
            'name' => CRM_DedupeReview_DedupeDiff::charDiff( $old_contact->display_name, $new_contact->display_name ),
            'address' => CRM_DedupeReview_DedupeDiff::charDiff( $old_contact->street_address, $new_contact->street_address ),
            'country' => CRM_DedupeReview_DedupeDiff::charDiff( $old_contact->country, $new_contact->country ),
            'language' => CRM_DedupeReview_DedupeDiff::charDiff( $old_contact->preferred_language, $new_contact->preferred_language ),
            'contributions' => "{$old_contribs} " . CRM_DedupeReview_DedupeDiff::SEPARATOR_CHAR . " {$new_contribs}",
        );
    }

    /**
     * Make a character-based string diff and return as HTML
     *
     * @param string $str1
     * @param string $str2
     *
     * @return string HTML rendering of diff
     */
    static function charDiff( $str1, $str2 ) {
        # FIXME
        require_once __DIR__ . "/../../vendor/autoload.php";
        $matcher = new DiffMatcher();
        $renderer = new HtmlDiffRenderer();
        $opcodes = $matcher->getOpcodes( $str1, $str2 );
        if ( CRM_DedupeReview_DedupeDiff::longestOverlap( $opcodes->getOpcodes() ) < ( strlen( $str1 ) * CRM_DedupeReview_DedupeDiff::DIFFERENCE_THRESHOLD ) ) {
            return "<del>{$str1}</del> &bull; <ins>{$str2}</ins>";
        } else {
            return $renderer->process( $str1, $opcodes );
        }
    }

    /**
     * Parse diff opcodes and return the longest common character sequence length
     *
     * @param array $opcodes arcane list of string opcodes generated by the diff lib
     *
     * @return int length of shared character run
     */
    static function longestOverlap( $opcodes ) {
        $longest = 0;
        foreach ( $opcodes as $code ) {
            if ( $code[0] === 'c' ) {
                if ( strlen( $code ) === 1 ) {
                    $cur = 1;
                } else {
                    $cur = intval( ltrim( $code, 'c' ) );
                }
                $longest = max( $cur, $longest );
            }
        }
        return $longest;
    }
}
