<?php

class TwigLocalizationTest extends DrupalWebTestCase {
	public function setUp() {
		parent::setUp();

		// Get twig
		if ( !class_exists( 'Twig_Autoloader', false ) ) {
			$twig_include = '/mnt/twig/current/lib/Twig/Autoloader.php';
			if( !file_exists( $twig_include ) ) {
				throw new Exception( "Twig libraries not found.  Path checked: $twig_include" );
			}
			require_once $twig_include;
			Twig_Autoloader::register();

			require_once drupal_get_path( 'module', 'wmf_common' ) . '/twigext_l10n/TwigLocalization.php';
		}
	}

	public static function getInfo() {
		return array(
			'name' => 'Twig Localization',
			'group' => 'Localization & Internationalization',
			'description' => 'Tests twig filters',
		);
	}

	public function testCurrencyFilter() {
		$this->assertEqual(
			TwigLocalization::l10n_currency( "USD 1234.56", 'en' ),
			"$1,234.56",
			"L10n Currency: USD Positive in locale en"
		);

		$this->assertEqual(
			TwigLocalization::l10n_currency( "USD -1234.56", 'en' ),
			"($1,234.56)",
			"L10n Currency: USD negative in locale en"
		);
	}

	public function testNumericFilter() {
		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89123" ),
			"1234567.89",
			"l10n Numeric: * locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89123", 0 ),
			"1234568",
			"l10n Numeric: * locale with no decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89123", 2, 'en' ),
			"1,234,567.89",
			"l10n Numeric: en locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89123", 2, 'en_ZA' ),
			"1\xC2\xA0234\xC2\xA0567,89",
			"l10n Numeric: en_ZA locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89123", 2, 'de_XX' ),
			"1.234.567,89",
			"l10n Numeric: de_XX (fallback test) locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "1234567.89523", 2, 'xx_XX' ),
			"1234567.90",
			"l10n Numeric: xx_XX (complete fallback test, round up) locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "91234567.89123", 2, 'as' ),
			"9,12,34,567.89",
			"l10n Numeric: as locale (2,3 grouping test) locale with two decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "91234567.89123", 0, 'as' ),
			"9,12,34,568",
			"l10n Numeric: as locale (2,3 grouping test) locale with no decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "-34567.89123", 0, 'am' ),
			"-34,568",
			"l10n Numeric: am locale (negative formatting) locale with no decimals"
		);

		$this->assertEqual(
			TwigLocalization::l10n_number( "-34567.89523", 2, 'am' ),
			"-34,567.90",
			"l10n Numeric: am locale (negative formatting, round up) locale with no decimals"
		);
	}
}
